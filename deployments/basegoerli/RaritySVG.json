{
  "address": "0x67Ccfc2Ca4270DeF7922470A0DDEd1090514DFEF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rarities",
          "type": "uint256[]"
        }
      ],
      "name": "addAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "combineNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        }
      ],
      "name": "flatPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getColours",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "result",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getMintData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nameCount",
          "type": "uint256"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "results",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPath",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNextPathId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pathId",
          "type": "uint256"
        }
      ],
      "name": "getPathSections",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "getPathSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getRandomAsset",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "assetsId",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sectionId",
          "type": "uint256"
        }
      ],
      "name": "getSectionAssets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "isValidPath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "names",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rarity",
          "type": "uint256[]"
        }
      ],
      "name": "pushPathRarities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "pushSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetPaths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "assets",
          "type": "uint32[]"
        }
      ],
      "name": "setLastAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setLastPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "setNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setNextPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPathCount",
          "type": "uint256"
        }
      ],
      "name": "setPathCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPathDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pathId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rarity",
          "type": "uint256[]"
        }
      ],
      "name": "setPathRarities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pathId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "setPathRarity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_sections",
          "type": "uint256[][]"
        }
      ],
      "name": "setPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "pathSize",
          "type": "uint32"
        }
      ],
      "name": "setPathSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "newPathSizes",
          "type": "uint32[]"
        }
      ],
      "name": "setPathSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "sectionId",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "setSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x96c11c0ab00f9fad58fe16a6f10b57f5845b54a5e836462eef8ba9f3f407a7e4",
  "receipt": {
    "to": null,
    "from": "0xDFF917ab602e8508b6907dE1b038dd52B24A2379",
    "contractAddress": "0x67Ccfc2Ca4270DeF7922470A0DDEd1090514DFEF",
    "transactionIndex": 1,
    "gasUsed": "3934083",
    "logsBloom": "0x
    "blockHash": "0xff3f9b301ec950fa942438fe63042c9dd99a072c69cd7ba0f8b9b40a4212368c",
    "transactionHash": "0x96c11c0ab00f9fad58fe16a6f10b57f5845b54a5e836462eef8ba9f3f407a7e4",
    "logs": [],
    "blockNumber": 9462475,
    "cumulativeGasUsed": "3980936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Party🎉Pass",
    "0x88B11F935975441aC5b3711e2fbA9db8E5E7c775"
  ],
  "numDeployments": 1,
  "solcInputHash": "c554005d846e5256cfd947c8d0a331d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rarities\",\"type\":\"uint256[]\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"combineNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"}],\"name\":\"flatPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getColours\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"result\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getMintData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nameCount\",\"type\":\"uint256\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"results\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPath\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNextPathId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getPathSections\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"getPathSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getRandomAsset\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assetsId\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sectionId\",\"type\":\"uint256\"}],\"name\":\"getSectionAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"isValidPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rarity\",\"type\":\"uint256[]\"}],\"name\":\"pushPathRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"pushSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"}],\"name\":\"setLastAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setLastPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"setNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setNextPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPathCount\",\"type\":\"uint256\"}],\"name\":\"setPathCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPathDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pathId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rarity\",\"type\":\"uint256[]\"}],\"name\":\"setPathRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"setPathRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_sections\",\"type\":\"uint256[][]\"}],\"name\":\"setPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"}],\"name\":\"setPathSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"newPathSizes\",\"type\":\"uint32[]\"}],\"name\":\"setPathSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"setSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/RaritySVG.sol\":\"RaritySVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './RandomNumber.sol';\\n\\nabstract contract Asset {\\n    struct PartialStruct {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32[] assets;\\n        string[] names;\\n        uint32[] colours;\\n        bytes mintData;\\n    }\\n\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32[] memory result);\\n\\n    function getDefaultName() internal virtual returns (string memory);\\n\\n    function getNextPath() external view virtual returns (uint32);\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function isValidPath(uint32 pathId) external view virtual returns (bool);\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function setLastAssets(uint32[] memory assets) public virtual;\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (string[] memory results);\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        external\\n        virtual\\n        returns (uint32[] memory assetsId);\\n\\n    function getMintData(\\n        uint32 pathId,\\n        uint32 tokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (bytes memory);\\n\\n    function addAsset(uint256 rarity) public virtual;\\n\\n    function setNextPathId(uint32 pathId) public virtual;\\n\\n    function setLastPathId(uint32 pathId) public virtual;\\n\\n    function getPathSize(uint32 pathId) public view virtual returns (uint32);\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0xf9c45bcff49089b99643efcca4496c08960eecdc04f3b1e91ab7347a01fff87b\",\"license\":\"UNLICENSED\"},\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintObject.sol';\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount, 're-entry');\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, 'not deployer');\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], 'not approved');\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, 'cannot modify deployer');\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiRevoke(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0xd37a41033d6a0329dcdc6da0eccbb7f743c5ab2206cd46d634969987ad0f557a\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintAsset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './Asset.sol';\\nimport './Authentication.sol';\\n\\nabstract contract InfinityMintAsset is Asset, Authentication {\\n    mapping(uint256 => bool) internal disabledPaths; //disabled paths which are not picked\\n    mapping(uint256 => uint256[]) internal pathSections; //what sections are to what path\\n\\n    //user values\\n    InfinityMintValues internal valuesController;\\n\\n    //the token name\\n    string internal tokenName = 'asset';\\n    string public assetsType = 'default'; //the type of assetId is default\\n\\n    //path stuff\\n    uint256 internal pathCount;\\n    uint32[] internal pathSizes; //the amount of points in a path (used in random colour generation with SVG things)\\n    uint256 internal safeDefaultReturnPath; //used in the case we cannot decide what path to randomly select we will return the value of this\\n\\n    uint256 internal assetId; //\\n    uint256[][] internal assetsSections; //the sections to an asset\\n    uint256[] internal assetRarity; //a list of asset rarity\\n    uint32[] internal lastAssets; //the last selection of assets\\n    uint32 internal nextPath = 0; //the next path to be minted\\n    uint32 internal lastPath = 0;\\n\\n    //the names to pick from when generating\\n    string[] public names;\\n\\n    //if all paths are for all sections\\n    bool private flatSections = false;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        assetRarity.push(0); //so assetId start at 1 not zero so zero can be treat as a\\n    }\\n\\n    function setNames(string[] memory newNames) public onlyApproved {\\n        names = newNames;\\n    }\\n\\n    function resetNames() public onlyApproved {\\n        delete names;\\n    }\\n\\n    function resetAssets() public onlyApproved {\\n        delete assetRarity;\\n        delete assetsSections;\\n        assetRarity.push(0);\\n        assetId = 0;\\n        flatSections = false;\\n    }\\n\\n    function resetPaths() public onlyApproved {\\n        delete pathSizes;\\n        pathCount = 0;\\n        safeDefaultReturnPath = 0;\\n    }\\n\\n    function combineNames(string[] memory newNames) public onlyApproved {\\n        require(newNames.length < 100);\\n\\n        for (uint256 i = 0; i < newNames.length; ) {\\n            names.push(newNames[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addName(string memory name) public onlyApproved {\\n        names.push(name);\\n    }\\n\\n    function setNextPathId(uint32 pathId) public virtual override onlyApproved {\\n        nextPath = pathId;\\n    }\\n\\n    function setLastPathId(uint32 pathId) public virtual override onlyApproved {\\n        lastPath = pathId;\\n    }\\n\\n    function getNextPath() external view virtual override returns (uint32) {\\n        return nextPath;\\n    }\\n\\n    function setLastAssets(\\n        uint32[] memory assets\\n    ) public virtual override onlyApproved {\\n        lastAssets = assets;\\n    }\\n\\n    function getPathSections(\\n        uint256 pathId\\n    ) external view virtual returns (uint256[] memory) {\\n        return pathSections[pathId];\\n    }\\n\\n    function getSectionAssets(\\n        uint256 sectionId\\n    ) external view returns (uint256[] memory) {\\n        return assetsSections[sectionId];\\n    }\\n\\n    function setPathSize(uint32 pathId, uint32 pathSize) public onlyApproved {\\n        pathSizes[pathId] = pathSize;\\n    }\\n\\n    function setPathSizes(uint32[] memory newPathSizes) public onlyApproved {\\n        pathSizes = newPathSizes;\\n    }\\n\\n    function getPathSize(uint32 pathId) public view override returns (uint32) {\\n        if (pathId >= pathSizes.length) return 1;\\n\\n        return pathSizes[pathId];\\n    }\\n\\n    function getNextPathId(\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (uint32) {\\n        uint256 result = randomNumberController.getMaxNumber(pathCount);\\n\\n        //path is greather than token Paths\\n        if (result >= pathCount) return uint32(safeDefaultReturnPath);\\n\\n        //count up until a non disabled path is found\\n        while (disabledPaths[result]) {\\n            if (result + 1 >= pathCount) result = 0;\\n            result++;\\n        }\\n\\n        return uint32(result);\\n    }\\n\\n    function getNames(\\n        uint256 nameCount,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (string[] memory results) {\\n        string memory defaultName = getDefaultName();\\n\\n        // matched and incremental use nextPath to get their name\\n        if (\\n            !valuesController.isTrue('matchedMode') &&\\n            !valuesController.isTrue('incrementalMode')\\n        ) {\\n            if (nameCount <= 0 && valuesController.isTrue('mustGenerateName'))\\n                nameCount = 1;\\n\\n            if (nameCount <= 0 || names.length == 0) {\\n                results = new string[](1);\\n                results[0] = defaultName;\\n                return results;\\n            }\\n\\n            results = new string[](nameCount + 1);\\n\\n            for (uint32 i = 0; i < nameCount; ) {\\n                uint256 result = randomNumberController.getMaxNumber(\\n                    names.length\\n                );\\n\\n                if (result >= names.length) result = 0;\\n                results[i] = names[result];\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            results[nameCount] = defaultName;\\n        } else {\\n            results = new string[](2);\\n\\n            if (names.length == 0) results[0] = '';\\n            else if (nextPath < names.length) results[0] = names[nextPath];\\n            else results[0] = names[0];\\n            results[1] = defaultName;\\n        }\\n    }\\n\\n    function getMintData(\\n        uint32,\\n        uint32,\\n        RandomNumber\\n    ) public virtual override returns (bytes memory) {\\n        return '{}'; //returns a blank json array\\n    }\\n\\n    function getDefaultName()\\n        internal\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return tokenName;\\n    }\\n\\n    function isValidPath(uint32 pathId) public view override returns (bool) {\\n        return (pathId >= 0 && pathId < pathCount && !disabledPaths[pathId]);\\n    }\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        setNextPathId(pathId);\\n        setLastAssets(getRandomAsset(pathId, randomNumberController));\\n\\n        return\\n            PartialStruct(\\n                pathId,\\n                getPathSize(pathId),\\n                lastAssets,\\n                getNames(\\n                    randomNumberController.getMaxNumber(\\n                        valuesController.tryGetValue('nameCount')\\n                    ),\\n                    randomNumberController\\n                ),\\n                getColours(pathId, randomNumberController),\\n                getMintData(pathId, currentTokenId, randomNumberController)\\n            );\\n    }\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        return\\n            pickPath(\\n                getNextPathId(randomNumberController),\\n                currentTokenId,\\n                randomNumberController\\n            );\\n    }\\n\\n    function getRandomAsset(\\n        uint32 pathId,\\n        RandomNumber randomNumberController\\n    ) public view virtual override returns (uint32[] memory assetsId) {\\n        if (assetId == 0) {\\n            return assetsId;\\n        }\\n\\n        uint256[] memory sections;\\n        if (flatSections) sections = pathSections[0];\\n        else sections = pathSections[pathId];\\n\\n        //index position of sections\\n        uint256 indexPosition = 0;\\n        //current random number salt\\n        uint256 salt = randomNumberController.salt();\\n\\n        if (sections.length == 0) {\\n            return assetsId;\\n        } else {\\n            assetsId = new uint32[](sections.length);\\n            uint32[] memory selectedPaths;\\n            uint256[] memory section;\\n            for (uint256 i = 0; i < sections.length; ) {\\n                section = assetsSections[sections[i]];\\n\\n                if (section.length == 0) {\\n                    assetsId[indexPosition++] = 0;\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                if (section.length == 1 && assetRarity[section[0]] == 100) {\\n                    assetsId[indexPosition++] = uint32(section[0]);\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                selectedPaths = new uint32[](section.length);\\n                //repeat filling array with found values\\n                uint256 count = 0;\\n\\n                for (uint256 index = 0; index < section.length; ) {\\n                    if (count == selectedPaths.length) break;\\n                    if (section[index] == 0) {\\n                        unchecked {\\n                            ++index;\\n                        }\\n                        continue;\\n                    }\\n\\n                    uint256 rarity = 0;\\n\\n                    if (assetRarity.length > section[index])\\n                        rarity = assetRarity[section[index]];\\n\\n                    if (\\n                        (rarity == 100 ||\\n                            rarity >\\n                            randomNumberController.returnNumber(\\n                                100,\\n                                i +\\n                                    index +\\n                                    rarity +\\n                                    count +\\n                                    salt +\\n                                    indexPosition\\n                            ))\\n                    ) selectedPaths[count++] = uint32(section[index]);\\n\\n                    unchecked {\\n                        ++index;\\n                    }\\n                }\\n\\n                //pick an asset\\n                uint256 result = 0;\\n\\n                if (count <= 1) assetsId[indexPosition++] = selectedPaths[0];\\n                else if (count >= 2) {\\n                    result = randomNumberController.returnNumber(\\n                        count,\\n                        selectedPaths.length + count + indexPosition + salt\\n                    );\\n                    if (result < selectedPaths.length)\\n                        assetsId[indexPosition++] = selectedPaths[result];\\n                    else assetsId[indexPosition++] = 0;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setSectionAssets(\\n        uint32 sectionId,\\n        uint256[] memory _assets\\n    ) public onlyDeployer {\\n        assetsSections[sectionId] = _assets;\\n    }\\n\\n    function pushSectionAssets(uint256[] memory _assets) public onlyDeployer {\\n        assetsSections.push(_assets);\\n    }\\n\\n    function flatPathSections(uint32[] memory pathIds) public onlyDeployer {\\n        pathSections[0] = pathIds;\\n        flatSections = true;\\n    }\\n\\n    function setPathSections(\\n        uint32[] memory pathIds,\\n        uint256[][] memory _sections\\n    ) public onlyDeployer {\\n        require(pathIds.length == _sections.length);\\n\\n        for (uint256 i = 0; i < pathIds.length; i++) {\\n            pathSections[pathIds[i]] = _sections[i];\\n        }\\n    }\\n\\n    function addAssets(uint256[] memory rarities) public onlyDeployer {\\n        for (uint256 i = 0; i < rarities.length; ) {\\n            if (rarities[i] > 100) revert('one of more rarities are above 100');\\n            assetRarity.push(rarities[i]);\\n            //increment asset counter\\n            assetId += 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addAsset(uint256 rarity) public virtual override onlyDeployer {\\n        if (rarity > 100) revert();\\n\\n        //increment asset counter\\n        assetRarity.push(rarity);\\n        assetId += 1;\\n    }\\n\\n    //returns randomised colours for SVG Paths\\n    function getColours(\\n        uint32 pathId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (uint32[] memory result) {\\n        uint32 pathSize = getPathSize(pathId);\\n        uint256 div = valuesController.tryGetValue('colourChunkSize');\\n\\n        if (div <= 0) div = 4;\\n\\n        if (pathSize <= div) {\\n            result = new uint32[](4);\\n            result[0] = uint32(randomNumberController.getMaxNumber(0xFFFFFF));\\n            result[1] = pathSize;\\n            result[2] = uint32(randomNumberController.getMaxNumber(0xFFFFFFFF));\\n            result[3] = uint32(valuesController.tryGetValue('extraColours'));\\n            return result;\\n        }\\n\\n        uint32 groups = uint32(1 + (pathSize / div));\\n        uint32 size = (groups * 2);\\n        uint32 tempPathSize = (pathSize);\\n        uint256 count = 0;\\n        result = new uint32[](size + 2);\\n        for (uint256 i = 0; i < size; ) {\\n            if (i == 0 || i % 2 == 0)\\n                result[i] = uint32(\\n                    randomNumberController.getMaxNumber(0xFFFFFF)\\n                );\\n            else {\\n                uint256 tempResult = tempPathSize - (div * count++);\\n                result[i] = uint32(tempResult > div ? div : tempResult);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        result[result.length - 2] = uint32(\\n            randomNumberController.getMaxNumber(0xFFFFFFFF)\\n        );\\n        result[result.length - 1] = uint32(\\n            valuesController.tryGetValue('extraColours')\\n        );\\n    }\\n\\n    function setPathDisabled(uint32 pathId, bool value) public onlyApproved {\\n        //if path zero is suddenly disabled, we need a new safe path to return\\n        if (pathId == safeDefaultReturnPath && value) {\\n            uint256 val = (safeDefaultReturnPath);\\n            while (disabledPaths[val]) {\\n                if (val >= pathCount) val = safeDefaultReturnPath;\\n                val++;\\n            }\\n            safeDefaultReturnPath = val;\\n        }\\n\\n        //if we enable zero again then its safe to return 0\\n        if (pathId <= safeDefaultReturnPath && value)\\n            safeDefaultReturnPath = pathId;\\n\\n        disabledPaths[pathId] = value;\\n    }\\n\\n    function setPathCount(uint256 newPathCount) public onlyApproved {\\n        pathCount = newPathCount;\\n    }\\n}\\n\",\"keccak256\":\"0x9f46a005ad4e8f754191bf3cd1199f892681cff6c50e61c2fb2a8f3ede9eec67\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport './InfinityMintUtil.sol';\\nimport './InfinityMintValues.sol';\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x0a87425c22c2712174729d193a7148fce4bd85244e381094211bf2b556894e07\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(\\n        uint256 _i\\n    ) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return string.concat(directory, file, extension);\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2) external pure returns (bool) {\\n    if (s1.length != s2.length) return false;\\n    for (uint256 i = 0; i < s1.length; i++) {\\n        if (s1[i] != s2[i]) return false;\\n    }\\n    return true;\\n}\\n\\n}\\n\",\"keccak256\":\"0xd256bbb4e2a9534e9a21ba4ae8bbf755c254c7d2ba5bd65e099e27f27277e3bc\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert('Invalid Value');\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xfc6def9724b4ef9aa3ace6bafaa9fc232c65788adb1349c9ce5f1f9681c3b078\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintValues.sol';\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author 0xTinman.eth\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue('randomessFactor');\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue('maxRandomNumber'), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x3902fef7c566f30b6c918fb1c69aeac606f44c065e86b3deba350ec6aea2c253\",\"license\":\"UNLICENSED\"},\"contracts/assets/RaritySVG.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport '../InfinityMintAsset.sol';\\n\\ncontract RaritySVG is InfinityMintAsset {\\n    uint256[] internal pathRarity;\\n\\n    constructor(string memory _tokenName, address valuesContract)\\n        InfinityMintAsset(valuesContract)\\n    {\\n        tokenName = _tokenName;\\n        assetsType = 'svg'; //returns scalable vector asset\\n    }\\n\\n    //save the last path so we may get its name later\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (uint32)\\n    {\\n        if (pathCount == 1 && disabledPaths[safeDefaultReturnPath])\\n            revert('No valid paths');\\n\\n        uint256[] memory randNumbers = new uint256[](pathCount);\\n        uint32 pathId = uint32(safeDefaultReturnPath);\\n        uint256 count = 0;\\n\\n        //count how many rarity values are greather\\n        for (uint256 i = 0; i < pathCount; ) {\\n            randNumbers[i] = randomNumberController.getMaxNumber(100);\\n            if (pathRarity[i] > randNumbers[i]) count++;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        //construct array with length of count\\n        uint256[] memory selectedPaths = new uint256[](count);\\n        count = 0; //reset count to zero to use as index position\\n        for (uint256 i = 0; i < pathCount; ) {\\n            //populate array of selected paths\\n            if (pathRarity[i] > randNumbers[i]) selectedPaths[count++] = i;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (valuesController.isTrue('randomRarity')) {\\n            //pick an asset\\n            uint256 result = randomNumberController.getMaxNumber(\\n                selectedPaths.length\\n            );\\n            if (result < selectedPaths.length)\\n                pathId = uint32(selectedPaths[result]);\\n            else {\\n                //pick an asset\\n                uint256 randomAssetId = randomNumberController.getMaxNumber(\\n                    pathCount\\n                );\\n\\n                if (disabledPaths[randomAssetId])\\n                    pathId = uint32(safeDefaultReturnPath);\\n                else pathId = uint32(randomAssetId);\\n            }\\n        } else {\\n            uint256 a = 0;\\n            uint256 b = 0;\\n            if (valuesController.isTrue('lowestRarity')) {\\n                for (uint256 i = 0; i < selectedPaths.length; ) {\\n                    if (a == 0) {\\n                        a = pathRarity[selectedPaths[i]];\\n                        b = selectedPaths[i];\\n                    } else if (pathRarity[i] < a) {\\n                        a = pathRarity[selectedPaths[i]];\\n                        b = selectedPaths[i];\\n                    }\\n\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n\\n                if (b < pathCount) pathId = uint32(b);\\n                else pathId = 0;\\n            } else {\\n                //default to least rare path selection\\n                for (uint256 i = 0; i < selectedPaths.length; ) {\\n                    if (a < pathRarity[selectedPaths[i]]) {\\n                        a = pathRarity[selectedPaths[i]];\\n                        b = selectedPaths[i];\\n                    }\\n\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n\\n                if (b < pathCount) pathId = uint32(b);\\n                else pathId = uint32(safeDefaultReturnPath);\\n            }\\n        }\\n\\n        //attempts to stop duplicate mints of the same PathId (does not work with pathId 0)\\n        if (\\n            valuesController.isTrue('stopDuplicateMint') &&\\n            pathId != 0 &&\\n            lastPath != 0 &&\\n            pathId == lastPath\\n        ) {\\n            uint256 _lastPath = lastPath;\\n            //if it is greater than or equal to two then we have an attempt\\n            if (selectedPaths.length >= 2) {\\n                uint32 attempts = 3; //try 3 times\\n                while (pathId == _lastPath && attempts-- >= 0) {\\n                    //pick an base from the select paths\\n                    uint256 result = randomNumberController.getMaxNumber(\\n                        selectedPaths.length\\n                    );\\n\\n                    //if it is less than\\n                    if (result < selectedPaths.length)\\n                        pathId = uint32(selectedPaths[result]); //next path is this result\\n                    else pathId = uint32(selectedPaths[0]); //just use the first value\\n                }\\n                //just set it to zero\\n                if (attempts <= 0) pathId = uint32(safeDefaultReturnPath);\\n            } else {\\n                if (pathId > 1) pathId = pathId - 1;\\n                else if (pathId + 1 < pathCount) pathId = pathId + 1;\\n            }\\n        }\\n\\n        lastPath = pathId;\\n        return pathId;\\n    }\\n\\n    function pushPathRarities(uint256[] memory rarity) public onlyApproved {\\n        for (uint256 i = 0; i < rarity.length; ) {\\n            pathRarity.push(rarity[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setPathRarities(uint256[] memory pathId, uint256[] memory rarity)\\n        public\\n        onlyApproved\\n    {\\n        require(pathId.length == rarity.length);\\n\\n        for (uint256 i = 0; i < pathId.length; ) {\\n            pathRarity[pathId[i]] = rarity[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setPathRarity(uint256 pathId, uint256 rarity) public onlyApproved {\\n        require(rarity < 100); //rarity is only out of 100%\\n        pathRarity[pathId] = rarity;\\n    }\\n}\\n\",\"keccak256\":\"0xbd7215a634bfade5b93c5cf3a061f7e8fd1d859eb953a39778c6549511431801\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264185cdcd95d60da1b60a090815262000028916006919062000167565b5060408051808201909152600780825266191959985d5b1d60ca1b602090920191825262000057918162000167565b50600f80546001600160401b03191690556011805460ff191690553480156200007f57600080fd5b50604051620046bf380380620046bf833981016040819052620000a29162000240565b60008054336001600160a01b03199182168117835582526002602090815260408320805460ff19166001908117909155838155600580549093166001600160a01b03861617909255600d8054928301815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910191909155825162000131916006919085019062000167565b506040805180820190915260038082526273766760e81b60209092019182526200015e9160079162000167565b5050506200036e565b828054620001759062000331565b90600052602060002090601f016020900481019282620001995760008555620001e4565b82601f10620001b457805160ff1916838001178555620001e4565b82800160010185558215620001e4579182015b82811115620001e4578251825591602001919060010190620001c7565b50620001f2929150620001f6565b5090565b5b80821115620001f25760008155600101620001f7565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b82516001600160401b03808211156200026c57600080fd5b818501915085601f8301126200028157600080fd5b8151818111156200029657620002966200020d565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c16200020d565b81604052828152602093508884848701011115620002de57600080fd5b600091505b82821015620003025784820184015181830185015290830190620002e3565b82821115620003145760008484830101525b95506200032691505085820162000223565b925050509250929050565b600181811c908216806200034657607f821691505b602082108114156200036857634e487b7160e01b600052602260045260246000fd5b50919050565b614341806200037e6000396000f3fe608060405234801561001057600080fd5b50600436106102095760003560e01c80638c9fcab9116101215780638c9fcab9146103e65780638e6e826d146103f9578063a57b3b4514610419578063a85f32981461042c578063ad94705b1461043f578063ae2c7cea14610452578063b895bcb714610465578063bfb05d0314610478578063c40f4a251461048b578063d15d41501461049e578063d5f39488146104b1578063d8b964e6146104dc578063d935232c146104ff578063dccd935c14610512578063e6ef89551461051a578063e7214f4f1461052d578063e96aeef314610540578063eb2c2da314610553578063f2fde38b14610566578063f60a743614610579578063fe684c0e1461058c578063ff220d6d1461059f57600080fd5b80630ae611731461020e5780630b71d2561461022357806310a8c7a91461023657806311456b471461024957806331ed86d21461025c5780633406bfac1461026f57806335697ba7146102775780633840c21a146102a05780633982e0c4146102b3578063433ee8cd146102c657806343bebe4e146102e6578063453dc9331461030e5780634622ab031461032157806346e4e7c9146103415780634c6fe6a21461034f578063593c7b271461036f5780637730f4fa146103825780637ba8dcd6146103a55780637bd6ec4a146103ad5780637cf8031e146103c05780638a25ad24146103d3575b600080fd5b61022161021c3660046138b2565b6105a7565b005b610221610231366004613915565b61066d565b610221610244366004613943565b6106f7565b610221610257366004613a4b565b61078e565b61022161026a366004613943565b610815565b6102216108a8565b61028a610285366004613915565b610947565b6040516102979190613a87565b60405180910390f35b6102216102ae366004613acb565b6109a9565b6102216102c1366004613ba2565b610a00565b6102d96102d4366004613bd9565b610ae9565b6040516102979190613ce8565b6102f96102f4366004613d84565b610b0d565b60405163ffffffff9091168152602001610297565b61022161031c366004613acb565b610b6d565b61033461032f366004613915565b610c1a565b6040516102979190613d9f565b600f5463ffffffff166102f9565b61036261035d366004613db2565b610cc6565b6040516102979190613dd7565b61022161037d366004613e4c565b611306565b610395610390366004613d84565b61135d565b6040519015158152602001610297565b61033461138e565b6102d96103bb366004613e80565b61139b565b6102216103ce366004613ec7565b61158f565b6102216103e1366004613d84565b6115fc565b61028a6103f4366004613915565b611666565b61040c610407366004613bd9565b6116d9565b6040516102979190613efb565b610221610427366004613f0e565b611d5b565b61022161043a366004613915565b611df0565b61022161044d366004613ec7565b611e39565b610221610460366004613f41565b611ec8565b6102f9610473366004613f63565b611f3d565b610221610486366004613f87565b61284d565b610221610499366004613e4c565b6128ae565b6103956104ac366004613f63565b612925565b6000546104c4906001600160a01b031681565b6040516001600160a01b039091168152602001610297565b6103956104ea366004613f63565b60026020526000908152604090205460ff1681565b61022161050d366004613d84565b61295c565b6102216129bc565b610221610528366004613fca565b612a0e565b61022161053b366004613e4c565b612ac4565b61033461054e366004613e80565b612b1b565b61040c610561366004613bd9565b612b3b565b610221610574366004613f63565b613123565b610221610587366004613ec7565b6131c3565b61022161059a36600461409e565b6132c1565b6102216133a3565b6000546001600160a01b03163314806105cf57503360009081526002602052604090205460ff165b6105f45760405162461bcd60e51b81526004016105eb906140bc565b60405180910390fd5b805182511461060257600080fd5b60005b825181101561066857818181518110610620576106206140e2565b6020026020010151601284838151811061063c5761063c6140e2565b602002602001015181548110610654576106546140e2565b600091825260209091200155600101610605565b505050565b6000546001600160a01b031633146106975760405162461bcd60e51b81526004016105eb906140f8565b60648111156106a557600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b8054919290916106ef908490614134565b909155505050565b6000546001600160a01b031633146107215760405162461bcd60e51b81526004016105eb906140f8565b805161072c57600080fd5b60005b815181101561078a57600160026000848481518110610750576107506140e2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161072f565b5050565b6000546001600160a01b03163314806107b657503360009081526002602052604090205460ff165b6107d25760405162461bcd60e51b81526004016105eb906140bc565b60108054600181018255600091909152815161078a917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190613491565b6000546001600160a01b0316331461083f5760405162461bcd60e51b81526004016105eb906140f8565b805161084a57600080fd5b60005b815181101561078a5760006002600084848151811061086e5761086e6140e2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161084d565b6000546001600160a01b03163314806108d057503360009081526002602052604090205460ff165b6108ec5760405162461bcd60e51b81526004016105eb906140bc565b6108f8600d6000613515565b610904600c6000613536565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b60008181526004602090815260409182902080548351818402810184019094528084526060939283018282801561099d57602002820191906000526020600020905b815481526020019060010190808311610989575b50505050509050919050565b6000546001600160a01b03163314806109d157503360009081526002602052604090205460ff165b6109ed5760405162461bcd60e51b81526004016105eb906140bc565b805161078a906010906020840190613554565b6000546001600160a01b0316331480610a2857503360009081526002602052604090205460ff165b610a445760405162461bcd60e51b81526004016105eb906140bc565b600a548263ffffffff16148015610a585750805b15610a9c57600a545b60008181526003602052604090205460ff1615610a98576008548110610a865750600a545b80610a908161414c565b915050610a61565b600a555b600a548263ffffffff1611158015610ab15750805b15610ac15763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b610af16135ad565b610b04610afd83611f3d565b848461139b565b90505b92915050565b60095460009063ffffffff831610610b2757506001919050565b60098263ffffffff1681548110610b4057610b406140e2565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b0316331480610b9557503360009081526002602052604090205460ff165b610bb15760405162461bcd60e51b81526004016105eb906140bc565b6064815110610bbf57600080fd5b60005b815181101561078a576010828281518110610bdf57610bdf6140e2565b60209081029190910181015182546001810184556000938452928290208151610c119491909101929190910190613491565b50600101610bc2565b60108181548110610c2a57600080fd5b906000526020600020016000915090508054610c4590614167565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7190614167565b8015610cbe5780601f10610c9357610100808354040283529160200191610cbe565b820191906000526020600020905b815481529060010190602001808311610ca157829003601f168201915b505050505081565b60606000610cd26133ff565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a91906141a2565b158015610def57506005546040516206259160e71b815260206004820152600f60248201526e696e6372656d656e74616c4d6f646560881b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906141a2565b155b156110dc5783158015610e8957506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906141a2565b15610e9357600193505b831580610ea05750601054155b15610ef65760408051600180825281830190925290816020015b6060815260200190600190039081610eba5790505091508082600081518110610ee557610ee56140e2565b602002602001018190525050610b07565b610f01846001614134565b6001600160401b03811115610f1857610f186137de565b604051908082528060200260200182016040528015610f4b57816020015b6060815260200190600190039081610f365790505b50915060005b848163ffffffff1610156110b85760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610f939160040190815260200190565b6020604051808303816000875af1158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906141bf565b6010549091508110610fe6575060005b60108181548110610ff957610ff96140e2565b90600052602060002001805461100e90614167565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90614167565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b5050505050848363ffffffff16815181106110a4576110a46140e2565b602090810291909101015250600101610f51565b50808285815181106110cc576110cc6140e2565b60200260200101819052506112ff565b6040805160028082526060820190925290816020015b60608152602001906001900390816110f2575050601054909250611143576040518060200160405280600081525082600081518110611133576111336140e2565b60200260200101819052506112df565b601054600f5463ffffffff16101561121957600f5460108054909163ffffffff16908110611173576111736140e2565b90600052602060002001805461118890614167565b80601f01602080910402602001604051908101604052809291908181526020018280546111b490614167565b80156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b505050505082600081518110611133576111336140e2565b601060008154811061122d5761122d6140e2565b90600052602060002001805461124290614167565b80601f016020809104026020016040519081016040528092919081815260200182805461126e90614167565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050826000815181106112d3576112d36140e2565b60200260200101819052505b80826001815181106112f3576112f36140e2565b60200260200101819052505b5092915050565b6000546001600160a01b031633148061132e57503360009081526002602052604090205460ff165b61134a5760405162461bcd60e51b81526004016105eb906140bc565b805161078a9060099060208401906135ef565b60006008548263ffffffff16108015610b0757505063ffffffff1660009081526003602052604090205460ff161590565b60078054610c4590614167565b6113a36135ad565b6113ac8461295c565b6113b961053b85846116d9565b6040518060c001604052808563ffffffff1681526020016113d986610b0d565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561145c57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161141f5790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611566916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff91906141bf565b6040518263ffffffff1660e01b815260040161151d91815260200190565b6020604051808303816000875af115801561153c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156091906141bf565b85610cc6565b81526020016115758685612b3b565b8152602001611585868686612b1b565b9052949350505050565b6000546001600160a01b031633146115b95760405162461bcd60e51b81526004016105eb906140f8565b600c8054600181018255600091909152815161078a917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190613699565b6000546001600160a01b031633148061162457503360009081526002602052604090205460ff165b6116405760405162461bcd60e51b81526004016105eb906140bc565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c828154811061167b5761167b6140e2565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561099d57602002820191906000526020600020908154815260200190600101908083116109895750505050509050919050565b6060600b54600014156116eb57610b07565b60115460609060ff16156117745760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561176857602002820191906000526020600020905b815481526020019060010190808311611754575b505050505090506117d7565b63ffffffff8416600090815260046020908152604091829020805483518184028101840190945280845290918301828280156117cf57602002820191906000526020600020905b8154815260200190600101908083116117bb575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906141bf565b905082516000141561185057505050610b07565b82516001600160401b03811115611869576118696137de565b604051908082528060200260200182016040528015611892578160200160208202803683370190505b50935060608060005b8551811015611d4f57600c8682815181106118b8576118b86140e2565b6020026020010151815481106118d0576118d06140e2565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561192457602002820191906000526020600020905b815481526020019060010190808311611910575b5050505050915081516000141561197157600087866119428161414c565b975081518110611954576119546140e2565b63ffffffff9092166020928302919091019091015260010161189b565b815160011480156119b95750600d82600081518110611992576119926140e2565b6020026020010151815481106119aa576119aa6140e2565b90600052602060002001546064145b156119e557816000815181106119d1576119d16140e2565b60200260200101518786806119429061414c565b81516001600160401b038111156119fe576119fe6137de565b604051908082528060200260200182016040528015611a27578160200160208202803683370190505b5092506000805b8351811015611beb578451821415611a4557611beb565b838181518110611a5757611a576140e2565b602002602001015160001415611a6f57600101611a2e565b6000848281518110611a8357611a836140e2565b6020026020010151600d805490501115611ad157600d858381518110611aab57611aab6140e2565b602002602001015181548110611ac357611ac36140e2565b906000526020600020015490505b8060641480611b8a57506001600160a01b038b16634b0c7aad60648a8a8786611afa898c614134565b611b049190614134565b611b0e9190614134565b611b189190614134565b611b229190614134565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8791906141bf565b81115b15611be257848281518110611ba157611ba16140e2565b6020026020010151868480611bb59061414c565b955081518110611bc757611bc76140e2565b602002602001019063ffffffff16908163ffffffff16815250505b50600101611a2e565b50600060018211611c4e5784600081518110611c0957611c096140e2565b6020026020010151898880611c1d9061414c565b995081518110611c2f57611c2f6140e2565b602002602001019063ffffffff16908163ffffffff1681525050611d45565b60028210611d4557896001600160a01b0316634b0c7aad83888a868a51611c759190614134565b611c7f9190614134565b611c899190614134565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cee91906141bf565b90508451811015611d0b57848181518110611c0957611c096140e2565b60008988611d188161414c565b995081518110611d2a57611d2a6140e2565b602002602001019063ffffffff16908163ffffffff16815250505b505060010161189b565b50505050505092915050565b6000546001600160a01b0316331480611d8357503360009081526002602052604090205460ff165b611d9f5760405162461bcd60e51b81526004016105eb906140bc565b8060098363ffffffff1681548110611db957611db96140e2565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611e1857503360009081526002602052604090205460ff165b611e345760405162461bcd60e51b81526004016105eb906140bc565b600855565b6000546001600160a01b0316331480611e6157503360009081526002602052604090205460ff165b611e7d5760405162461bcd60e51b81526004016105eb906140bc565b60005b815181101561078a576012828281518110611e9d57611e9d6140e2565b6020908102919091018101518254600181810185556000948552929093209092019190915501611e80565b6000546001600160a01b0316331480611ef057503360009081526002602052604090205460ff165b611f0c5760405162461bcd60e51b81526004016105eb906140bc565b60648110611f1957600080fd5b8060128381548110611f2d57611f2d6140e2565b6000918252602090912001555050565b60006008546001148015611f625750600a5460009081526003602052604090205460ff165b15611fa05760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b60448201526064016105eb565b60006008546001600160401b03811115611fbc57611fbc6137de565b604051908082528060200260200182016040528015611fe5578160200160208202803683370190505b50600a549091506000805b6008548110156120d75760405163a0d0ca0f60e01b8152606460048201526001600160a01b0387169063a0d0ca0f906024016020604051808303816000875af1158015612041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206591906141bf565b848281518110612077576120776140e2565b602002602001018181525050838181518110612095576120956140e2565b6020026020010151601282815481106120b0576120b06140e2565b906000526020600020015411156120cf57816120cb8161414c565b9250505b600101611ff0565b506000816001600160401b038111156120f2576120f26137de565b60405190808252806020026020018201604052801561211b578160200160208202803683370190505b5090506000915060005b6008548110156121a057848181518110612141576121416140e2565b60200260200101516012828154811061215c5761215c6140e2565b90600052602060002001541115612198578082846121798161414c565b95508151811061218b5761218b6140e2565b6020026020010181815250505b600101612125565b506005546040516206259160e71b815260206004820152600c60248201526b72616e646f6d52617269747960a01b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222991906141a2565b1561237757805160405163a0d0ca0f60e01b81526000916001600160a01b0389169163a0d0ca0f916122619160040190815260200190565b6020604051808303816000875af1158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a491906141bf565b905081518110156122d0578181815181106122c1576122c16140e2565b60200260200101519350612371565b60085460405163a0d0ca0f60e01b81526000916001600160a01b038a169163a0d0ca0f916123049160040190815260200190565b6020604051808303816000875af1158015612323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234791906141bf565b60008181526003602052604090205490915060ff161561236b57600a54945061236f565b8094505b505b506125d7565b6005546040516206259160e71b815260206004820152600c60248201526b6c6f7765737452617269747960a01b604482015260009182916001600160a01b0390911690630312c88090606401602060405180830381865afa1580156123e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240491906141a2565b156125135760005b83518110156124f7578261247457601284828151811061242e5761242e6140e2565b602002602001015181548110612446576124466140e2565b90600052602060002001549250838181518110612465576124656140e2565b602002602001015191506124ef565b8260128281548110612488576124886140e2565b906000526020600020015410156124ef5760128482815181106124ad576124ad6140e2565b6020026020010151815481106124c5576124c56140e2565b906000526020600020015492508381815181106124e4576124e46140e2565b602002602001015191505b60010161240c565b5060085481101561250a578094506125d4565b600094506125d4565b60005b83518110156125bb576012848281518110612533576125336140e2565b60200260200101518154811061254b5761254b6140e2565b90600052602060002001548310156125b3576012848281518110612571576125716140e2565b602002602001015181548110612589576125896140e2565b906000526020600020015492508381815181106125a8576125a86140e2565b602002602001015191505b600101612516565b506008548110156125ce578094506125d4565b600a5494505b50505b6005546040516206259160e71b81526020600482015260116024820152701cdd1bdc111d5c1b1a58d85d19535a5b9d607a1b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266491906141a2565b8015612675575063ffffffff831615155b801561268f5750600f54600160201b900463ffffffff1615155b80156126ac5750600f5463ffffffff848116600160201b90920416145b1561282657600f548151600160201b90910463ffffffff16906002116127db5760035b818563ffffffff161480156126f657506000816126eb816141d8565b925063ffffffff1610155b156127c157825160405163a0d0ca0f60e01b81526000916001600160a01b038b169163a0d0ca0f9161272e9160040190815260200190565b6020604051808303816000875af115801561274d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277191906141bf565b9050835181101561279d5783818151811061278e5761278e6140e2565b602002602001015195506127bb565b836000815181106127b0576127b06140e2565b602002602001015195505b506126cf565b60008163ffffffff16116127d557600a5494505b50612824565b60018463ffffffff1611156127fc576127f56001856141f8565b9350612824565b60085461280a85600161421d565b63ffffffff1610156128245761282184600161421d565b93505b505b5050600f805463ffffffff60201b1916600160201b63ffffffff8416021790559392505050565b6000546001600160a01b031633146128775760405162461bcd60e51b81526004016105eb906140f8565b80600c8363ffffffff1681548110612891576128916140e2565b906000526020600020019080519060200190610668929190613699565b6000546001600160a01b031633146128d85760405162461bcd60e51b81526004016105eb906140f8565b60008052600460209081528151612914917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec91908401906136d3565b50506011805460ff19166001179055565b600080546001600160a01b0383811691161480610b075750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b031633148061298457503360009081526002602052604090205460ff165b6129a05760405162461bcd60e51b81526004016105eb906140bc565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b03163314806129e457503360009081526002602052604090205460ff165b612a005760405162461bcd60e51b81526004016105eb906140bc565b612a0c60106000613716565b565b6000546001600160a01b03163314612a385760405162461bcd60e51b81526004016105eb906140f8565b8051825114612a4657600080fd5b60005b825181101561066857818181518110612a6457612a646140e2565b602002602001015160046000858481518110612a8257612a826140e2565b602002602001015163ffffffff1681526020019081526020016000209080519060200190612ab1929190613699565b5080612abc8161414c565b915050612a49565b6000546001600160a01b0316331480612aec57503360009081526002602052604090205460ff165b612b085760405162461bcd60e51b81526004016105eb906140bc565b805161078a90600e9060208401906135ef565b6040805180820190915260028152617b7d60f01b60208201529392505050565b60606000612b4884610b0d565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa158015612bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bda91906141bf565b905060008111612be8575060045b808263ffffffff1611612e0f5760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8491906141bf565b83600081518110612c9757612c976140e2565b602002602001019063ffffffff16908163ffffffff16815250508183600181518110612cc557612cc56140e2565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4491906141bf565b83600281518110612d5757612d576140e2565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac990612d9a90600401614245565b602060405180830381865afa158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb91906141bf565b83600381518110612dee57612dee6140e2565b602002602001019063ffffffff16908163ffffffff16815250505050610b07565b6000612e218263ffffffff8516614281565b612e2c906001614134565b90506000612e3b826002614295565b9050836000612e4b83600261421d565b63ffffffff166001600160401b03811115612e6857612e686137de565b604051908082528060200260200182016040528015612e91578160200160208202803683370190505b50965060005b8363ffffffff16811015612fcc57801580612eba5750612eb86002826142c1565b155b15612f5d5760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2c91906141bf565b888281518110612f3e57612f3e6140e2565b602002602001019063ffffffff16908163ffffffff1681525050612fc4565b600082612f698161414c565b9350612f7590886142d5565b612f859063ffffffff86166142f4565b9050868111612f945780612f96565b865b898381518110612fa857612fa86140e2565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612e97565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b91906141bf565b876002895161304a91906142f4565b8151811061305a5761305a6140e2565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061309d90600401614245565b602060405180830381865afa1580156130ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130de91906141bf565b87600189516130ed91906142f4565b815181106130fd576130fd6140e2565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b0316331461314d5760405162461bcd60e51b81526004016105eb906140f8565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b031633146131ed5760405162461bcd60e51b81526004016105eb906140f8565b60005b815181101561078a57606482828151811061320d5761320d6140e2565b6020026020010151111561326e5760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b60648201526084016105eb565b600d828281518110613282576132826140e2565b60209081029190910181015182546001818101855560009485529284200155600b8054919290916132b4908490614134565b90915550506001016131f0565b6000546001600160a01b031633146132eb5760405162461bcd60e51b81526004016105eb906140f8565b6000546001600160a01b03838116911614156133425760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b60448201526064016105eb565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b03163314806133cb57503360009081526002602052604090205460ff165b6133e75760405162461bcd60e51b81526004016105eb906140bc565b6133f360096000613734565b60006008819055600a55565b60606006805461340e90614167565b80601f016020809104026020016040519081016040528092919081815260200182805461343a90614167565b80156134875780601f1061345c57610100808354040283529160200191613487565b820191906000526020600020905b81548152906001019060200180831161346a57829003601f168201915b5050505050905090565b82805461349d90614167565b90600052602060002090601f0160209004810192826134bf5760008555613505565b82601f106134d857805160ff1916838001178555613505565b82800160010185558215613505579182015b828111156135055782518255916020019190600101906134ea565b50613511929150613755565b5090565b50805460008255906000526020600020908101906135339190613755565b50565b5080546000825590600052602060002090810190613533919061376a565b8280548282559060005260206000209081019282156135a1579160200282015b828111156135a15782518051613591918491602090910190613491565b5091602001919060010190613574565b50613511929150613787565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b828054828255906000526020600020906007016008900481019282156135055791602002820160005b8382111561365c57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613618565b801561368c5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261365c565b5050613511929150613755565b82805482825590600052602060002090810192821561350557916020028201828111156135055782518255916020019190600101906134ea565b828054828255906000526020600020908101928215613505579160200282015b82811115613505578251829063ffffffff169055916020019190600101906136f3565b50805460008255906000526020600020908101906135339190613787565b50805460008255600701600890049060005260206000209081019061353391905b5b808211156135115760008155600101613756565b8082111561351157600061377e8282613515565b5060010161376a565b8082111561351157600061379b82826137a4565b50600101613787565b5080546137b090614167565b6000825580601f106137c0575050565b601f0160209004906000526020600020908101906135339190613755565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561381c5761381c6137de565b604052919050565b60006001600160401b0382111561383d5761383d6137de565b5060051b60200190565b600082601f83011261385857600080fd5b8135602061386d61386883613824565b6137f4565b82815260059290921b8401810191818101908684111561388c57600080fd5b8286015b848110156138a75780358352918301918301613890565b509695505050505050565b600080604083850312156138c557600080fd5b82356001600160401b03808211156138dc57600080fd5b6138e886838701613847565b935060208501359150808211156138fe57600080fd5b5061390b85828601613847565b9150509250929050565b60006020828403121561392757600080fd5b5035919050565b6001600160a01b038116811461353357600080fd5b6000602080838503121561395657600080fd5b82356001600160401b0381111561396c57600080fd5b8301601f8101851361397d57600080fd5b803561398b61386882613824565b81815260059190911b820183019083810190878311156139aa57600080fd5b928401925b828410156139d15783356139c28161392e565b825292840192908401906139af565b979650505050505050565b600082601f8301126139ed57600080fd5b81356001600160401b03811115613a0657613a066137de565b613a19601f8201601f19166020016137f4565b818152846020838601011115613a2e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613a5d57600080fd5b81356001600160401b03811115613a7357600080fd5b613a7f848285016139dc565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613abf57835183529284019291840191600101613aa3565b50909695505050505050565b60006020808385031215613ade57600080fd5b82356001600160401b0380821115613af557600080fd5b818501915085601f830112613b0957600080fd5b8135613b1761386882613824565b81815260059190911b83018401908481019088831115613b3657600080fd5b8585015b83811015613b6e57803585811115613b525760008081fd5b613b608b89838a01016139dc565b845250918601918601613b3a565b5098975050505050505050565b803563ffffffff81168114613b8f57600080fd5b919050565b801515811461353357600080fd5b60008060408385031215613bb557600080fd5b613bbe83613b7b565b91506020830135613bce81613b94565b809150509250929050565b60008060408385031215613bec57600080fd5b613bf583613b7b565b91506020830135613bce8161392e565b600081518084526020808501945080840160005b83811015613c3b57815163ffffffff1687529582019590820190600101613c19565b509495945050505050565b6000815180845260005b81811015613c6c57602081850181015186830182015201613c50565b81811115613c7e576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015613cdb578284038952613cc9848351613c46565b98850198935090840190600101613cb1565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c06060840152613d2260e0840182613c05565b90506060840151601f1980858403016080860152613d408383613c93565b925060808601519150808584030160a0860152613d5d8383613c05565b925060a08601519150808584030160c086015250613d7b8282613c46565b95945050505050565b600060208284031215613d9657600080fd5b610b0482613b7b565b602081526000610b046020830184613c46565b60008060408385031215613dc557600080fd5b823591506020830135613bce8161392e565b602081526000610b046020830184613c93565b600082601f830112613dfb57600080fd5b81356020613e0b61386883613824565b82815260059290921b84018101918181019086841115613e2a57600080fd5b8286015b848110156138a757613e3f81613b7b565b8352918301918301613e2e565b600060208284031215613e5e57600080fd5b81356001600160401b03811115613e7457600080fd5b613a7f84828501613dea565b600080600060608486031215613e9557600080fd5b613e9e84613b7b565b9250613eac60208501613b7b565b91506040840135613ebc8161392e565b809150509250925092565b600060208284031215613ed957600080fd5b81356001600160401b03811115613eef57600080fd5b613a7f84828501613847565b602081526000610b046020830184613c05565b60008060408385031215613f2157600080fd5b613f2a83613b7b565b9150613f3860208401613b7b565b90509250929050565b60008060408385031215613f5457600080fd5b50508035926020909101359150565b600060208284031215613f7557600080fd5b8135613f808161392e565b9392505050565b60008060408385031215613f9a57600080fd5b613fa383613b7b565b915060208301356001600160401b03811115613fbe57600080fd5b61390b85828601613847565b60008060408385031215613fdd57600080fd5b82356001600160401b0380821115613ff457600080fd5b61400086838701613dea565b935060209150818501358181111561401757600080fd5b8501601f8101871361402857600080fd5b803561403661386882613824565b81815260059190911b8201840190848101908983111561405557600080fd5b8584015b8381101561408d578035868111156140715760008081fd5b61407f8c8983890101613847565b845250918601918601614059565b508096505050505050509250929050565b600080604083850312156140b157600080fd5b8235613bbe8161392e565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156141475761414761411e565b500190565b60006000198214156141605761416061411e565b5060010190565b600181811c9082168061417b57607f821691505b6020821081141561419c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156141b457600080fd5b8151613f8081613b94565b6000602082840312156141d157600080fd5b5051919050565b600063ffffffff8216806141ee576141ee61411e565b6000190192915050565b600063ffffffff838116908316818110156142155761421561411e565b039392505050565b600063ffffffff80831681851680830382111561423c5761423c61411e565b01949350505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826142905761429061426b565b500490565b600063ffffffff808316818516818304811182151516156142b8576142b861411e565b02949350505050565b6000826142d0576142d061426b565b500690565b60008160001904831182151516156142ef576142ef61411e565b500290565b6000828210156143065761430661411e565b50039056fea26469706673582212209519c09b417544950e1e451fae0bfaa12bf95f01a3b4d70cf0d1fa4f1b737cbf64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102095760003560e01c80638c9fcab9116101215780638c9fcab9146103e65780638e6e826d146103f9578063a57b3b4514610419578063a85f32981461042c578063ad94705b1461043f578063ae2c7cea14610452578063b895bcb714610465578063bfb05d0314610478578063c40f4a251461048b578063d15d41501461049e578063d5f39488146104b1578063d8b964e6146104dc578063d935232c146104ff578063dccd935c14610512578063e6ef89551461051a578063e7214f4f1461052d578063e96aeef314610540578063eb2c2da314610553578063f2fde38b14610566578063f60a743614610579578063fe684c0e1461058c578063ff220d6d1461059f57600080fd5b80630ae611731461020e5780630b71d2561461022357806310a8c7a91461023657806311456b471461024957806331ed86d21461025c5780633406bfac1461026f57806335697ba7146102775780633840c21a146102a05780633982e0c4146102b3578063433ee8cd146102c657806343bebe4e146102e6578063453dc9331461030e5780634622ab031461032157806346e4e7c9146103415780634c6fe6a21461034f578063593c7b271461036f5780637730f4fa146103825780637ba8dcd6146103a55780637bd6ec4a146103ad5780637cf8031e146103c05780638a25ad24146103d3575b600080fd5b61022161021c3660046138b2565b6105a7565b005b610221610231366004613915565b61066d565b610221610244366004613943565b6106f7565b610221610257366004613a4b565b61078e565b61022161026a366004613943565b610815565b6102216108a8565b61028a610285366004613915565b610947565b6040516102979190613a87565b60405180910390f35b6102216102ae366004613acb565b6109a9565b6102216102c1366004613ba2565b610a00565b6102d96102d4366004613bd9565b610ae9565b6040516102979190613ce8565b6102f96102f4366004613d84565b610b0d565b60405163ffffffff9091168152602001610297565b61022161031c366004613acb565b610b6d565b61033461032f366004613915565b610c1a565b6040516102979190613d9f565b600f5463ffffffff166102f9565b61036261035d366004613db2565b610cc6565b6040516102979190613dd7565b61022161037d366004613e4c565b611306565b610395610390366004613d84565b61135d565b6040519015158152602001610297565b61033461138e565b6102d96103bb366004613e80565b61139b565b6102216103ce366004613ec7565b61158f565b6102216103e1366004613d84565b6115fc565b61028a6103f4366004613915565b611666565b61040c610407366004613bd9565b6116d9565b6040516102979190613efb565b610221610427366004613f0e565b611d5b565b61022161043a366004613915565b611df0565b61022161044d366004613ec7565b611e39565b610221610460366004613f41565b611ec8565b6102f9610473366004613f63565b611f3d565b610221610486366004613f87565b61284d565b610221610499366004613e4c565b6128ae565b6103956104ac366004613f63565b612925565b6000546104c4906001600160a01b031681565b6040516001600160a01b039091168152602001610297565b6103956104ea366004613f63565b60026020526000908152604090205460ff1681565b61022161050d366004613d84565b61295c565b6102216129bc565b610221610528366004613fca565b612a0e565b61022161053b366004613e4c565b612ac4565b61033461054e366004613e80565b612b1b565b61040c610561366004613bd9565b612b3b565b610221610574366004613f63565b613123565b610221610587366004613ec7565b6131c3565b61022161059a36600461409e565b6132c1565b6102216133a3565b6000546001600160a01b03163314806105cf57503360009081526002602052604090205460ff165b6105f45760405162461bcd60e51b81526004016105eb906140bc565b60405180910390fd5b805182511461060257600080fd5b60005b825181101561066857818181518110610620576106206140e2565b6020026020010151601284838151811061063c5761063c6140e2565b602002602001015181548110610654576106546140e2565b600091825260209091200155600101610605565b505050565b6000546001600160a01b031633146106975760405162461bcd60e51b81526004016105eb906140f8565b60648111156106a557600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b8054919290916106ef908490614134565b909155505050565b6000546001600160a01b031633146107215760405162461bcd60e51b81526004016105eb906140f8565b805161072c57600080fd5b60005b815181101561078a57600160026000848481518110610750576107506140e2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161072f565b5050565b6000546001600160a01b03163314806107b657503360009081526002602052604090205460ff165b6107d25760405162461bcd60e51b81526004016105eb906140bc565b60108054600181018255600091909152815161078a917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190613491565b6000546001600160a01b0316331461083f5760405162461bcd60e51b81526004016105eb906140f8565b805161084a57600080fd5b60005b815181101561078a5760006002600084848151811061086e5761086e6140e2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161084d565b6000546001600160a01b03163314806108d057503360009081526002602052604090205460ff165b6108ec5760405162461bcd60e51b81526004016105eb906140bc565b6108f8600d6000613515565b610904600c6000613536565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b60008181526004602090815260409182902080548351818402810184019094528084526060939283018282801561099d57602002820191906000526020600020905b815481526020019060010190808311610989575b50505050509050919050565b6000546001600160a01b03163314806109d157503360009081526002602052604090205460ff165b6109ed5760405162461bcd60e51b81526004016105eb906140bc565b805161078a906010906020840190613554565b6000546001600160a01b0316331480610a2857503360009081526002602052604090205460ff165b610a445760405162461bcd60e51b81526004016105eb906140bc565b600a548263ffffffff16148015610a585750805b15610a9c57600a545b60008181526003602052604090205460ff1615610a98576008548110610a865750600a545b80610a908161414c565b915050610a61565b600a555b600a548263ffffffff1611158015610ab15750805b15610ac15763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b610af16135ad565b610b04610afd83611f3d565b848461139b565b90505b92915050565b60095460009063ffffffff831610610b2757506001919050565b60098263ffffffff1681548110610b4057610b406140e2565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b0316331480610b9557503360009081526002602052604090205460ff165b610bb15760405162461bcd60e51b81526004016105eb906140bc565b6064815110610bbf57600080fd5b60005b815181101561078a576010828281518110610bdf57610bdf6140e2565b60209081029190910181015182546001810184556000938452928290208151610c119491909101929190910190613491565b50600101610bc2565b60108181548110610c2a57600080fd5b906000526020600020016000915090508054610c4590614167565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7190614167565b8015610cbe5780601f10610c9357610100808354040283529160200191610cbe565b820191906000526020600020905b815481529060010190602001808311610ca157829003601f168201915b505050505081565b60606000610cd26133ff565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a91906141a2565b158015610def57506005546040516206259160e71b815260206004820152600f60248201526e696e6372656d656e74616c4d6f646560881b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906141a2565b155b156110dc5783158015610e8957506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906141a2565b15610e9357600193505b831580610ea05750601054155b15610ef65760408051600180825281830190925290816020015b6060815260200190600190039081610eba5790505091508082600081518110610ee557610ee56140e2565b602002602001018190525050610b07565b610f01846001614134565b6001600160401b03811115610f1857610f186137de565b604051908082528060200260200182016040528015610f4b57816020015b6060815260200190600190039081610f365790505b50915060005b848163ffffffff1610156110b85760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610f939160040190815260200190565b6020604051808303816000875af1158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906141bf565b6010549091508110610fe6575060005b60108181548110610ff957610ff96140e2565b90600052602060002001805461100e90614167565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90614167565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b5050505050848363ffffffff16815181106110a4576110a46140e2565b602090810291909101015250600101610f51565b50808285815181106110cc576110cc6140e2565b60200260200101819052506112ff565b6040805160028082526060820190925290816020015b60608152602001906001900390816110f2575050601054909250611143576040518060200160405280600081525082600081518110611133576111336140e2565b60200260200101819052506112df565b601054600f5463ffffffff16101561121957600f5460108054909163ffffffff16908110611173576111736140e2565b90600052602060002001805461118890614167565b80601f01602080910402602001604051908101604052809291908181526020018280546111b490614167565b80156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b505050505082600081518110611133576111336140e2565b601060008154811061122d5761122d6140e2565b90600052602060002001805461124290614167565b80601f016020809104026020016040519081016040528092919081815260200182805461126e90614167565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050826000815181106112d3576112d36140e2565b60200260200101819052505b80826001815181106112f3576112f36140e2565b60200260200101819052505b5092915050565b6000546001600160a01b031633148061132e57503360009081526002602052604090205460ff165b61134a5760405162461bcd60e51b81526004016105eb906140bc565b805161078a9060099060208401906135ef565b60006008548263ffffffff16108015610b0757505063ffffffff1660009081526003602052604090205460ff161590565b60078054610c4590614167565b6113a36135ad565b6113ac8461295c565b6113b961053b85846116d9565b6040518060c001604052808563ffffffff1681526020016113d986610b0d565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561145c57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161141f5790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611566916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff91906141bf565b6040518263ffffffff1660e01b815260040161151d91815260200190565b6020604051808303816000875af115801561153c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156091906141bf565b85610cc6565b81526020016115758685612b3b565b8152602001611585868686612b1b565b9052949350505050565b6000546001600160a01b031633146115b95760405162461bcd60e51b81526004016105eb906140f8565b600c8054600181018255600091909152815161078a917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190613699565b6000546001600160a01b031633148061162457503360009081526002602052604090205460ff165b6116405760405162461bcd60e51b81526004016105eb906140bc565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c828154811061167b5761167b6140e2565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561099d57602002820191906000526020600020908154815260200190600101908083116109895750505050509050919050565b6060600b54600014156116eb57610b07565b60115460609060ff16156117745760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561176857602002820191906000526020600020905b815481526020019060010190808311611754575b505050505090506117d7565b63ffffffff8416600090815260046020908152604091829020805483518184028101840190945280845290918301828280156117cf57602002820191906000526020600020905b8154815260200190600101908083116117bb575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906141bf565b905082516000141561185057505050610b07565b82516001600160401b03811115611869576118696137de565b604051908082528060200260200182016040528015611892578160200160208202803683370190505b50935060608060005b8551811015611d4f57600c8682815181106118b8576118b86140e2565b6020026020010151815481106118d0576118d06140e2565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561192457602002820191906000526020600020905b815481526020019060010190808311611910575b5050505050915081516000141561197157600087866119428161414c565b975081518110611954576119546140e2565b63ffffffff9092166020928302919091019091015260010161189b565b815160011480156119b95750600d82600081518110611992576119926140e2565b6020026020010151815481106119aa576119aa6140e2565b90600052602060002001546064145b156119e557816000815181106119d1576119d16140e2565b60200260200101518786806119429061414c565b81516001600160401b038111156119fe576119fe6137de565b604051908082528060200260200182016040528015611a27578160200160208202803683370190505b5092506000805b8351811015611beb578451821415611a4557611beb565b838181518110611a5757611a576140e2565b602002602001015160001415611a6f57600101611a2e565b6000848281518110611a8357611a836140e2565b6020026020010151600d805490501115611ad157600d858381518110611aab57611aab6140e2565b602002602001015181548110611ac357611ac36140e2565b906000526020600020015490505b8060641480611b8a57506001600160a01b038b16634b0c7aad60648a8a8786611afa898c614134565b611b049190614134565b611b0e9190614134565b611b189190614134565b611b229190614134565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8791906141bf565b81115b15611be257848281518110611ba157611ba16140e2565b6020026020010151868480611bb59061414c565b955081518110611bc757611bc76140e2565b602002602001019063ffffffff16908163ffffffff16815250505b50600101611a2e565b50600060018211611c4e5784600081518110611c0957611c096140e2565b6020026020010151898880611c1d9061414c565b995081518110611c2f57611c2f6140e2565b602002602001019063ffffffff16908163ffffffff1681525050611d45565b60028210611d4557896001600160a01b0316634b0c7aad83888a868a51611c759190614134565b611c7f9190614134565b611c899190614134565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cee91906141bf565b90508451811015611d0b57848181518110611c0957611c096140e2565b60008988611d188161414c565b995081518110611d2a57611d2a6140e2565b602002602001019063ffffffff16908163ffffffff16815250505b505060010161189b565b50505050505092915050565b6000546001600160a01b0316331480611d8357503360009081526002602052604090205460ff165b611d9f5760405162461bcd60e51b81526004016105eb906140bc565b8060098363ffffffff1681548110611db957611db96140e2565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611e1857503360009081526002602052604090205460ff165b611e345760405162461bcd60e51b81526004016105eb906140bc565b600855565b6000546001600160a01b0316331480611e6157503360009081526002602052604090205460ff165b611e7d5760405162461bcd60e51b81526004016105eb906140bc565b60005b815181101561078a576012828281518110611e9d57611e9d6140e2565b6020908102919091018101518254600181810185556000948552929093209092019190915501611e80565b6000546001600160a01b0316331480611ef057503360009081526002602052604090205460ff165b611f0c5760405162461bcd60e51b81526004016105eb906140bc565b60648110611f1957600080fd5b8060128381548110611f2d57611f2d6140e2565b6000918252602090912001555050565b60006008546001148015611f625750600a5460009081526003602052604090205460ff165b15611fa05760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b60448201526064016105eb565b60006008546001600160401b03811115611fbc57611fbc6137de565b604051908082528060200260200182016040528015611fe5578160200160208202803683370190505b50600a549091506000805b6008548110156120d75760405163a0d0ca0f60e01b8152606460048201526001600160a01b0387169063a0d0ca0f906024016020604051808303816000875af1158015612041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206591906141bf565b848281518110612077576120776140e2565b602002602001018181525050838181518110612095576120956140e2565b6020026020010151601282815481106120b0576120b06140e2565b906000526020600020015411156120cf57816120cb8161414c565b9250505b600101611ff0565b506000816001600160401b038111156120f2576120f26137de565b60405190808252806020026020018201604052801561211b578160200160208202803683370190505b5090506000915060005b6008548110156121a057848181518110612141576121416140e2565b60200260200101516012828154811061215c5761215c6140e2565b90600052602060002001541115612198578082846121798161414c565b95508151811061218b5761218b6140e2565b6020026020010181815250505b600101612125565b506005546040516206259160e71b815260206004820152600c60248201526b72616e646f6d52617269747960a01b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222991906141a2565b1561237757805160405163a0d0ca0f60e01b81526000916001600160a01b0389169163a0d0ca0f916122619160040190815260200190565b6020604051808303816000875af1158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a491906141bf565b905081518110156122d0578181815181106122c1576122c16140e2565b60200260200101519350612371565b60085460405163a0d0ca0f60e01b81526000916001600160a01b038a169163a0d0ca0f916123049160040190815260200190565b6020604051808303816000875af1158015612323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234791906141bf565b60008181526003602052604090205490915060ff161561236b57600a54945061236f565b8094505b505b506125d7565b6005546040516206259160e71b815260206004820152600c60248201526b6c6f7765737452617269747960a01b604482015260009182916001600160a01b0390911690630312c88090606401602060405180830381865afa1580156123e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240491906141a2565b156125135760005b83518110156124f7578261247457601284828151811061242e5761242e6140e2565b602002602001015181548110612446576124466140e2565b90600052602060002001549250838181518110612465576124656140e2565b602002602001015191506124ef565b8260128281548110612488576124886140e2565b906000526020600020015410156124ef5760128482815181106124ad576124ad6140e2565b6020026020010151815481106124c5576124c56140e2565b906000526020600020015492508381815181106124e4576124e46140e2565b602002602001015191505b60010161240c565b5060085481101561250a578094506125d4565b600094506125d4565b60005b83518110156125bb576012848281518110612533576125336140e2565b60200260200101518154811061254b5761254b6140e2565b90600052602060002001548310156125b3576012848281518110612571576125716140e2565b602002602001015181548110612589576125896140e2565b906000526020600020015492508381815181106125a8576125a86140e2565b602002602001015191505b600101612516565b506008548110156125ce578094506125d4565b600a5494505b50505b6005546040516206259160e71b81526020600482015260116024820152701cdd1bdc111d5c1b1a58d85d19535a5b9d607a1b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266491906141a2565b8015612675575063ffffffff831615155b801561268f5750600f54600160201b900463ffffffff1615155b80156126ac5750600f5463ffffffff848116600160201b90920416145b1561282657600f548151600160201b90910463ffffffff16906002116127db5760035b818563ffffffff161480156126f657506000816126eb816141d8565b925063ffffffff1610155b156127c157825160405163a0d0ca0f60e01b81526000916001600160a01b038b169163a0d0ca0f9161272e9160040190815260200190565b6020604051808303816000875af115801561274d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277191906141bf565b9050835181101561279d5783818151811061278e5761278e6140e2565b602002602001015195506127bb565b836000815181106127b0576127b06140e2565b602002602001015195505b506126cf565b60008163ffffffff16116127d557600a5494505b50612824565b60018463ffffffff1611156127fc576127f56001856141f8565b9350612824565b60085461280a85600161421d565b63ffffffff1610156128245761282184600161421d565b93505b505b5050600f805463ffffffff60201b1916600160201b63ffffffff8416021790559392505050565b6000546001600160a01b031633146128775760405162461bcd60e51b81526004016105eb906140f8565b80600c8363ffffffff1681548110612891576128916140e2565b906000526020600020019080519060200190610668929190613699565b6000546001600160a01b031633146128d85760405162461bcd60e51b81526004016105eb906140f8565b60008052600460209081528151612914917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec91908401906136d3565b50506011805460ff19166001179055565b600080546001600160a01b0383811691161480610b075750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b031633148061298457503360009081526002602052604090205460ff165b6129a05760405162461bcd60e51b81526004016105eb906140bc565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b03163314806129e457503360009081526002602052604090205460ff165b612a005760405162461bcd60e51b81526004016105eb906140bc565b612a0c60106000613716565b565b6000546001600160a01b03163314612a385760405162461bcd60e51b81526004016105eb906140f8565b8051825114612a4657600080fd5b60005b825181101561066857818181518110612a6457612a646140e2565b602002602001015160046000858481518110612a8257612a826140e2565b602002602001015163ffffffff1681526020019081526020016000209080519060200190612ab1929190613699565b5080612abc8161414c565b915050612a49565b6000546001600160a01b0316331480612aec57503360009081526002602052604090205460ff165b612b085760405162461bcd60e51b81526004016105eb906140bc565b805161078a90600e9060208401906135ef565b6040805180820190915260028152617b7d60f01b60208201529392505050565b60606000612b4884610b0d565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa158015612bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bda91906141bf565b905060008111612be8575060045b808263ffffffff1611612e0f5760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8491906141bf565b83600081518110612c9757612c976140e2565b602002602001019063ffffffff16908163ffffffff16815250508183600181518110612cc557612cc56140e2565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4491906141bf565b83600281518110612d5757612d576140e2565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac990612d9a90600401614245565b602060405180830381865afa158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb91906141bf565b83600381518110612dee57612dee6140e2565b602002602001019063ffffffff16908163ffffffff16815250505050610b07565b6000612e218263ffffffff8516614281565b612e2c906001614134565b90506000612e3b826002614295565b9050836000612e4b83600261421d565b63ffffffff166001600160401b03811115612e6857612e686137de565b604051908082528060200260200182016040528015612e91578160200160208202803683370190505b50965060005b8363ffffffff16811015612fcc57801580612eba5750612eb86002826142c1565b155b15612f5d5760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2c91906141bf565b888281518110612f3e57612f3e6140e2565b602002602001019063ffffffff16908163ffffffff1681525050612fc4565b600082612f698161414c565b9350612f7590886142d5565b612f859063ffffffff86166142f4565b9050868111612f945780612f96565b865b898381518110612fa857612fa86140e2565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612e97565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b91906141bf565b876002895161304a91906142f4565b8151811061305a5761305a6140e2565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061309d90600401614245565b602060405180830381865afa1580156130ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130de91906141bf565b87600189516130ed91906142f4565b815181106130fd576130fd6140e2565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b0316331461314d5760405162461bcd60e51b81526004016105eb906140f8565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b031633146131ed5760405162461bcd60e51b81526004016105eb906140f8565b60005b815181101561078a57606482828151811061320d5761320d6140e2565b6020026020010151111561326e5760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b60648201526084016105eb565b600d828281518110613282576132826140e2565b60209081029190910181015182546001818101855560009485529284200155600b8054919290916132b4908490614134565b90915550506001016131f0565b6000546001600160a01b031633146132eb5760405162461bcd60e51b81526004016105eb906140f8565b6000546001600160a01b03838116911614156133425760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b60448201526064016105eb565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b03163314806133cb57503360009081526002602052604090205460ff165b6133e75760405162461bcd60e51b81526004016105eb906140bc565b6133f360096000613734565b60006008819055600a55565b60606006805461340e90614167565b80601f016020809104026020016040519081016040528092919081815260200182805461343a90614167565b80156134875780601f1061345c57610100808354040283529160200191613487565b820191906000526020600020905b81548152906001019060200180831161346a57829003601f168201915b5050505050905090565b82805461349d90614167565b90600052602060002090601f0160209004810192826134bf5760008555613505565b82601f106134d857805160ff1916838001178555613505565b82800160010185558215613505579182015b828111156135055782518255916020019190600101906134ea565b50613511929150613755565b5090565b50805460008255906000526020600020908101906135339190613755565b50565b5080546000825590600052602060002090810190613533919061376a565b8280548282559060005260206000209081019282156135a1579160200282015b828111156135a15782518051613591918491602090910190613491565b5091602001919060010190613574565b50613511929150613787565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b828054828255906000526020600020906007016008900481019282156135055791602002820160005b8382111561365c57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613618565b801561368c5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261365c565b5050613511929150613755565b82805482825590600052602060002090810192821561350557916020028201828111156135055782518255916020019190600101906134ea565b828054828255906000526020600020908101928215613505579160200282015b82811115613505578251829063ffffffff169055916020019190600101906136f3565b50805460008255906000526020600020908101906135339190613787565b50805460008255600701600890049060005260206000209081019061353391905b5b808211156135115760008155600101613756565b8082111561351157600061377e8282613515565b5060010161376a565b8082111561351157600061379b82826137a4565b50600101613787565b5080546137b090614167565b6000825580601f106137c0575050565b601f0160209004906000526020600020908101906135339190613755565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561381c5761381c6137de565b604052919050565b60006001600160401b0382111561383d5761383d6137de565b5060051b60200190565b600082601f83011261385857600080fd5b8135602061386d61386883613824565b6137f4565b82815260059290921b8401810191818101908684111561388c57600080fd5b8286015b848110156138a75780358352918301918301613890565b509695505050505050565b600080604083850312156138c557600080fd5b82356001600160401b03808211156138dc57600080fd5b6138e886838701613847565b935060208501359150808211156138fe57600080fd5b5061390b85828601613847565b9150509250929050565b60006020828403121561392757600080fd5b5035919050565b6001600160a01b038116811461353357600080fd5b6000602080838503121561395657600080fd5b82356001600160401b0381111561396c57600080fd5b8301601f8101851361397d57600080fd5b803561398b61386882613824565b81815260059190911b820183019083810190878311156139aa57600080fd5b928401925b828410156139d15783356139c28161392e565b825292840192908401906139af565b979650505050505050565b600082601f8301126139ed57600080fd5b81356001600160401b03811115613a0657613a066137de565b613a19601f8201601f19166020016137f4565b818152846020838601011115613a2e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613a5d57600080fd5b81356001600160401b03811115613a7357600080fd5b613a7f848285016139dc565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613abf57835183529284019291840191600101613aa3565b50909695505050505050565b60006020808385031215613ade57600080fd5b82356001600160401b0380821115613af557600080fd5b818501915085601f830112613b0957600080fd5b8135613b1761386882613824565b81815260059190911b83018401908481019088831115613b3657600080fd5b8585015b83811015613b6e57803585811115613b525760008081fd5b613b608b89838a01016139dc565b845250918601918601613b3a565b5098975050505050505050565b803563ffffffff81168114613b8f57600080fd5b919050565b801515811461353357600080fd5b60008060408385031215613bb557600080fd5b613bbe83613b7b565b91506020830135613bce81613b94565b809150509250929050565b60008060408385031215613bec57600080fd5b613bf583613b7b565b91506020830135613bce8161392e565b600081518084526020808501945080840160005b83811015613c3b57815163ffffffff1687529582019590820190600101613c19565b509495945050505050565b6000815180845260005b81811015613c6c57602081850181015186830182015201613c50565b81811115613c7e576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015613cdb578284038952613cc9848351613c46565b98850198935090840190600101613cb1565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c06060840152613d2260e0840182613c05565b90506060840151601f1980858403016080860152613d408383613c93565b925060808601519150808584030160a0860152613d5d8383613c05565b925060a08601519150808584030160c086015250613d7b8282613c46565b95945050505050565b600060208284031215613d9657600080fd5b610b0482613b7b565b602081526000610b046020830184613c46565b60008060408385031215613dc557600080fd5b823591506020830135613bce8161392e565b602081526000610b046020830184613c93565b600082601f830112613dfb57600080fd5b81356020613e0b61386883613824565b82815260059290921b84018101918181019086841115613e2a57600080fd5b8286015b848110156138a757613e3f81613b7b565b8352918301918301613e2e565b600060208284031215613e5e57600080fd5b81356001600160401b03811115613e7457600080fd5b613a7f84828501613dea565b600080600060608486031215613e9557600080fd5b613e9e84613b7b565b9250613eac60208501613b7b565b91506040840135613ebc8161392e565b809150509250925092565b600060208284031215613ed957600080fd5b81356001600160401b03811115613eef57600080fd5b613a7f84828501613847565b602081526000610b046020830184613c05565b60008060408385031215613f2157600080fd5b613f2a83613b7b565b9150613f3860208401613b7b565b90509250929050565b60008060408385031215613f5457600080fd5b50508035926020909101359150565b600060208284031215613f7557600080fd5b8135613f808161392e565b9392505050565b60008060408385031215613f9a57600080fd5b613fa383613b7b565b915060208301356001600160401b03811115613fbe57600080fd5b61390b85828601613847565b60008060408385031215613fdd57600080fd5b82356001600160401b0380821115613ff457600080fd5b61400086838701613dea565b935060209150818501358181111561401757600080fd5b8501601f8101871361402857600080fd5b803561403661386882613824565b81815260059190911b8201840190848101908983111561405557600080fd5b8584015b8381101561408d578035868111156140715760008081fd5b61407f8c8983890101613847565b845250918601918601614059565b508096505050505050509250929050565b600080604083850312156140b157600080fd5b8235613bbe8161392e565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156141475761414761411e565b500190565b60006000198214156141605761416061411e565b5060010190565b600181811c9082168061417b57607f821691505b6020821081141561419c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156141b457600080fd5b8151613f8081613b94565b6000602082840312156141d157600080fd5b5051919050565b600063ffffffff8216806141ee576141ee61411e565b6000190192915050565b600063ffffffff838116908316818110156142155761421561411e565b039392505050565b600063ffffffff80831681851680830382111561423c5761423c61411e565b01949350505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826142905761429061426b565b500490565b600063ffffffff808316818516818304811182151516156142b8576142b861411e565b02949350505050565b6000826142d0576142d061426b565b500690565b60008160001904831182151516156142ef576142ef61411e565b500290565b6000828210156143065761430661411e565b50039056fea26469706673582212209519c09b417544950e1e451fae0bfaa12bf95f01a3b4d70cf0d1fa4f1b737cbf64736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0x3411DEa54B2FB5aB203616bB614D61794432d7B1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3148,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "disabledPaths",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3153,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "pathSections",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3156,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "valuesController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(InfinityMintValues)7070"
      },
      {
        "astId": 3159,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "tokenName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3162,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "assetsType",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3164,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "pathCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3167,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "pathSizes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3169,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "safeDefaultReturnPath",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3171,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "assetId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3175,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "assetsSections",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 3178,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "assetRarity",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3181,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "lastAssets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3184,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "nextPath",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3187,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "lastPath",
        "offset": 4,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3190,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "names",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3193,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "flatSections",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 12840,
        "contract": "contracts/assets/RaritySVG.sol:RaritySVG",
        "label": "pathRarity",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InfinityMintValues)7070": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}