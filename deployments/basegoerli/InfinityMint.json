{
  "address": "0x31845Bebf7090E7BB0a2e9e191d463336131Dca7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "storageContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previewCount",
          "type": "uint256"
        }
      ],
      "name": "TokenPreviewComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TokenPreviewMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTokenId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        }
      ],
      "name": "depositStickerRoyalty",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "royaltyType",
          "type": "uint32"
        }
      ],
      "name": "depositSystemRoyalty",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        }
      ],
      "name": "getPathId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "pathSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "colours",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "mintData",
          "type": "bytes"
        },
        {
          "internalType": "uint32[]",
          "name": "assets",
          "type": "uint32[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        }
      ],
      "name": "implicitMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintArguments",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "mintPreview",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterController",
      "outputs": [
        {
          "internalType": "contract Minter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyController",
      "outputs": [
        {
          "internalType": "contract Royalty",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storageContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyContract",
          "type": "address"
        }
      ],
      "name": "setControllers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setMintsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "json",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageController",
      "outputs": [
        {
          "internalType": "contract InfinityMintStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "transferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valuesController",
      "outputs": [
        {
          "internalType": "contract InfinityMintValues",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bc18710453c051c744dd812f3b3dce00337a2bf4ea9d34fbf3f32539bd4afde",
  "receipt": {
    "to": null,
    "from": "0xDFF917ab602e8508b6907dE1b038dd52B24A2379",
    "contractAddress": "0x31845Bebf7090E7BB0a2e9e191d463336131Dca7",
    "transactionIndex": 1,
    "gasUsed": "4588051",
    "logsBloom": "0x
    "blockHash": "0x5c7065386d9dd19a1d42a40a2553a1ab47874bd2e9af1eaca11db1b0b56e48fa",
    "transactionHash": "0x7bc18710453c051c744dd812f3b3dce00337a2bf4ea9d34fbf3f32539bd4afde",
    "logs": [],
    "blockNumber": 9462484,
    "cumulativeGasUsed": "4634904",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Party🎉Pass",
    "Party🎉Pass",
    "0x8120EF40b29100b37BBda3B20d1261CC3F355e95",
    "0x88B11F935975441aC5b3711e2fbA9db8E5E7c775",
    "0x2e8554caC87e71eBEcacad3E44161cea33A9018d",
    "0x2683009b41b999Baf1b8F900dB23fd51c2a099d3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c554005d846e5256cfd947c8d0a331d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previewCount\",\"type\":\"uint256\"}],\"name\":\"TokenPreviewComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenPreviewMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"depositStickerRoyalty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"royaltyType\",\"type\":\"uint32\"}],\"name\":\"depositSystemRoyalty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"getPathId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"implicitMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintArguments\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"mintPreview\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterController\",\"outputs\":[{\"internalType\":\"contract Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyController\",\"outputs\":[{\"internalType\":\"contract Royalty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyContract\",\"type\":\"address\"}],\"name\":\"setControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMintsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageController\",\"outputs\":[{\"internalType\":\"contract InfinityMintStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuesController\",\"outputs\":[{\"internalType\":\"contract InfinityMintValues\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0x0zAgency\",\"events\":{\"TokenMinted(uint32,bytes,address)\":{\"details\":\"will be changed to TokenMinted soon\"},\"TokenPreviewMinted(uint32,bytes,address)\":{\"details\":\"will be changed to TokenPreviewMinted soon\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"will Throw if tokenId does not exist\"},\"depositStickerRoyalty(uint32)\":{\"details\":\"the amount that is paid into this function is defined by the sticker price set by the token owner. The royalty controller cuts up the deposited tokens even more depending on if there are any splits.\"},\"getPathId(uint32)\":{\"details\":\"must be split up into chunks of 32\"},\"getPreview()\":{\"details\":\"This method is the most gas intensive method in InfinityMint, how ever there is a trade off in the fact that that MintPreview is insanely cheap and does not need a lot of gas. I suggest using low previewCount values of about 2 or 3. Anything higher is dependant in your project configuartion and how much you care about gas prices.\"},\"implicitMint(address,uint32,uint32,uint32[],bytes,uint32[],string[])\":{\"details\":\"This is the cheapest way to get InfinityMint to mint something as it literally decides no values on chain. This method can also be called by a rollup solution or something or be used as a way to literally mint anything.\",\"params\":{\"assets\":\"the assets for this token\",\"colours\":\"the colours of this token\",\"pathId\":\"the pathid you want to mint\",\"pathSize\":\"the size of this path (for colour generation)\",\"receiver\":\"the address to receive the mint\"}},\"isApprovedOrOwner(address,uint256)\":{\"details\":\"same as open zepps\"},\"mintArguments(bytes)\":{\"details\":\"must have byteMint enabled in valuesController\"},\"mintPreview(uint32)\":{\"details\":\"This will wipe other previews once called.\",\"params\":{\"index\":\"the index of the preview to mint\"}},\"ownerOf(uint256)\":{\"details\":\"will Throw if the token does not exist\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Emits a {Transfer} event.\"},\"setTokenURI(uint32,string)\":{\"details\":\"you need to call this from an approved address for the token\",\"params\":{\"json\":\"an IFPS link or a\",\"tokenId\":\"the tokenId\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenPrice()\":{\"details\":\"the royalty controller actually controls the token price so in order to change it you must send tx to that contract.\"},\"totalSupply()\":{\"details\":\"Returns the max supply of tokens, not the amount that have been minted. (so the tokenId)\"},\"transferBatch(uint256[],address)\":{\"details\":\"must be split up into chunks of 32\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Emits a {Transfer} event.\"},\"withdraw()\":{\"details\":\"The totals that the sender can withdraw is managed by the royalty controller\"}},\"title\":\"ERC721 InfinityMint v0.1.1.4\",\"version\":1},\"userdoc\":{\"events\":{\"TokenPreviewComplete(address,uint256)\":{\"notice\":\"Fired when ever a preview has been completed\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets an approved adress for this token\"},\"balanceOf(address)\":{\"notice\":\"blanceOf returns the number of tokens an address currently holds.\"},\"constructor\":{\"notice\":\"InfinityMint Constructor takes tokenName and tokenSymbol and the various destinations of controller contracts\"},\"currentTokenId()\":{\"notice\":\"numerical increment of the current tokenId\"},\"depositStickerRoyalty(uint32)\":{\"notice\":\"this can only be called by sticker contracts and is used to pay back the contract owner their sticker cut TODO: Turn this into a non static function capable of accepting payments not just from the sticker\"},\"depositSystemRoyalty(uint32)\":{\"notice\":\"Allows approved contracts to deposit royalty types\"},\"exists(uint256)\":{\"notice\":\"Returns true if a token exists.\"},\"getApproved(uint256)\":{\"notice\":\"Returns the approved adress for this token.\"},\"getPathId(uint32)\":{\"notice\":\"Gets the pathId of a token.\"},\"getPreview()\":{\"notice\":\"Returns a selection of preview mints, these are ghost NFTs which can be chosen from. Their generation values are based off of eachover due to the nature of the number system.\"},\"implicitMint(address,uint32,uint32,uint32[],bytes,uint32[],string[])\":{\"notice\":\"Allows approved or the deployer to pick exactly what token they would like to mint. Does not check if assets/colours/mintData is valid. Implicitly assets what ever.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Will returns true if the operator is approved by the owner address\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"will returns true if the address is apprroved for all, approved operator or is the owner of a token\"},\"mint()\":{\"notice\":\"Public method to mint a token taking no bytes argument\"},\"mintArguments(bytes)\":{\"notice\":\"Public method to mint a token but taking input data in the form of packed bytes\"},\"mintPreview(uint32)\":{\"notice\":\"Mints a preview. Index is relative to the sender and is the index of the preview in the users preview list\"},\"minterController()\":{\"notice\":\"Interface set to the location of the minter controller which controls how InfinityMint mints, is set in constructor and can be modified through setDestinations\"},\"mintsEnabled()\":{\"notice\":\"will disallow mints if set to true\"},\"name()\":{\"notice\":\"Returns the name of the ERC721  for display on places like Etherscan\"},\"ownerOf(uint256)\":{\"notice\":\"Returns the owner of a current token\"},\"royaltyController()\":{\"notice\":\"Interface set to the location of the royalty controller which controls how  picks random numbers and primes, is set in constructor and can be modified through setDestinations\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Just like the method above except with no data field we pass to the implemeting contract.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Will approve an operator for the senders tokens\"},\"setMintsEnabled(bool)\":{\"notice\":\"Toggles mints allowing people to either mint or not mint tokens.\"},\"setTokenURI(uint32,string)\":{\"notice\":\"sets the token URI\"},\"storageController()\":{\"notice\":\"Interface set to the location of the storage controller, is set in constructor and cannot be modified.\"},\"supportsInterface(bytes4)\":{\"notice\":\"this is used by opensea/polyscan to detect our ERC721\"},\"symbol()\":{\"notice\":\"Returns the symbol of the ERC721 for display on places like Polyscan\"},\"tokenPrice()\":{\"notice\":\"Returns the current price of a mint.\"},\"tokenURI(uint256)\":{\"notice\":\"returns the tokenURI for a token, will return the\"},\"totalSupply()\":{\"notice\":\"the total supply of tokens\"},\"transferBatch(uint256[],address)\":{\"notice\":\"Allows the ability for multiple tokens to be transfered at once.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it.\"},\"valuesController()\":{\"notice\":\"Interface set to the location of the values controller responsible for managing global variables across the smart contract syste,, is set in constructor and cannot be modified.\"},\"withdraw()\":{\"notice\":\"Allows you to withdraw your earnings from the contract.\"}},\"notice\":\"This is the main contract for an InfinityMint. It is responsible for the suite working together to create a fully dynamic and modular NFT system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InfinityMint.sol\":\"InfinityMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './RandomNumber.sol';\\n\\nabstract contract Asset {\\n    struct PartialStruct {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32[] assets;\\n        string[] names;\\n        uint32[] colours;\\n        bytes mintData;\\n    }\\n\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32[] memory result);\\n\\n    function getDefaultName() internal virtual returns (string memory);\\n\\n    function getNextPath() external view virtual returns (uint32);\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function isValidPath(uint32 pathId) external view virtual returns (bool);\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function setLastAssets(uint32[] memory assets) public virtual;\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (string[] memory results);\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        external\\n        virtual\\n        returns (uint32[] memory assetsId);\\n\\n    function getMintData(\\n        uint32 pathId,\\n        uint32 tokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (bytes memory);\\n\\n    function addAsset(uint256 rarity) public virtual;\\n\\n    function setNextPathId(uint32 pathId) public virtual;\\n\\n    function setLastPathId(uint32 pathId) public virtual;\\n\\n    function getPathSize(uint32 pathId) public view virtual returns (uint32);\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0xf9c45bcff49089b99643efcca4496c08960eecdc04f3b1e91ab7347a01fff87b\",\"license\":\"UNLICENSED\"},\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintObject.sol';\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount, 're-entry');\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, 'not deployer');\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], 'not approved');\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, 'cannot modify deployer');\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiRevoke(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0xd37a41033d6a0329dcdc6da0eccbb7f743c5ab2206cd46d634969987ad0f557a\",\"license\":\"UNLICENSED\"},\"contracts/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC165.sol';\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd349bdc57616e68f5cff952df682414c781d9fd88d214091c8c270386bc5b675\",\"license\":\"MIT\"},\"contracts/ERC721.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './IERC721.sol';\\nimport './ERC165.sol';\\nimport './IERC165.sol';\\n\\n/// @title ERC-721 Infinity Mint Implementation\\n/// @author 0xTinman.eth\\n/// @notice This is a basic ERC721 Implementation that is designed to be as simple and gas efficient as possible.\\n/// @dev This contract supports tokenURI (the Metadata extension) but does not include the Enumerable extension.\\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    ///@notice Storage for the tokens\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => address) internal tokens; //(slot 0)\\n    ///@notice Storage the token metadata\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => string) internal uri; //(slot 1)\\n    ///@notice Storage the token metadata\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => address) internal approvedTokens; //(slot 2)\\n    ///@notice Stores approved operators for the addresses tokens.\\n    mapping(address => mapping(address => bool)) internal operators; //(slot 3)\\n    ///@notice Stores the balance of tokens\\n    mapping(address => uint256) internal balance; //(slot 4)\\n\\n    ///@notice The name of the ERC721\\n    string internal _name; //(slot 5)\\n    ///@notice The Symbol of the ERC721\\n    string internal _symbol; //(slot 6)\\n\\n    /**\\n        @notice ERC721 Constructor takes tokenName and tokenSymbol\\n     */\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     * @notice this is used by opensea/polyscan to detect our ERC721\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n        @notice blanceOf returns the number of tokens an address currently holds.\\n     */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balance[_owner];\\n    }\\n\\n    /**\\n        @notice Returns the owner of a current token\\n        @dev will Throw if the token does not exist\\n     */\\n    function ownerOf(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(exists(_tokenId), 'invalid tokenId');\\n        return tokens[_tokenId];\\n    }\\n\\n    /**\\n        @notice Will approve an operator for the senders tokens\\n    */\\n    function setApprovalForAll(address _operator, bool _approved)\\n        public\\n        override\\n    {\\n        operators[_sender()][_operator] = _approved;\\n        emit ApprovalForAll(_sender(), _operator, _approved);\\n    }\\n\\n    /**\\n        @notice Will returns true if the operator is approved by the owner address\\n    */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return operators[_owner][_operator];\\n    }\\n\\n    /**\\n        @notice Returns the tokens URI Metadata object\\n    */\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return uri[_tokenId];\\n    }\\n\\n    /**\\n        @notice Returns the name of the ERC721  for display on places like Etherscan\\n    */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n        @notice Returns the symbol of the ERC721 for display on places like Polyscan\\n    */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n        @notice Returns the approved adress for this token.\\n    */\\n    function getApproved(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return approvedTokens[_tokenId];\\n    }\\n\\n    /**\\n        @notice Sets an approved adress for this token\\n        @dev will Throw if tokenId does not exist\\n    */\\n    function approve(address _to, uint256 _tokenId) public override {\\n        address owner = ERC721.ownerOf(_tokenId);\\n\\n        require(_to != owner, 'cannot approve owner');\\n        require(\\n            _sender() == owner || isApprovedForAll(owner, _sender()),\\n            'ERC721: approve caller is not token owner or approved for all'\\n        );\\n        approvedTokens[_tokenId] = _to;\\n        emit Approval(owner, _to, _tokenId);\\n    }\\n\\n    /**\\n        @notice Mints a token.\\n        @dev If you are transfering a token to a contract the contract will make sure that it can recieved the ERC721 (implements a IERC721Receiver) if it does not it will revert the transcation. Emits a {Transfer} event.\\n    */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) internal {\\n        require(_to != address(0x0), '0x0 mint');\\n        require(!exists(_tokenId), 'already minted');\\n\\n        balance[_to] += 1;\\n        tokens[_tokenId] = _to;\\n\\n        emit Transfer(address(0x0), _to, _tokenId);\\n\\n        //check that the ERC721 has been received\\n        require(\\n            checkERC721Received(_sender(), address(this), _to, _tokenId, _data)\\n        );\\n    }\\n\\n    /**\\n        @notice Returns true if a token exists.\\n     */\\n    function exists(uint256 _tokenId) public view returns (bool) {\\n        return tokens[_tokenId] != address(0x0);\\n    }\\n\\n    /// @notice Is ran before every transfer, overwrite this function with your own logic\\n    /// @dev Must return true else will revert\\n    function beforeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n\\n    /**\\n        @notice Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it.\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        require(\\n            isApprovedOrOwner(_sender(), _tokenId),\\n            'not approved or owner'\\n        );\\n        require(_from != address(0x0), 'sending to null address');\\n\\n        //before the transfer\\n        beforeTransfer(_from, _to, _tokenId);\\n\\n        delete approvedTokens[_tokenId];\\n        balance[_from] -= 1;\\n        balance[_to] += 1;\\n        tokens[_tokenId] = _to;\\n\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @notice will returns true if the address is apprroved for all, approved operator or is the owner of a token\\n    /// @dev same as open zepps\\n    function isApprovedOrOwner(address addr, uint256 tokenId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (addr == owner ||\\n            isApprovedForAll(owner, addr) ||\\n            getApproved(tokenId) == addr);\\n    }\\n\\n    /**\\n        @notice Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\n    }\\n\\n    /**\\n        @notice Just like the method above except with no data field we pass to the implemeting contract.\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        _safeTransferFrom(_from, _to, _tokenId, '');\\n    }\\n\\n    /**\\n        @notice Internal method to transfer the token and require that checkERC721Recieved is equal to true.\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private {\\n        transferFrom(_from, _to, _tokenId);\\n        //check that it implements an IERC721 receiver if it is a contract\\n        require(\\n            checkERC721Received(_sender(), _from, _to, _tokenId, _data),\\n            'ERC721 Receiver Confirmation Is Bad'\\n        );\\n    }\\n\\n    /**\\n        @notice Checks first if the to address is a contract, if it is it will confirm that the contract is an ERC721 implentor by confirming the selector returned as documented in the ERC721 standard. If the to address isnt a contract it will just return true. Based on the code inside of OpenZeppelins ERC721\\n     */\\n    function checkERC721Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!isContract(_to)) return true;\\n\\n        try\\n            IERC721Receiver(_to).onERC721Received(\\n                _operator,\\n                _from,\\n                _tokenId,\\n                _data\\n            )\\n        returns (bytes4 confirmation) {\\n            return (confirmation == IERC721Receiver.onERC721Received.selector);\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert('This contract does not implement an IERC721Receiver');\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    ///@notice secures msg.sender so it cannot be changed\\n    function _sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    ///@notice Returns true if the address is a contract\\n    ///@dev Sometimes doesnt work and contracts might be disgused as addresses\\n    function isContract(address _address) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd201520f9d43dd2cbcdb4fef31d1d6d32f72ebc25fc9e5d3b85b7d0f29107260\",\"license\":\"UNLICENSED\"},\"contracts/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol) (Thanks <3)\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC165.sol';\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, ERC721 Receiver\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd8b8d9bdde5c2b3b66dba994c1701cb11e1940a9164d059b6189ae6dcab83fbc\",\"license\":\"MIT\"},\"contracts/InfinityMint.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0x0zAgency 2023\\npragma solidity ^0.8.0;\\n\\n//\\nimport './ERC721.sol';\\nimport './InfinityMintStorage.sol';\\nimport './Royalty.sol';\\nimport './Authentication.sol';\\nimport './Minter.sol';\\nimport './InfinityMintObject.sol';\\n\\n/// @title ERC721 InfinityMint v0.1.1.4\\n/// @author 0x0zAgency\\n/// @notice This is the main contract for an InfinityMint. It is responsible for the suite working together to create a fully dynamic and modular NFT system.\\n/// @dev\\ncontract InfinityMint is ERC721, Authentication, InfinityMintObject {\\n     string public constant version = \\\"0.69.1.4\\\";  // <-- Add a version variable\\n    /// @notice Interface set to the location of the storage controller, is set in constructor and cannot be modified.\\n    InfinityMintStorage public storageController;\\n\\n    /// @notice Interface set to the location of the minter controller which controls how InfinityMint mints, is set in constructor and can be modified through setDestinations\\n    Minter public minterController;\\n\\n    /// @notice Interface set to the location of the values controller responsible for managing global variables across the smart contract syste,, is set in constructor and cannot be modified.\\n    InfinityMintValues public valuesController;\\n\\n    /// @notice Interface set to the location of the royalty controller which controls how  picks random numbers and primes, is set in constructor and can be modified through setDestinations\\n    Royalty public royaltyController;\\n\\n    /// @dev will be changed to TokenMinted soon\\n    event TokenMinted(\\n        uint32 tokenId,\\n        bytes encodedData,\\n        address indexed sender\\n    );\\n\\n    /// @dev will be changed to TokenPreviewMinted soon\\n    event TokenPreviewMinted(\\n        uint32 tokenId,\\n        bytes encodedData,\\n        address indexed sender\\n    );\\n\\n    /// @notice Fired when ever a preview has been completed\\n    event TokenPreviewComplete(address indexed sender, uint256 previewCount);\\n\\n    /// @notice numerical increment of the current tokenId\\n    uint32 public currentTokenId;\\n\\n    /// @notice will disallow mints if set to true\\n    bool public mintsEnabled;\\n\\n    /// @notice InfinityMint Constructor takes tokenName and tokenSymbol and the various destinations of controller contracts\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address storageContract,\\n        address valuesContract,\\n        address minterContract,\\n        address royaltyContract\\n    ) ERC721(tokenName, tokenSymbol) {\\n        //storage controller cannot be rewired\\n        storageController = InfinityMintStorage(storageContract); //address of the storage controlller\\n        //values controller cannot be rewired\\n        valuesController = InfinityMintValues(valuesContract);\\n        //\\n        royaltyController = Royalty(royaltyContract);\\n        minterController = Minter(minterContract);\\n    }\\n\\n    function setControllers(\\n        address storageContract,\\n        address valuesContract,\\n        address minterContract,\\n        address royaltyContract\\n    ) public onlyApproved {\\n        storageController = InfinityMintStorage(storageContract); //address of the storage controlller\\n        //values controller cannot be rewired\\n        valuesController = InfinityMintValues(valuesContract);\\n        //\\n        royaltyController = Royalty(royaltyContract);\\n        minterController = Minter(minterContract);\\n    }\\n\\n    /// @notice the total supply of tokens\\n    /// @dev Returns the max supply of tokens, not the amount that have been minted. (so the tokenId)\\n    function totalSupply() public view returns (uint256) {\\n        return valuesController.tryGetValue('maxSupply');\\n    }\\n\\n    /// @notice Toggles mints allowing people to either mint or not mint tokens.\\n    function setMintsEnabled(bool value) public onlyApproved {\\n        mintsEnabled = value;\\n    }\\n\\n    /// @notice Returns a selection of preview mints, these are ghost NFTs which can be chosen from. Their generation values are based off of eachover due to the nature of the number system.\\n    /// @dev This method is the most gas intensive method in InfinityMint, how ever there is a trade off in the fact that that MintPreview is insanely cheap and does not need a lot of gas. I suggest using low previewCount values of about 2 or 3. Anything higher is dependant in your project configuartion and how much you care about gas prices.\\n    function getPreview() public {\\n        require(\\n            verifyMint(0, false),\\n            'failed mint check: mints are disabled, mints are at a max supply'\\n        ); //does not check the price\\n\\n        //if the user has already had their daily preview mints\\n        require(\\n            valuesController.tryGetValue('previewCount') > 0,\\n            'previews are disabled'\\n        );\\n\\n        //the preview timer will default to zero unless a preview has already been minted so there for it can be used like a check\\n        require(\\n            block.timestamp > storageController.getPreviewTimestamp(sender()),\\n            'please mint previews or wait until preview counter is up'\\n        );\\n\\n        //minter controller will store the previews for us\\n        uint256 previewCount = minterController.getPreview(\\n            currentTokenId,\\n            sender()\\n        );\\n\\n        //get cooldown of previews\\n        uint256 cooldownPeriod = valuesController.tryGetValue(\\n            'previewCooldownSeconds'\\n        );\\n        //if it is 0 (not set), set to 60 seconds\\n        if (cooldownPeriod == 0) cooldownPeriod = 60;\\n        //set it\\n        storageController.setPreviewTimestamp(\\n            sender(),\\n            block.timestamp + cooldownPeriod\\n        );\\n\\n        //once done, emit an event\\n        emit TokenPreviewComplete(sender(), previewCount);\\n    }\\n\\n    /// @notice Mints a preview. Index is relative to the sender and is the index of the preview in the users preview list\\n    /// @dev This will wipe other previews once called.\\n    /// @param index the index of the preview to mint\\n    function mintPreview(uint32 index) public payable onlyOnce {\\n        uint256 value = (msg.value);\\n        require(\\n            verifyMint(value, !approved[sender()]),\\n            'failed mint verification'\\n        ); //will not check the price for approved members\\n\\n        completeMint(\\n            minterController.mintPreview(index, currentTokenId, sender()),\\n            sender(),\\n            true,\\n            value\\n        );\\n    }\\n\\n    /// @notice Allows approved or the deployer to pick exactly what token they would like to mint. Does not check if assets/colours/mintData is valid. Implicitly assets what ever.\\n    /// @dev This is the cheapest way to get InfinityMint to mint something as it literally decides no values on chain. This method can also be called by a rollup solution or something or be used as a way to literally mint anything.\\n    /// @param receiver the address to receive the mint\\n    /// @param pathId the pathid you want to mint\\n    /// @param pathSize the size of this path (for colour generation)\\n    /// @param colours the colours of this token\\n    /// @param assets the assets for this token\\n    function implicitMint(\\n        address receiver,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        uint32[] memory assets,\\n        string[] memory names\\n    ) public onlyApproved {\\n        require(\\n            currentTokenId != valuesController.tryGetValue('maxSupply'),\\n            'max supply has been reached raise it before minting'\\n        );\\n\\n        //if we are incremental or matched mode we want to set the last path id (which is actually the next one) to be plus one of the current\\n        //path id in case an on chain mint occurs\\n        if (\\n            valuesController.isTrue('incrementalMode') ||\\n            valuesController.isTrue('matchedMode')\\n        ) minterController.assetController().setLastPathId(pathId + 1);\\n\\n        completeMint(\\n            createInfinityObject(\\n                currentTokenId,\\n                pathId,\\n                pathSize,\\n                assets,\\n                names,\\n                colours,\\n                mintData,\\n                receiver,\\n                new address[](0)\\n            ),\\n            receiver,\\n            false,\\n            value()\\n        );\\n\\n        \\n    }\\n\\n    /// @notice Returns the current price of a mint.\\n    /// @dev the royalty controller actually controls the token price so in order to change it you must send tx to that contract.\\n    function tokenPrice() public view returns (uint256) {\\n        return royaltyController.tokenPrice();\\n    }\\n\\n    /// @notice Public method to mint a token but taking input data in the form of packed bytes\\n    /// @dev must have byteMint enabled in valuesController\\n    function mintArguments(bytes memory data) public payable onlyOnce {\\n        require(\\n            valuesController.isTrue('byteMint'),\\n            'must mint with mint instead of byteMint'\\n        );\\n        require(data.length != 0, 'length of bytes is zero');\\n\\n        _mint(data);\\n    }\\n\\n    /// @notice Public method to mint a token taking no bytes argument\\n    function mint() public payable onlyOnce {\\n        require(\\n            !valuesController.isTrue('byteMint'),\\n            'must mint with byteMint instead of mint'\\n        );\\n\\n        _mint(bytes(''));\\n    }\\n\\n    /// @notice returns the tokenURI for a token, will return the\\n    function tokenURI(uint256 tokenId) public view override returns (string memory result) {\\n        require(tokenId < currentTokenId, 'tokenURI for non-existent token');\\n\\n        // Updated the default result to the provided JSON link // Set this up before you deploy the infinity minter\\n        \\n        result = 'https://ipfs.io/ipfs/bafybeiec52bo6scqfwcqbvs4rdvs6ph2xjc5vactocim3cbcmlmupkd5z4/partytime_default_uri.json';\\n\\n        string memory defaultTokenURI = storageController.getOption(address(this), 'defaultTokenURI');\\n        // Assuming this is JSON or URI is http address...\\n        // This must have in it somewhere the key \\\"default\\\": true else the react application will think that this is an actual tokenURI\\n\\n        if (bytes(defaultTokenURI).length != 0) result = defaultTokenURI;\\n\\n        address owner = ownerOf(tokenId);\\n        string memory currentTokenURI = uri[tokenId];\\n\\n        if (storageController.tokenFlag(uint32(tokenId), 'forceTokenURI') && bytes(currentTokenURI).length != 0) {\\n            result = currentTokenURI;\\n        } else if (storageController.flag(owner, 'usingRoot') || storageController.flag(address(this), 'usingRoot')) {\\n            // If the owner of the token is using the root, then return the address of the owner, if the project is using a root, return this current address\\n            address selector = storageController.flag(owner, 'usingRoot') ? owner : address(this);\\n            // Gets the root of the tokenURI destination, could be anything, HTTP link or more.\\n            string memory root = storageController.getOption(selector, 'root');\\n            // The prefix to add to the end or the stitch, by default .json will be added unless the boolean inside of the\\n            // values controller called \\\"removeDefaultSuffix\\\" is true.\\n            string memory rootSuffix = storageController.getOption(selector, 'rootSuffix');\\n            if (bytes(rootSuffix).length == 0 && !valuesController.isTrue('removeDefaultSuffix')) rootSuffix = '.json';\\n\\n            if (bytes(root).length != 0) result = InfinityMintUtil.filepath(root, InfinityMintUtil.toString(tokenId), rootSuffix);\\n        } else if (bytes(currentTokenURI).length != 0) {\\n            result = currentTokenURI;\\n        }\\n\\n        return result;\\n}\\n\\n    /// @notice Allows you to withdraw your earnings from the contract.\\n    /// @dev The totals that the sender can withdraw is managed by the royalty controller\\n    function withdraw() public onlyOnce {\\n        uint256 total = royaltyController.values(sender());\\n        require(total > 0, 'no balance to withdraw');\\n        require(\\n            address(this).balance - total >= 0,\\n            'cannot afford to withdraw'\\n        );\\n\\n        total = royaltyController.dispenseRoyalty(sender()); //will revert if bad, results in the value to be deposited. Has Re-entry protection.\\n        require(total > 0, 'value returned from royalty controller is bad');\\n\\n        (bool success, ) = sender().call{ value: total }('');\\n        require(success, 'did not transfer successfully');\\n    }\\n\\n    /// @notice this can only be called by sticker contracts and is used to pay back the contract owner their sticker cut TODO: Turn this into a non static function capable of accepting payments not just from the sticker\\n    /// @dev the amount that is paid into this function is defined by the sticker price set by the token owner. The royalty controller cuts up the deposited tokens even more depending on if there are any splits.\\n    function depositStickerRoyalty(uint32 tokenId) public payable onlyOnce {\\n        InfinityObject memory temp = storageController.get(tokenId);\\n        //if the sender isn't the sticker contract attached to this token\\n        require(\\n            storageController.validDestination(tokenId, 1),\\n            'sticker contract not set'\\n        );\\n        require(\\n            sender() == temp.destinations[1],\\n            'Sender must be the sticker contract attached to this token'\\n        );\\n\\n        //if the value is less than 100 and we cannot split it up efficiently then do not incre\\n        if (value() == 0 || value() > 100)\\n            //increment\\n            royaltyController.incrementBalance(\\n                value(),\\n                royaltyController.SPLIT_TYPE_STICKER()\\n            );\\n        else revert('value given must be over 100, or zero');\\n    }\\n\\n    /// @notice Allows approved contracts to deposit royalty types\\n    function depositSystemRoyalty(\\n        uint32 royaltyType\\n    ) public payable onlyOnce onlyApproved {\\n        require(msg.value >= 0, 'not allowed to deposit zero values');\\n        require(\\n            royaltyType != royaltyController.SPLIT_TYPE_STICKER(),\\n            \\\"can't deposit sticker royalties here\\\"\\n        );\\n\\n        //increment\\n        royaltyController.incrementBalance(msg.value, royaltyType);\\n        //dont revert allow deposit\\n    }\\n\\n    /// @notice Gets the pathId of a token.\\n    /// @dev must be split up into chunks of 32\\n    function getPathId(uint32 tokenId) external view returns (uint256) {\\n        return storageController.get(tokenId).pathId;\\n    }\\n\\n    /// @notice Allows the ability for multiple tokens to be transfered at once.\\n    /// @dev must be split up into chunks of 32\\n    function transferBatch(\\n        uint256[] memory tokenIds,\\n        address destination\\n    ) public {\\n        require(tokenIds.length < 32, 'please split up into chunks of 32');\\n        for (uint256 i = 0; i < tokenIds.length; ) {\\n            safeTransferFrom(sender(), destination, tokenIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice See {ERC721}\\n    function beforeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        require(\\n            storageController.tokenFlag(uint32(tokenId), 'locked') != true,\\n            'This token is locked and needs to be unlocked before it can be transfered'\\n        );\\n\\n        //transfer it in storage\\n        storageController.transfer(to, uint32(tokenId));\\n\\n        if (!valuesController.isTrue('disableRegisteredTokens')) {\\n            storageController.addToRegisteredTokens(to, uint32(tokenId));\\n\\n            if (from != address(0x0))\\n                storageController.deleteFromRegisteredTokens(\\n                    from,\\n                    uint32(tokenId)\\n                );\\n        }\\n    }\\n\\n    /// @notice sets the token URI\\n    /// @dev you need to call this from an approved address for the token\\n    /// @param tokenId the tokenId\\n    /// @param json an IFPS link or a\\n    function setTokenURI(uint32 tokenId, string memory json) public {\\n        require(\\n            isApprovedOrOwner(sender(), tokenId),\\n            'is not Owner, approved or approved for all'\\n        );\\n        uri[tokenId] = json;\\n    }\\n\\n    /// @notice Mints a token and stores its data inside of the storage contract, increments royalty totals and emits event.\\n    /// @dev This is called after preview mint, implicit mint and normal mints to finish up the transaction. We also wipe previous previews the address might have secretly inside the storageController.set method.\\n    /// @param data the InfinityMint token data,\\n    /// @param mintReceiver the sender or what should be tx.origin address\\n    /// @param isPreviewMint is true if the mint was from a preview\\n    /// @param mintPrice the value of the msg\\n    function completeMint(\\n        InfinityMintObject.InfinityObject memory data,\\n        address mintReceiver,\\n        bool isPreviewMint,\\n        uint256 mintPrice\\n    ) private {\\n        //mint it\\n        ERC721.mint(mintReceiver, currentTokenId, data.mintData);\\n        //store it, also registers it for look up + deletes previous previews\\n        storageController.set(currentTokenId, data);\\n        setTokenURI(currentTokenId,'https://ipfs.io/ipfs/bafybeiec52bo6scqfwcqbvs4rdvs6ph2xjc5vactocim3cbcmlmupkd5z4/partytime_default_uri.json');\\n        //added for fast on chain look up on ganache basically, in a live environment registeredTokens should be disabled\\n        if (!valuesController.isTrue('disableRegisteredTokens'))\\n            storageController.addToRegisteredTokens(\\n                mintReceiver,\\n                currentTokenId\\n            );\\n        //deletes previews and preview timestamp so they can receive more previews\\n        storageController.deletePreview(\\n            mintReceiver,\\n            valuesController.tryGetValue('previewCount')\\n        );\\n\\n        //increment balance inside of royalty controller\\n        royaltyController.incrementBalance(\\n            mintPrice,\\n            royaltyController.SPLIT_TYPE_MINT()\\n        );\\n\\n        if (isPreviewMint) {\\n            //if true then its a preview mint\\n            emit TokenPreviewMinted(\\n                currentTokenId++,\\n                encode(data),\\n                mintReceiver\\n            );\\n            return;\\n        }\\n\\n        emit TokenMinted(currentTokenId++, encode(data), mintReceiver);\\n    }\\n\\n    /// @notice Mints a new ERC721 InfinityMint Token\\n    /// @dev Takes no arguments. You dont have to pay for the mint if you are approved (or the deployer)\\n    function _mint(bytes memory data) private {\\n        //check if mint is valid\\n        require(\\n            verifyMint(value(), !approved[sender()]),\\n            'failed mint check: mints are disabled, mints are at a max supply or you did not pay enough'\\n        );\\n        completeMint(\\n            minterController.mint(currentTokenId, sender(), data),\\n            sender(),\\n            false,\\n            value()\\n        );\\n    }\\n\\n    /// @notice checks the transaction to see if it is valid\\n    /// @dev checks if the price is the current token price and if mints are disabled and if the maxSupply hasnt been met\\n    /// @param mintPrice the value of the current message\\n    /// @param checkPrice if we should check the current price\\n    function verifyMint(\\n        uint256 mintPrice,\\n        bool checkPrice\\n    ) private view returns (bool) {\\n        if (!mintsEnabled) return false;\\n\\n        if (currentTokenId >= valuesController.tryGetValue('maxSupply'))\\n            return false;\\n\\n        if (checkPrice && mintPrice != royaltyController.tokenPrice())\\n            return false;\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xcb4f45c2f2b7afd00cc11e2f7f6c2f4cbab55f51915c1344d8423cde9214abc9\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport './InfinityMintUtil.sol';\\nimport './InfinityMintValues.sol';\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x0a87425c22c2712174729d193a7148fce4bd85244e381094211bf2b556894e07\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintStorage.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintObject.sol';\\nimport './Authentication.sol';\\n\\n/// @title InfinityMint storage controller\\n/// @author 0xTinman.eth\\n/// @notice Stores the outcomes of the mint process and previews and also unlock keys\\n/// @dev Attached to to an InfinityMint\\ncontract InfinityMintStorage is Authentication, InfinityMintObject {\\n    /// @notice previews\\n    mapping(address => mapping(uint256 => InfinityObject)) public previews;\\n    /// @notice previews timestamps of when new previews can be made\\n    mapping(address => uint256) public previewTimestamp;\\n    /// @notice all of the token data\\n    mapping(uint32 => InfinityObject) private tokens;\\n    /// @notice Address flags can be toggled and effect all of the tokens\\n    mapping(address => mapping(string => bool)) private flags;\\n    /// @notice a list of tokenFlags associated with the token\\n    mapping(uint256 => mapping(string => bool)) public tokenFlags;\\n    /// @notice a list of options\\n    mapping(address => mapping(string => string)) private options;\\n    /// @notice private mapping holding a list of tokens for owned by the address for quick look up\\n    mapping(address => uint32[]) private registeredTokens;\\n\\n    /// @notice returns true if the address is preview blocked and unable to receive more previews\\n    function getPreviewTimestamp(address addr) external view returns (uint256) {\\n        return previewTimestamp[addr];\\n    }\\n\\n    /// @notice sets a time in the future they an have more previews\\n    function setPreviewTimestamp(\\n        address addr,\\n        uint256 timestamp\\n    ) public onlyApproved {\\n        require(timestamp > block.timestamp, 'timestamp must be in the future');\\n        previewTimestamp[addr] = timestamp;\\n    }\\n\\n    /**\\n\\t\\t@notice Returns true if address in destinations array is valid,\\n\\t\\tdestinations array is managed by InfinityMintLinker and i used to associate contract destinations on chain with a token\\n\\t*/\\n    function hasDestinaton(\\n        uint32 tokenId,\\n        uint256 index\\n    ) external view returns (bool) {\\n        return\\n            tokens[tokenId].destinations.length < index &&\\n            tokens[tokenId].destinations[index] != address(0x0);\\n    }\\n\\n    /// @notice Allows those approved with the contract to directly force a token flag. The idea is a seperate contract would control immutable this way\\n    /// @dev NOTE: This can only be called by contracts to curb rugging potential\\n    function forceTokenFlag(\\n        uint256 tokenId,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        tokenFlags[tokenId][_flag] = position;\\n    }\\n\\n    //// @notice Allows the current token owner to toggle a flag on the token, for instance, locked flag being true will mean token cannot be transfered\\n    function setTokenFlag(\\n        uint256 tokenId,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        require(this.flag(tokenId, 'immutable') != true, 'token is immutable');\\n        require(\\n            !InfinityMintUtil.isEqual(bytes(_flag), 'immutable'),\\n            'token immutable/mutable state cannot be modified this way for security reasons'\\n        );\\n        tokenFlags[tokenId][_flag] = position;\\n    }\\n\\n    /// @notice returns the value of a flag\\n    function flag(\\n        uint256 tokenId,\\n        string memory _flag\\n    ) external view returns (bool) {\\n        return tokenFlags[tokenId][_flag];\\n    }\\n\\n    /// @notice sets an option for a users tokens\\n    /// @dev this is used for instance inside of tokenURI\\n    function setOption(\\n        address addr,\\n        string memory key,\\n        string memory option\\n    ) public onlyApproved {\\n        options[addr][key] = option;\\n    }\\n\\n    /// @notice deletes an option\\n    function deleteOption(address addr, string memory key) public onlyApproved {\\n        delete options[addr][key];\\n    }\\n\\n    /// @notice returns a global option for all the addresses tokens\\n    function getOption(\\n        address addr,\\n        string memory key\\n    ) external view returns (string memory) {\\n        return options[addr][key];\\n    }\\n\\n    //// @notice Allows the current token owner to toggle a flag on the token, for instance, locked flag being true will mean token cannot be transfered\\n    function setFlag(\\n        address addr,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        flags[addr][_flag] = position;\\n    }\\n\\n    function tokenFlag(\\n        uint32 tokenId,\\n        string memory _flag\\n    ) external view returns (bool) {\\n        return tokenFlags[tokenId][_flag];\\n    }\\n\\n    function validDestination(\\n        uint32 tokenId,\\n        uint256 index\\n    ) external view returns (bool) {\\n        return (tokens[tokenId].owner != address(0x0) &&\\n            tokens[tokenId].destinations.length != 0 &&\\n            index < tokens[tokenId].destinations.length &&\\n            tokens[tokenId].destinations[index] != address(0x0));\\n    }\\n\\n    /// @notice returns the value of a flag\\n    function flag(\\n        address addr,\\n        string memory _flag\\n    ) external view returns (bool) {\\n        return flags[addr][_flag];\\n    }\\n\\n    /// @notice returns address of the owner of this token\\n    /// @param tokenId the tokenId to get the owner of\\n    function getOwner(uint32 tokenId) public view returns (address) {\\n        return tokens[tokenId].owner;\\n    }\\n\\n    /// @notice returns an integer array containing the token ids owned by the owner address\\n    /// @dev NOTE: This will only track 256 tokens\\n    /// @param owner the owner to look for\\n    function getAllRegisteredTokens(\\n        address owner\\n    ) public view returns (uint32[] memory) {\\n        return registeredTokens[owner];\\n    }\\n\\n    /// @notice this method adds a tokenId from the registered tokens list which is kept for the owner. these methods are designed to allow limited data retrival functionality on local host environments\\n    /// @dev for local testing purposes mostly, to make it scalable the length is capped to 128. Tokens should be indexed by web2 server not on chain.\\n    /// @param owner the owner to add the token too\\n    /// @param tokenId the tokenId to add\\n    function addToRegisteredTokens(\\n        address owner,\\n        uint32 tokenId\\n    ) public onlyApproved {\\n        //if the l\\n        if (registeredTokens[owner].length < 256)\\n            registeredTokens[owner].push(tokenId);\\n    }\\n\\n    /// @notice Gets the amount of registered tokens\\n    /// @dev Tokens are indexable instead by their current positon inside of the owner wallets collection, returns a tokenId\\n    /// @param owner the owner to get the length of\\n    function getRegisteredTokenCount(\\n        address owner\\n    ) public view returns (uint256) {\\n        return registeredTokens[owner].length;\\n    }\\n\\n    /// @notice returns a token\\n    /// @dev returns an InfinityObject defined in {InfinityMintObject}\\n    /// @param tokenId the tokenId to get\\n    function get(uint32 tokenId) public view returns (InfinityObject memory) {\\n        if (tokens[tokenId].owner == address(0x0)) revert('invalid token');\\n\\n        return tokens[tokenId];\\n    }\\n\\n    /// @notice Sets the owner field in the token to another value\\n    function transfer(address to, uint32 tokenId) public onlyApproved {\\n        //set to new owner\\n        tokens[tokenId].owner = to;\\n    }\\n\\n    function set(\\n        uint32 tokenId,\\n        InfinityObject memory data\\n    ) public onlyApproved {\\n        require(data.owner != address(0x0), 'null owner');\\n        require(data.currentTokenId == tokenId, 'tokenID mismatch');\\n        tokens[tokenId] = data;\\n    }\\n\\n    /// @notice use normal set when can because of the checks it does before the set, this does no checks\\n    function setUnsafe(uint32 tokenId, bytes memory data) public onlyApproved {\\n        tokens[tokenId] = abi.decode(data, (InfinityObject));\\n    }\\n\\n    function setPreview(\\n        address owner,\\n        uint256 index,\\n        InfinityObject memory data\\n    ) public onlyApproved {\\n        previews[owner][index] = data;\\n    }\\n\\n    function getPreviewAt(\\n        address owner,\\n        uint256 index\\n    ) external view returns (InfinityObject memory) {\\n        require(\\n            previews[owner][index].owner != address(0x0),\\n            'invalid preview'\\n        );\\n\\n        return previews[owner][index];\\n    }\\n\\n    function findPreviews(\\n        address owner,\\n        uint256 previewCount\\n    ) public view onlyApproved returns (InfinityObject[] memory) {\\n        InfinityObject[] memory temp = new InfinityObject[](previewCount);\\n        for (uint256 i = 0; i < previewCount; ) {\\n            temp[i] = previews[owner][i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return temp;\\n    }\\n\\n    function deletePreview(\\n        address owner,\\n        uint256 previewCount\\n    ) public onlyApproved {\\n        for (uint256 i = 0; i < previewCount; ) {\\n            delete previews[owner][i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        delete previewTimestamp[owner];\\n    }\\n\\n    function deleteFromRegisteredTokens(\\n        address owner,\\n        uint32 tokenId\\n    ) public onlyApproved {\\n        uint256 length = registeredTokens[owner].length;\\n        for (uint256 i = 0; i < length; ) {\\n            if (registeredTokens[owner][i] == tokenId) {\\n                registeredTokens[owner][i] = registeredTokens[owner][\\n                    length - 1\\n                ];\\n                registeredTokens[owner].pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b74ba349ccc61b393fcab63b52de1ef8dde72c3335451a742eafa7cea99929\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(\\n        uint256 _i\\n    ) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return string.concat(directory, file, extension);\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2) external pure returns (bool) {\\n    if (s1.length != s2.length) return false;\\n    for (uint256 i = 0; i < s1.length; i++) {\\n        if (s1[i] != s2[i]) return false;\\n    }\\n    return true;\\n}\\n\\n}\\n\",\"keccak256\":\"0xd256bbb4e2a9534e9a21ba4ae8bbf755c254c7d2ba5bd65e099e27f27277e3bc\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert('Invalid Value');\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xfc6def9724b4ef9aa3ace6bafaa9fc232c65788adb1349c9ce5f1f9681c3b078\",\"license\":\"UNLICENSED\"},\"contracts/Minter.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './Authentication.sol';\\nimport './InfinityMintStorage.sol';\\nimport './Asset.sol';\\nimport './RandomNumber.sol';\\nimport './InfinityMintObject.sol';\\n\\n/// @title Minter Interface\\n/// @author 0xTinman.eth\\n/// @notice The purpose of this interface is to lay the foundation for a minter contract designed to produce a valid InfinityObject at the end of it\\n/// @dev\\nabstract contract Minter is Authentication {\\n    Asset public assetController;\\n    InfinityMintValues public valuesController;\\n    InfinityMintStorage public storageController;\\n    RandomNumber public randomNumberController;\\n\\n    /*\\n     */\\n    constructor(\\n        address valuesContract,\\n        address storageContract,\\n        address assetContract,\\n        address randomNumberContract\\n    ) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        storageController = InfinityMintStorage(storageContract);\\n        assetController = Asset(assetContract);\\n        randomNumberController = RandomNumber(randomNumberContract);\\n    }\\n\\n    function setAssetController(address assetContract) public onlyApproved {\\n        assetController = Asset(assetContract);\\n    }\\n\\n    function setStorageController(address storageContract) public onlyApproved {\\n        storageController = InfinityMintStorage(storageContract);\\n    }\\n\\n    function setRandomNumberController(address randomNumberContract)\\n        public\\n        onlyApproved\\n    {\\n        randomNumberController = RandomNumber(randomNumberContract);\\n    }\\n\\n    function mint(\\n        uint32 currentTokenId,\\n        address sender,\\n        bytes memory mintData\\n    ) public virtual returns (InfinityMintObject.InfinityObject memory);\\n\\n    /**\\n\\n     */\\n    function getPreview(uint32 currentTokenId, address sender)\\n        external\\n        virtual\\n        returns (uint256 previewCount);\\n\\n    /*\\n\\n    */\\n    function mintPreview(\\n        uint32 index,\\n        uint32 currentTokenId,\\n        address sender\\n    ) external virtual returns (InfinityMintObject.InfinityObject memory);\\n}\\n\",\"keccak256\":\"0x98510e85165cde71eafe3b871406ad752d39dcb4fb143e1e52fc1fbfdca8ec5f\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintValues.sol';\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author 0xTinman.eth\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue('randomessFactor');\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue('maxRandomNumber'), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x3902fef7c566f30b6c918fb1c69aeac606f44c065e86b3deba350ec6aea2c253\",\"license\":\"UNLICENSED\"},\"contracts/Royalty.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './Authentication.sol';\\n\\n/// @title InfinityMint Royalty Abstract Contract\\n/// @author 0xTinman.eth\\nabstract contract Royalty is Authentication {\\n    //globals\\n    InfinityMintValues internal valuesController;\\n    address public erc721Destination;\\n\\n    //payout values\\n    mapping(address => uint256) public values;\\n    mapping(uint256 => uint256) public freebies;\\n\\n    uint256 public tokenPrice;\\n    uint256 public originalTokenPrice;\\n    uint256 public lastTokenPrice;\\n    uint256 public stickerSplit;\\n\\n    uint8 public constant SPLIT_TYPE_MINT = 0;\\n    uint8 public constant SPLIT_TYPE_STICKER = 1;\\n\\n    uint256 internal remainder;\\n\\n    event DispensedRoyalty(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 newTotal\\n    );\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n\\n        tokenPrice =\\n            valuesController.tryGetValue('startingPrice') *\\n            valuesController.tryGetValue('baseTokenValue');\\n        lastTokenPrice =\\n            valuesController.tryGetValue('startingPrice') *\\n            valuesController.tryGetValue('baseTokenValue');\\n        originalTokenPrice =\\n            valuesController.tryGetValue('startingPrice') *\\n            valuesController.tryGetValue('baseTokenValue');\\n\\n        if (valuesController.tryGetValue('stickerSplit') > 100)\\n            revert('sticker split is a value over 100');\\n        stickerSplit = valuesController.tryGetValue('stickerSplit');\\n    }\\n\\n    function changePrice(uint256 _tokenPrice) public onlyDeployer {\\n        lastTokenPrice = tokenPrice;\\n        tokenPrice = _tokenPrice;\\n    }\\n\\n    function registerFree(uint256 splitType) public onlyApproved {\\n        freebies[splitType]++;\\n    }\\n\\n    function dispenseRoyalty(address addr)\\n        public\\n        onlyApproved\\n        onlyOnce\\n        returns (uint256 total)\\n    {\\n        if (values[addr] <= 0) revert('Invalid or Empty address');\\n\\n        total = values[addr];\\n        values[addr] = 0;\\n\\n        emit DispensedRoyalty(addr, total, values[addr]);\\n    }\\n\\n    function incrementBalance(uint256 value, uint256 typeOfSplit)\\n        external\\n        virtual;\\n}\\n\",\"keccak256\":\"0x1c1e5c430a749039843cd9d9472b47b34097fe55076c51e4b0a328f5ba0c0c7c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620051ec380380620051ec833981016040819052620000349162000276565b8551869086906200004d906005906020850190620000e6565b50805162000063906006906020840190620000e6565b505060078054336001600160a01b031991821681179092556000918252600960205260408220805460ff19166001179055600891909155600a805482166001600160a01b03978816179055600c805482169587169590951790945550600d80548416918516919091179055600b8054909216921691909117905550620003669050565b828054620000f49062000329565b90600052602060002090601f01602090048101928262000118576000855562000163565b82601f106200013357805160ff191683800117855562000163565b8280016001018555821562000163579182015b828111156200016357825182559160200191906001019062000146565b506200017192915062000175565b5090565b5b8082111562000171576000815560010162000176565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001b457600080fd5b81516001600160401b0380821115620001d157620001d16200018c565b604051601f8301601f19908116603f01168101908282118183101715620001fc57620001fc6200018c565b816040528381526020925086838588010111156200021957600080fd5b600091505b838210156200023d57858201830151818301840152908201906200021e565b838211156200024f5760008385830101525b9695505050505050565b80516001600160a01b03811681146200027157600080fd5b919050565b60008060008060008060c087890312156200029057600080fd5b86516001600160401b0380821115620002a857600080fd5b620002b68a838b01620001a2565b97506020890151915080821115620002cd57600080fd5b50620002dc89828a01620001a2565b955050620002ed6040880162000259565b9350620002fd6060880162000259565b92506200030d6080880162000259565b91506200031d60a0880162000259565b90509295509295509295565b600181811c908216806200033e57607f821691505b602082108114156200036057634e487b7160e01b600052602260045260246000fd5b50919050565b614e7680620003766000396000f3fe6080604052600436106102065760003560e01c80634f558e79116101145780634f558e79146104b457806354fd4d50146104d45780636352211e146105085780636bb54df21461052857806370a082311461053b5780637817d7c0146105715780637ff9b596146105925780638cc07eb1146105a75780638d6900a4146105c757806395d89b41146105e7578063a22cb465146105fc578063a2d6b3c51461061c578063b88d4fde1461063c578063c87b56dd1461065c578063c97caf1f1461067c578063d15d41501461069c578063d5f39488146106bc578063d8b964e6146106dc578063e985e9c51461070c578063ec2b46c31461072c578063f2fde38b1461074c578063fe684c0e1461076c57600080fd5b80629a9b7b1461020b57806301ffc9a7146102455780630202def11461027557806304d5c3911461029757806306fdde03146102aa578063081812fc146102cc578063095ea7b3146102f95780630c380cf014610319578063105c48131461033957806310a8c7a9146103595780631249c58b1461037957806318160ddd146103815780631dc9e28a146103a45780631ff87064146103b757806323b872dd146103d75780632bc9a6df146103f75780632edc48571461041757806331ed86d21461042c57806339e27d821461044c5780633ccfd60b1461045f57806342842e0e14610474578063430c208114610494575b600080fd5b34801561021757600080fd5b50600d5461022f90600160a01b900463ffffffff1681565b60405161023c9190613c43565b60405180910390f35b34801561025157600080fd5b50610265610260366004613c6a565b61078c565b604051901515815260200161023c565b34801561028157600080fd5b50610295610290366004613d45565b6107de565b005b6102956102a5366004613e09565b61087b565b3480156102b657600080fd5b506102bf610bd9565b60405161023c9190613e7e565b3480156102d857600080fd5b506102ec6102e7366004613e91565b610c6b565b60405161023c9190613eaa565b34801561030557600080fd5b50610295610314366004613ebe565b610c86565b34801561032557600080fd5b50600c546102ec906001600160a01b031681565b34801561034557600080fd5b50600d546102ec906001600160a01b031681565b34801561036557600080fd5b50610295610374366004613eea565b610dd6565b610295610e69565b34801561038d57600080fd5b50610396610f8b565b60405190815260200161023c565b6102956103b2366004613ffb565b611000565b3480156103c357600080fd5b506102956103d236600461402f565b611157565b3480156103e357600080fd5b506102956103f236600461407e565b6111ec565b34801561040357600080fd5b506102956104123660046140bf565b611367565b34801561042357600080fd5b506102956113fa565b34801561043857600080fd5b50610295610447366004613eea565b6117f2565b61029561045a366004613e09565b611885565b34801561046b57600080fd5b506102956119b7565b34801561048057600080fd5b5061029561048f36600461407e565b611c79565b3480156104a057600080fd5b506102656104af366004613ebe565b611c94565b3480156104c057600080fd5b506102656104cf366004613e91565b611cf3565b3480156104e057600080fd5b506102bf604051806040016040528060088152602001670c0b8d8e4b8c4b8d60c21b81525081565b34801561051457600080fd5b506102ec610523366004613e91565b611d10565b610295610536366004613e09565b611d75565b34801561054757600080fd5b5061039661055636600461411b565b6001600160a01b031660009081526004602052604090205490565b34801561057d57600080fd5b50600d5461026590600160c01b900460ff1681565b34801561059e57600080fd5b50610396611f39565b3480156105b357600080fd5b506103966105c2366004613e09565b611f83565b3480156105d357600080fd5b506102956105e2366004614146565b612006565b3480156105f357600080fd5b506102bf612068565b34801561060857600080fd5b50610295610617366004614163565b612077565b34801561062857600080fd5b50600b546102ec906001600160a01b031681565b34801561064857600080fd5b5061029561065736600461419c565b6120e4565b34801561066857600080fd5b506102bf610677366004613e91565b6120f6565b34801561068857600080fd5b506102956106973660046142f5565b612723565b3480156106a857600080fd5b506102656106b736600461411b565b612aae565b3480156106c857600080fd5b506007546102ec906001600160a01b031681565b3480156106e857600080fd5b506102656106f736600461411b565b60096020526000908152604090205460ff1681565b34801561071857600080fd5b506102656107273660046143d3565b612ae7565b34801561073857600080fd5b50600a546102ec906001600160a01b031681565b34801561075857600080fd5b5061029561076736600461411b565b612b15565b34801561077857600080fd5b50610295610787366004614163565b612bbb565b60006001600160e01b031982166380ac58cd60e01b14806107bd57506001600160e01b03198216635b5e139f60e01b145b806107d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b602082511061083e5760405162461bcd60e51b815260206004820152602160248201527f706c656173652073706c697420757020696e746f206368756e6b73206f6620336044820152601960f91b60648201526084015b60405180910390fd5b60005b82518110156108765761086e338385848151811061086157610861614401565b6020026020010151611c79565b600101610841565b505050565b60016008600082825461088e919061442d565b9091555050600854600a54604051636c51371d60e11b81526000916001600160a01b03169063d8a26e3a906108c7908690600401613c43565b600060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c91908101906145e7565b600a54604051631f7c4d3760e01b815263ffffffff86166004820152600160248201529192506001600160a01b031690631f7c4d3790604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061472c565b6109cd5760405162461bcd60e51b81526020600482015260186024820152771cdd1a58dad95c8818dbdb9d1c9858dd081b9bdd081cd95d60421b6044820152606401610835565b8061010001516001815181106109e5576109e5614401565b60200260200101516001600160a01b03166109fd3390565b6001600160a01b031614610a765760405162461bcd60e51b815260206004820152603a60248201527f53656e646572206d7573742062652074686520737469636b657220636f6e747260448201527930b1ba1030ba3a30b1b432b2103a37903a3434b9903a37b5b2b760311b6064820152608401610835565b341580610a835750606434115b15610b5d57600d5460408051635b6bf64160e01b815290516001600160a01b03909216916304caf36a9134918491635b6bf6419160048083019260209291908290030181865afa158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff9190614749565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381600087803b158015610b4057600080fd5b505af1158015610b54573d6000803e3d6000fd5b50505050610bb3565b60405162461bcd60e51b815260206004820152602560248201527f76616c756520676976656e206d757374206265206f766572203130302c206f72604482015264207a65726f60d81b6064820152608401610835565b506008548114610bd55760405162461bcd60e51b81526004016108359061476c565b5050565b606060058054610be89061478e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c149061478e565b8015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b5050505050905090565b6000908152600260205260409020546001600160a01b031690565b6000610c9182611d10565b9050806001600160a01b0316836001600160a01b03161415610cec5760405162461bcd60e51b815260206004820152601460248201527331b0b73737ba1030b8383937bb329037bbb732b960611b6044820152606401610835565b336001600160a01b0382161480610d085750610d088133612ae7565b610d7a5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610835565b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6007546001600160a01b03163314610e005760405162461bcd60e51b8152600401610835906147c9565b8051610e0b57600080fd5b60005b8151811015610bd557600160096000848481518110610e2f57610e2f614401565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610e0e565b600160086000828254610e7c919061442d565b9091555050600854600c546040516206259160e71b81526001600160a01b0390911690630312c88090610eb1906004016147ef565b602060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef2919061472c565b15610f4f5760405162461bcd60e51b815260206004820152602760248201527f6d757374206d696e74207769746820627974654d696e7420696e7374656164206044820152661bd9881b5a5b9d60ca1b6064820152608401610835565b610f6760405180602001604052806000815250612c96565b6008548114610f885760405162461bcd60e51b81526004016108359061476c565b50565b600c5460405163e7b6dac960e01b81526000916001600160a01b03169063e7b6dac990610fba90600401614811565b602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614834565b905090565b600160086000828254611013919061442d565b9091555050600854600c546040516206259160e71b81526001600160a01b0390911690630312c88090611048906004016147ef565b602060405180830381865afa158015611065573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611089919061472c565b6110e55760405162461bcd60e51b815260206004820152602760248201527f6d757374206d696e742077697468206d696e7420696e7374656164206f6620626044820152661e5d19535a5b9d60ca1b6064820152608401610835565b815161112d5760405162461bcd60e51b81526020600482015260176024820152766c656e677468206f66206279746573206973207a65726f60481b6044820152606401610835565b61113682612c96565b6008548114610bd55760405162461bcd60e51b81526004016108359061476c565b611167338363ffffffff16611c94565b6111c65760405162461bcd60e51b815260206004820152602a60248201527f6973206e6f74204f776e65722c20617070726f766564206f7220617070726f76604482015269195908199bdc88185b1b60b21b6064820152608401610835565b63ffffffff82166000908152600160209081526040909120825161087692840190613baa565b6111f63382611c94565b61123a5760405162461bcd60e51b81526020600482015260156024820152743737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152606401610835565b6001600160a01b03831661128a5760405162461bcd60e51b815260206004820152601760248201527673656e64696e6720746f206e756c6c206164647265737360481b6044820152606401610835565b611295838383612dce565b600081815260026020908152604080832080546001600160a01b03191690556001600160a01b0386168352600490915281208054600192906112d890849061484d565b90915550506001600160a01b038216600090815260046020526040812080546001929061130690849061442d565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b031633148061138f57503360009081526009602052604090205460ff165b6113ab5760405162461bcd60e51b815260040161083590614864565b600a80546001600160a01b039586166001600160a01b031991821617909155600c805494861694821694909417909355600d8054918516918416919091179055600b8054919093169116179055565b611405600080613092565b611479576040805162461bcd60e51b81526020600482015260248101919091527f6661696c6564206d696e7420636865636b3a206d696e7473206172652064697360448201527f61626c65642c206d696e7473206172652061742061206d617820737570706c796064820152608401610835565b600c5460405163e7b6dac960e01b81526000916001600160a01b03169063e7b6dac9906114a89060040161488a565b602060405180830381865afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190614834565b1161152e5760405162461bcd60e51b81526020600482015260156024820152741c1c995d9a595ddcc8185c9948191a5cd8589b1959605a1b6044820152606401610835565b600a546001600160a01b031663e5725968336040518263ffffffff1660e01b815260040161155c9190613eaa565b602060405180830381865afa158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d9190614834565b421161160c5760405162461bcd60e51b815260206004820152603860248201527f706c65617365206d696e74207072657669657773206f72207761697420756e746044820152770696c207072657669657720636f756e7465722069732075760441b6064820152608401610835565b600b54600d5460408051631a5dad5160e01b8152600160a01b90920463ffffffff166004830152336024830152516000926001600160a01b031691631a5dad51916044808301926020929190829003018187875af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190614834565b600c5460405163e7b6dac960e01b815260206004820152601660248201527570726576696577436f6f6c646f776e5365636f6e647360501b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190614834565b90508061173a5750603c5b600a546001600160a01b031663a22d583a33611756844261442d565b6040518363ffffffff1660e01b81526004016117739291906148b0565b600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050506117ac3390565b6001600160a01b03167f5714c3f2df77e79db463ef18f304b9c2c6b2502ed4d63b7cfdd9950416c92699836040516117e691815260200190565b60405180910390a25050565b6007546001600160a01b0316331461181c5760405162461bcd60e51b8152600401610835906147c9565b805161182757600080fd5b60005b8151811015610bd55760006009600084848151811061184b5761184b614401565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161182a565b600160086000828254611898919061442d565b9091555050600854346118ce8160096000335b6001600160a01b0316815260208101919091526040016000205460ff1615613092565b6119155760405162461bcd60e51b81526020600482015260186024820152773330b4b632b21036b4b73a103b32b934b334b1b0ba34b7b760411b6044820152606401610835565b600b54600d546040805163137655b160e31b815263ffffffff8781166004830152600160a01b909304909216602483015233604483015251610bb3926001600160a01b031691639bb2ad88916064808301926000929190829003018183875af1158015611986573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119ae91908101906145e7565b336001846131d3565b6001600860008282546119ca919061442d565b9091555050600854600d546040516354fe9fd760e01b81526000916001600160a01b0316906354fe9fd790611a03903390600401613eaa565b602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190614834565b905060008111611a8f5760405162461bcd60e51b81526020600482015260166024820152756e6f2062616c616e636520746f20776974686472617760501b6044820152606401610835565b6000611a9b824761484d565b1015611ae55760405162461bcd60e51b815260206004820152601960248201527863616e6e6f74206166666f726420746f20776974686472617760381b6044820152606401610835565b600d546001600160a01b031663e8953af2336040518263ffffffff1660e01b8152600401611b139190613eaa565b6020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190614834565b905060008111611bbe5760405162461bcd60e51b815260206004820152602d60248201527f76616c75652072657475726e65642066726f6d20726f79616c747920636f6e7460448201526c1c9bdb1b195c881a5cc8189859609a1b6064820152608401610835565b604051600090339083908381818185875af1925050503d8060008114611c00576040519150601f19603f3d011682016040523d82523d6000602084013e611c05565b606091505b5050905080611c565760405162461bcd60e51b815260206004820152601d60248201527f646964206e6f74207472616e73666572207375636365737366756c6c790000006044820152606401610835565b50506008548114610f885760405162461bcd60e51b81526004016108359061476c565b61087683838360405180602001604052806000815250613643565b600080611ca083611d10565b9050806001600160a01b0316846001600160a01b03161480611cc75750611cc78185612ae7565b80611ceb5750836001600160a01b0316611ce084610c6b565b6001600160a01b0316145b949350505050565b6000908152602081905260409020546001600160a01b0316151590565b6000611d1b82611cf3565b611d595760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610835565b506000908152602081905260409020546001600160a01b031690565b600160086000828254611d88919061442d565b90915550506008546007546001600160a01b0316331480611db857503360009081526009602052604090205460ff165b611dd45760405162461bcd60e51b815260040161083590614864565b600d60009054906101000a90046001600160a01b03166001600160a01b0316635b6bf6416040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190614749565b60ff168263ffffffff161415611eaf5760405162461bcd60e51b8152602060048201526024808201527f63616e2774206465706f73697420737469636b657220726f79616c74696573206044820152636865726560e01b6064820152608401610835565b600d5460405163026579b560e11b815234600482015263ffffffff841660248201526001600160a01b03909116906304caf36a90604401600060405180830381600087803b158015611f0057600080fd5b505af1158015611f14573d6000803e3d6000fd5b505050506008548114610bd55760405162461bcd60e51b81526004016108359061476c565b600d5460408051633ffcdacb60e11b815290516000926001600160a01b031691637ff9b5969160048083019260209291908290030181865afa158015610fd7573d6000803e3d6000fd5b600a54604051636c51371d60e11b81526000916001600160a01b03169063d8a26e3a90611fb4908590600401613c43565b600060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff991908101906145e7565b5163ffffffff1692915050565b6007546001600160a01b031633148061202e57503360009081526009602052604090205460ff165b61204a5760405162461bcd60e51b815260040161083590614864565b600d8054911515600160c01b0260ff60c01b19909216919091179055565b606060068054610be89061478e565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a35050565b6120f084848484613643565b50505050565b600d54606090600160a01b900463ffffffff1682106121575760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e55524920666f72206e6f6e2d6578697374656e7420746f6b656e006044820152606401610835565b6040518060a00160405280606b8152602001614dd6606b9139600a546040805163712a908d60e01b81523060048201526024810191909152600f60448201526e64656661756c74546f6b656e55524960881b60648201529192506000916001600160a01b039091169063712a908d90608401600060405180830381865afa1580156121e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220e91908101906148c9565b9050805160001461221d578091505b600061222884611d10565b6000858152600160205260408120805492935090916122469061478e565b80601f01602080910402602001604051908101604052809291908181526020018280546122729061478e565b80156122bf5780601f10612294576101008083540402835291602001916122bf565b820191906000526020600020905b8154815290600101906020018083116122a257829003601f168201915b5050600a5460408051636c17fd7960e01b815263ffffffff8c1660048201526024810191909152600d60448201526c666f726365546f6b656e55524960981b60648201529495506001600160a01b031693636c17fd79935060840191506123239050565b602060405180830381865afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612364919061472c565b80156123705750805115155b1561237d5780935061271b565b600a54604051633f08e8e360e11b81526001600160a01b0390911690637e11d1c6906123ad9085906004016148fd565b602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee919061472c565b806124655750600a54604051633f08e8e360e11b81526001600160a01b0390911690637e11d1c6906124249030906004016148fd565b602060405180830381865afa158015612441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612465919061472c565b1561271057600a54604051633f08e8e360e11b81526000916001600160a01b031690637e11d1c69061249b9086906004016148fd565b602060405180830381865afa1580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc919061472c565b6124e657306124e8565b825b600a5460405163712a908d60e01b81529192506000916001600160a01b039091169063712a908d906125499085906004016001600160a01b03919091168152604060208201819052600490820152631c9bdbdd60e21b606082015260800190565b600060405180830381865afa158015612566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261258e91908101906148c9565b600a80546040805163712a908d60e01b81526001600160a01b03878116600483015260248201929092526044810193909352690e4dedee8a6eaccccd2f60b31b6064840152929350600092169063712a908d90608401600060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261262991908101906148c9565b9050805160001480156126c85750600c546040516206259160e71b81526020600482015260136024820152720e4cadadeecca88caccc2ead8e8a6eaccccd2f606b1b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa1580156126a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c6919061472c565b155b156126eb5750604080518082019091526005815264173539b7b760d91b60208201525b81511561270857612705826126ff8a6136b3565b836137db565b96505b50505061271b565b80511561271b578093505b505050919050565b6007546001600160a01b031633148061274b57503360009081526009602052604090205460ff165b6127675760405162461bcd60e51b815260040161083590614864565b600c5460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061279590600401614811565b602060405180830381865afa1580156127b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d69190614834565b600d54600160a01b900463ffffffff1614156128505760405162461bcd60e51b815260206004820152603360248201527f6d617820737570706c7920686173206265656e2072656163686564207261697360448201527265206974206265666f7265206d696e74696e6760681b6064820152608401610835565b600c546040516206259160e71b815260206004820152600f60248201526e696e6372656d656e74616c4d6f646560881b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db919061472c565b806129685750600c546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612968919061472c565b15612a4c57600b60009054906101000a90046001600160a01b03166001600160a01b031663573f86006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e49190614932565b6001600160a01b0316638a25ad246129fd88600161494f565b6040518263ffffffff1660e01b8152600401612a199190613c43565b600060405180830381600087803b158015612a3357600080fd5b505af1158015612a47573d6000803e3d6000fd5b505050505b600d54612aa590612a9c90600160a01b900463ffffffff16888886868a8a8f6000604051908082528060200260200182016040528015612a96578160200160208202803683370190505b5061380a565b886000346131d3565b50505050505050565b6007546000906001600160a01b03838116911614806107d85750506001600160a01b031660009081526009602052604090205460ff1690565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6007546001600160a01b03163314612b3f5760405162461bcd60e51b8152600401610835906147c9565b600780546001600160a01b03908116600090815260096020526040808220805460ff1990811690915584546001600160a01b03191693861693841790945582825280822080549094166001179093559151909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6007546001600160a01b03163314612be55760405162461bcd60e51b8152600401610835906147c9565b6007546001600160a01b0383811691161415612c3c5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610835565b6001600160a01b038216600081815260096020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d34169591016120d8565b612ca43460096000336118ab565b612d395760405162461bcd60e51b815260206004820152605a60248201527f6661696c6564206d696e7420636865636b3a206d696e7473206172652064697360448201527f61626c65642c206d696e7473206172652061742061206d617820737570706c79606482015279040dee440f2deea40c8d2c840dcdee840e0c2f240cadcdeeaced60331b608482015260a401610835565b600b54600d54604051631bc8bf9360e01b8152610f88926001600160a01b031691631bc8bf9391612d7e91600160a01b900463ffffffff169033908790600401614977565b6000604051808303816000875af1158015612d9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dc591908101906145e7565b336000346131d3565b600a5460408051636c17fd7960e01b815263ffffffff84166004820152602481019190915260066044820152651b1bd8dad95960d21b60648201526001600160a01b0390911690636c17fd7990608401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f919061472c565b151560011415612ee95760405162461bcd60e51b815260206004820152604960248201527f5468697320746f6b656e206973206c6f636b656420616e64206e65656473207460448201527f6f20626520756e6c6f636b6564206265666f72652069742063616e20626520746064820152681c985b9cd9995c995960ba1b608482015260a401610835565b600a546040516320025d2160e21b81526001600160a01b0390911690638009748490612f1b90859085906004016149a7565b600060405180830381600087803b158015612f3557600080fd5b505af1158015612f49573d6000803e3d6000fd5b5050600c546040516206259160e71b81526001600160a01b039091169250630312c8809150612f7a906004016149c6565b602060405180830381865afa158015612f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbb919061472c565b61087657600a54604051634fe61faf60e11b81526001600160a01b0390911690639fcc3f5e90612ff190859085906004016149a7565b600060405180830381600087803b15801561300b57600080fd5b505af115801561301f573d6000803e3d6000fd5b505050506001600160a01b0383161561087657600a54604051634f2609c760e11b81526001600160a01b0390911690639e4c138e9061306490869085906004016149a7565b600060405180830381600087803b15801561307e57600080fd5b505af1158015612aa5573d6000803e3d6000fd5b600d54600090600160c01b900460ff166130ae575060006107d8565b600c5460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906130dc90600401614811565b602060405180830381865afa1580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d9190614834565b600d54600160a01b900463ffffffff161061313a575060006107d8565b8180156131bd5750600d60009054906101000a90046001600160a01b03166001600160a01b0316637ff9b5966040518163ffffffff1660e01b8152600401602060405180830381865afa158015613195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b99190614834565b8314155b156131ca575060006107d8565b50600192915050565b6131fa83600d60149054906101000a900463ffffffff1663ffffffff168660a001516138d0565b600a54600d5460405163c28cf06160e01b81526001600160a01b039092169163c28cf0619161323c91600160a01b90910463ffffffff16908890600401614ac6565b600060405180830381600087803b15801561325657600080fd5b505af115801561326a573d6000803e3d6000fd5b505050506132a2600d60149054906101000a900463ffffffff166040518060a00160405280606b8152602001614dd6606b9139611157565b600c546040516206259160e71b81526001600160a01b0390911690630312c880906132cf906004016149c6565b602060405180830381865afa1580156132ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613310919061472c565b61338857600a54600d54604051634fe61faf60e11b81526001600160a01b0390921691639fcc3f5e91613355918791600160a01b900463ffffffff16906004016149a7565b600060405180830381600087803b15801561336f57600080fd5b505af1158015613383573d6000803e3d6000fd5b505050505b600a54600c5460405163e7b6dac960e01b81526001600160a01b0392831692638ff58aa692879291169063e7b6dac9906133c49060040161488a565b602060405180830381865afa1580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134059190614834565b6040518363ffffffff1660e01b81526004016134229291906148b0565b600060405180830381600087803b15801561343c57600080fd5b505af1158015613450573d6000803e3d6000fd5b5050600d5460408051631d4e010f60e11b815290516001600160a01b0390921693506304caf36a925084918491633a9c021e9160048083019260209291908290030181865afa1580156134a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cb9190614749565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381600087803b15801561350c57600080fd5b505af1158015613520573d6000803e3d6000fd5b5050505081156135b657600d80546001600160a01b038516917f8f2c63d2fb7a6762d60b5c413fcf4212bc46912b94c8b65172d780f1a2515a4491600160a01b900463ffffffff1690601461357483614bc9565b91906101000a81548163ffffffff021916908363ffffffff16021790555061359b876139f1565b6040516135a9929190614bed565b60405180910390a26120f0565b600d80546001600160a01b038516917fef35cf177b2baefe03d86d3f735f32215ea0d2fb2f0548bc5f45ea6950e6889491600160a01b900463ffffffff1690601461360083614bc9565b91906101000a81548163ffffffff021916908363ffffffff160217905550613627876139f1565b604051613635929190614bed565b60405180910390a250505050565b61364e8484846111ec565b61365b3385858585613a68565b6120f05760405162461bcd60e51b815260206004820152602360248201527f45524337323120526563656976657220436f6e6669726d6174696f6e2049732060448201526210985960ea1b6064820152608401610835565b6060816136d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561370157806136eb81614c0c565b91506136fa9050600a83614c27565b91506136db565b6000816001600160401b0381111561371b5761371b613c8e565b6040519080825280601f01601f191660200182016040528015613745576020820181803683370190505b509050815b85156137d25761375b60018261484d565b9050600061376a600a88614c27565b61377590600a614c49565b61377f908861484d565b61378a906030614c68565b905060008160f81b9050808484815181106137a7576137a7614401565b60200101906001600160f81b031916908160001a9053506137c9600a89614c27565b9750505061374a565b50949350505050565b60608383836040516020016137f293929190614c8d565b60405160208183030381529060405290509392505050565b613874604051806101200160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160608152602001606081525090565b50604080516101208101825263ffffffff998a168152978916602089015298909716978601979097526001600160a01b039096166060850152608084015260a083019490945260c082015260e081019290925261010082015290565b6001600160a01b0383166139115760405162461bcd60e51b81526020600482015260086024820152670c1e0c081b5a5b9d60c21b6044820152606401610835565b61391a82611cf3565b156139585760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610835565b6001600160a01b038316600090815260046020526040812080546001929061398190849061442d565b909155505060008281526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46139e83330858585613a68565b61087657600080fd5b606081600001518260200151836040015184606001518560800151604051602001613a1c9190614cd0565b60408051601f198184030181529082905260a088015160c089015160e08a01516101008b0151613a529998979695602001614ce3565b6040516020818303038152906040529050919050565b6000833b613a7857506001613ba1565b604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613aaa908990899088908890600401614d85565b6020604051808303816000875af1925050508015613ae5575060408051601f3d908101601f19168201909252613ae291810190614db8565b60015b613b8b573d808015613b13576040519150601f19603f3d011682016040523d82523d6000602084013e613b18565b606091505b508051613b835760405162461bcd60e51b815260206004820152603360248201527f5468697320636f6e747261637420646f6573206e6f7420696d706c656d656e746044820152721030b71024a2a9219b9918a932b1b2b4bb32b960691b6064820152608401610835565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b95945050505050565b828054613bb69061478e565b90600052602060002090601f016020900481019282613bd85760008555613c1e565b82601f10613bf157805160ff1916838001178555613c1e565b82800160010185558215613c1e579182015b82811115613c1e578251825591602001919060010190613c03565b50613c2a929150613c2e565b5090565b5b80821115613c2a5760008155600101613c2f565b63ffffffff91909116815260200190565b6001600160e01b031981168114610f8857600080fd5b600060208284031215613c7c57600080fd5b8135613c8781613c54565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613cc757613cc7613c8e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613cf557613cf5613c8e565b604052919050565b60006001600160401b03821115613d1657613d16613c8e565b5060051b60200190565b6001600160a01b0381168114610f8857600080fd5b8035613d4081613d20565b919050565b60008060408385031215613d5857600080fd5b82356001600160401b03811115613d6e57600080fd5b8301601f81018513613d7f57600080fd5b80356020613d94613d8f83613cfd565b613ccd565b82815260059290921b83018101918181019088841115613db357600080fd5b938201935b83851015613dd157843582529382019390820190613db8565b9550613de09050868201613d35565b93505050509250929050565b63ffffffff81168114610f8857600080fd5b8035613d4081613dec565b600060208284031215613e1b57600080fd5b8135613c8781613dec565b60005b83811015613e41578181015183820152602001613e29565b838111156120f05750506000910152565b60008151808452613e6a816020860160208601613e26565b601f01601f19169290920160200192915050565b602081526000613c876020830184613e52565b600060208284031215613ea357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215613ed157600080fd5b8235613edc81613d20565b946020939093013593505050565b60006020808385031215613efd57600080fd5b82356001600160401b03811115613f1357600080fd5b8301601f81018513613f2457600080fd5b8035613f32613d8f82613cfd565b81815260059190911b82018301908381019087831115613f5157600080fd5b928401925b82841015613f78578335613f6981613d20565b82529284019290840190613f56565b979650505050505050565b60006001600160401b03821115613f9c57613f9c613c8e565b50601f01601f191660200190565b600082601f830112613fbb57600080fd5b8135613fc9613d8f82613f83565b818152846020838601011115613fde57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561400d57600080fd5b81356001600160401b0381111561402357600080fd5b611ceb84828501613faa565b6000806040838503121561404257600080fd5b823561404d81613dec565b915060208301356001600160401b0381111561406857600080fd5b61407485828601613faa565b9150509250929050565b60008060006060848603121561409357600080fd5b833561409e81613d20565b925060208401356140ae81613d20565b929592945050506040919091013590565b600080600080608085870312156140d557600080fd5b84356140e081613d20565b935060208501356140f081613d20565b9250604085013561410081613d20565b9150606085013561411081613d20565b939692955090935050565b60006020828403121561412d57600080fd5b8135613c8781613d20565b8015158114610f8857600080fd5b60006020828403121561415857600080fd5b8135613c8781614138565b6000806040838503121561417657600080fd5b823561418181613d20565b9150602083013561419181614138565b809150509250929050565b600080600080608085870312156141b257600080fd5b84356141bd81613d20565b935060208501356141cd81613d20565b92506040850135915060608501356001600160401b038111156141ef57600080fd5b6141fb87828801613faa565b91505092959194509250565b600082601f83011261421857600080fd5b81356020614228613d8f83613cfd565b82815260059290921b8401810191818101908684111561424757600080fd5b8286015b8481101561426b57803561425e81613dec565b835291830191830161424b565b509695505050505050565b600082601f83011261428757600080fd5b81356020614297613d8f83613cfd565b82815260059290921b840181019181810190868411156142b657600080fd5b8286015b8481101561426b5780356001600160401b038111156142d95760008081fd5b6142e78986838b0101613faa565b8452509183019183016142ba565b600080600080600080600060e0888a03121561431057600080fd5b61431988613d35565b965061432760208901613dfe565b955061433560408901613dfe565b945060608801356001600160401b038082111561435157600080fd5b61435d8b838c01614207565b955060808a013591508082111561437357600080fd5b61437f8b838c01613faa565b945060a08a013591508082111561439557600080fd5b6143a18b838c01614207565b935060c08a01359150808211156143b757600080fd5b506143c48a828b01614276565b91505092959891949750929550565b600080604083850312156143e657600080fd5b82356143f181613d20565b9150602083013561419181613d20565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561444057614440614417565b500190565b8051613d4081613dec565b8051613d4081613d20565b600082601f83011261446c57600080fd5b8151602061447c613d8f83613cfd565b82815260059290921b8401810191818101908684111561449b57600080fd5b8286015b8481101561426b5780516144b281613dec565b835291830191830161449f565b600082601f8301126144d057600080fd5b81516144de613d8f82613f83565b8181528460208386010111156144f357600080fd5b611ceb826020830160208701613e26565b600082601f83011261451557600080fd5b81516020614525613d8f83613cfd565b82815260059290921b8401810191818101908684111561454457600080fd5b8286015b8481101561426b5780516001600160401b038111156145675760008081fd5b6145758986838b01016144bf565b845250918301918301614548565b600082601f83011261459457600080fd5b815160206145a4613d8f83613cfd565b82815260059290921b840181019181810190868411156145c357600080fd5b8286015b8481101561426b5780516145da81613d20565b83529183019183016145c7565b6000602082840312156145f957600080fd5b81516001600160401b038082111561461057600080fd5b90830190610120828603121561462557600080fd5b61462d613ca4565b61463683614445565b815261464460208401614445565b602082015261465560408401614445565b604082015261466660608401614450565b606082015260808301518281111561467d57600080fd5b6146898782860161445b565b60808301525060a0830151828111156146a157600080fd5b6146ad878286016144bf565b60a08301525060c0830151828111156146c557600080fd5b6146d18782860161445b565b60c08301525060e0830151828111156146e957600080fd5b6146f587828601614504565b60e083015250610100808401518381111561470f57600080fd5b61471b88828701614583565b918301919091525095945050505050565b60006020828403121561473e57600080fd5b8151613c8781614138565b60006020828403121561475b57600080fd5b815160ff81168114613c8757600080fd5b60208082526008908201526772652d656e74727960c01b604082015260600190565b600181811c908216806147a257607f821691505b602082108114156147c357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b602080825260089082015267189e5d19535a5b9d60c21b604082015260600190565b6020808252600990820152686d6178537570706c7960b81b604082015260600190565b60006020828403121561484657600080fd5b5051919050565b60008282101561485f5761485f614417565b500390565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252600c908201526b1c1c995d9a595dd0dbdd5b9d60a21b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156148db57600080fd5b81516001600160401b038111156148f157600080fd5b611ceb848285016144bf565b6001600160a01b03919091168152604060208201819052600990820152681d5cda5b99d49bdbdd60ba1b606082015260800190565b60006020828403121561494457600080fd5b8151613c8781613d20565b600063ffffffff80831681851680830382111561496e5761496e614417565b01949350505050565b63ffffffff841681526001600160a01b0383166020820152606060408201819052600090613ba190830184613e52565b6001600160a01b0392909216825263ffffffff16602082015260400190565b60208082526017908201527664697361626c6552656769737465726564546f6b656e7360481b604082015260600190565b600081518084526020808501945080840160005b83811015614a2d57815163ffffffff1687529582019590820190600101614a0b565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614a80578284038952614a6e848351613e52565b98850198935090840190600101614a56565b5091979650505050505050565b600081518084526020808501945080840160005b83811015614a2d5781516001600160a01b031687529582019590820190600101614aa1565b63ffffffff8316815260406020820152614ae960408201835163ffffffff169052565b60006020830151614b02606084018263ffffffff169052565b50604083015163ffffffff811660808401525060608301516001600160a01b03811660a08401525060808301516101208060c0850152614b466101608501836149f7565b915060a0850151603f19808685030160e0870152614b648483613e52565b935060c08701519150610100818786030181880152614b8385846149f7565b945060e08801519250818786030184880152614b9f8584614a38565b94508088015193505080868503016101408701525050614bbf8282614a8d565b9695505050505050565b600063ffffffff80831681811415614be357614be3614417565b6001019392505050565b63ffffffff83168152604060208201526000611ceb6040830184613e52565b6000600019821415614c2057614c20614417565b5060010190565b600082614c4457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614c6357614c63614417565b500290565b600060ff821660ff84168060ff03821115614c8557614c85614417565b019392505050565b60008451614c9f818460208901613e26565b845190830190614cb3818360208901613e26565b8451910190614cc6818360208801613e26565b0195945050505050565b602081526000613c8760208301846149f7565b63ffffffff8a811682528981166020830152881660408201526001600160a01b038716606082015261012060808201819052600090614d2483820189613e52565b905082810360a0840152614d388188613e52565b905082810360c0840152614d4c81876149f7565b905082810360e0840152614d608186614a38565b9050828103610100840152614d758185614a8d565b9c9b505050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614bbf90830184613e52565b600060208284031215614dca57600080fd5b8151613c8781613c5456fe68747470733a2f2f697066732e696f2f697066732f6261667962656965633532626f3673637166776371627673347264767336706832786a6335766163746f63696d336362636d6c6d75706b64357a342f706172747974696d655f64656661756c745f7572692e6a736f6ea26469706673582212209f0601b3a7b1940275f4380e6e74305ee551f4b0e711fac50f3f60b0a96f411a64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102065760003560e01c80634f558e79116101145780634f558e79146104b457806354fd4d50146104d45780636352211e146105085780636bb54df21461052857806370a082311461053b5780637817d7c0146105715780637ff9b596146105925780638cc07eb1146105a75780638d6900a4146105c757806395d89b41146105e7578063a22cb465146105fc578063a2d6b3c51461061c578063b88d4fde1461063c578063c87b56dd1461065c578063c97caf1f1461067c578063d15d41501461069c578063d5f39488146106bc578063d8b964e6146106dc578063e985e9c51461070c578063ec2b46c31461072c578063f2fde38b1461074c578063fe684c0e1461076c57600080fd5b80629a9b7b1461020b57806301ffc9a7146102455780630202def11461027557806304d5c3911461029757806306fdde03146102aa578063081812fc146102cc578063095ea7b3146102f95780630c380cf014610319578063105c48131461033957806310a8c7a9146103595780631249c58b1461037957806318160ddd146103815780631dc9e28a146103a45780631ff87064146103b757806323b872dd146103d75780632bc9a6df146103f75780632edc48571461041757806331ed86d21461042c57806339e27d821461044c5780633ccfd60b1461045f57806342842e0e14610474578063430c208114610494575b600080fd5b34801561021757600080fd5b50600d5461022f90600160a01b900463ffffffff1681565b60405161023c9190613c43565b60405180910390f35b34801561025157600080fd5b50610265610260366004613c6a565b61078c565b604051901515815260200161023c565b34801561028157600080fd5b50610295610290366004613d45565b6107de565b005b6102956102a5366004613e09565b61087b565b3480156102b657600080fd5b506102bf610bd9565b60405161023c9190613e7e565b3480156102d857600080fd5b506102ec6102e7366004613e91565b610c6b565b60405161023c9190613eaa565b34801561030557600080fd5b50610295610314366004613ebe565b610c86565b34801561032557600080fd5b50600c546102ec906001600160a01b031681565b34801561034557600080fd5b50600d546102ec906001600160a01b031681565b34801561036557600080fd5b50610295610374366004613eea565b610dd6565b610295610e69565b34801561038d57600080fd5b50610396610f8b565b60405190815260200161023c565b6102956103b2366004613ffb565b611000565b3480156103c357600080fd5b506102956103d236600461402f565b611157565b3480156103e357600080fd5b506102956103f236600461407e565b6111ec565b34801561040357600080fd5b506102956104123660046140bf565b611367565b34801561042357600080fd5b506102956113fa565b34801561043857600080fd5b50610295610447366004613eea565b6117f2565b61029561045a366004613e09565b611885565b34801561046b57600080fd5b506102956119b7565b34801561048057600080fd5b5061029561048f36600461407e565b611c79565b3480156104a057600080fd5b506102656104af366004613ebe565b611c94565b3480156104c057600080fd5b506102656104cf366004613e91565b611cf3565b3480156104e057600080fd5b506102bf604051806040016040528060088152602001670c0b8d8e4b8c4b8d60c21b81525081565b34801561051457600080fd5b506102ec610523366004613e91565b611d10565b610295610536366004613e09565b611d75565b34801561054757600080fd5b5061039661055636600461411b565b6001600160a01b031660009081526004602052604090205490565b34801561057d57600080fd5b50600d5461026590600160c01b900460ff1681565b34801561059e57600080fd5b50610396611f39565b3480156105b357600080fd5b506103966105c2366004613e09565b611f83565b3480156105d357600080fd5b506102956105e2366004614146565b612006565b3480156105f357600080fd5b506102bf612068565b34801561060857600080fd5b50610295610617366004614163565b612077565b34801561062857600080fd5b50600b546102ec906001600160a01b031681565b34801561064857600080fd5b5061029561065736600461419c565b6120e4565b34801561066857600080fd5b506102bf610677366004613e91565b6120f6565b34801561068857600080fd5b506102956106973660046142f5565b612723565b3480156106a857600080fd5b506102656106b736600461411b565b612aae565b3480156106c857600080fd5b506007546102ec906001600160a01b031681565b3480156106e857600080fd5b506102656106f736600461411b565b60096020526000908152604090205460ff1681565b34801561071857600080fd5b506102656107273660046143d3565b612ae7565b34801561073857600080fd5b50600a546102ec906001600160a01b031681565b34801561075857600080fd5b5061029561076736600461411b565b612b15565b34801561077857600080fd5b50610295610787366004614163565b612bbb565b60006001600160e01b031982166380ac58cd60e01b14806107bd57506001600160e01b03198216635b5e139f60e01b145b806107d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b602082511061083e5760405162461bcd60e51b815260206004820152602160248201527f706c656173652073706c697420757020696e746f206368756e6b73206f6620336044820152601960f91b60648201526084015b60405180910390fd5b60005b82518110156108765761086e338385848151811061086157610861614401565b6020026020010151611c79565b600101610841565b505050565b60016008600082825461088e919061442d565b9091555050600854600a54604051636c51371d60e11b81526000916001600160a01b03169063d8a26e3a906108c7908690600401613c43565b600060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c91908101906145e7565b600a54604051631f7c4d3760e01b815263ffffffff86166004820152600160248201529192506001600160a01b031690631f7c4d3790604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061472c565b6109cd5760405162461bcd60e51b81526020600482015260186024820152771cdd1a58dad95c8818dbdb9d1c9858dd081b9bdd081cd95d60421b6044820152606401610835565b8061010001516001815181106109e5576109e5614401565b60200260200101516001600160a01b03166109fd3390565b6001600160a01b031614610a765760405162461bcd60e51b815260206004820152603a60248201527f53656e646572206d7573742062652074686520737469636b657220636f6e747260448201527930b1ba1030ba3a30b1b432b2103a37903a3434b9903a37b5b2b760311b6064820152608401610835565b341580610a835750606434115b15610b5d57600d5460408051635b6bf64160e01b815290516001600160a01b03909216916304caf36a9134918491635b6bf6419160048083019260209291908290030181865afa158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff9190614749565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381600087803b158015610b4057600080fd5b505af1158015610b54573d6000803e3d6000fd5b50505050610bb3565b60405162461bcd60e51b815260206004820152602560248201527f76616c756520676976656e206d757374206265206f766572203130302c206f72604482015264207a65726f60d81b6064820152608401610835565b506008548114610bd55760405162461bcd60e51b81526004016108359061476c565b5050565b606060058054610be89061478e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c149061478e565b8015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b5050505050905090565b6000908152600260205260409020546001600160a01b031690565b6000610c9182611d10565b9050806001600160a01b0316836001600160a01b03161415610cec5760405162461bcd60e51b815260206004820152601460248201527331b0b73737ba1030b8383937bb329037bbb732b960611b6044820152606401610835565b336001600160a01b0382161480610d085750610d088133612ae7565b610d7a5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610835565b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6007546001600160a01b03163314610e005760405162461bcd60e51b8152600401610835906147c9565b8051610e0b57600080fd5b60005b8151811015610bd557600160096000848481518110610e2f57610e2f614401565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610e0e565b600160086000828254610e7c919061442d565b9091555050600854600c546040516206259160e71b81526001600160a01b0390911690630312c88090610eb1906004016147ef565b602060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef2919061472c565b15610f4f5760405162461bcd60e51b815260206004820152602760248201527f6d757374206d696e74207769746820627974654d696e7420696e7374656164206044820152661bd9881b5a5b9d60ca1b6064820152608401610835565b610f6760405180602001604052806000815250612c96565b6008548114610f885760405162461bcd60e51b81526004016108359061476c565b50565b600c5460405163e7b6dac960e01b81526000916001600160a01b03169063e7b6dac990610fba90600401614811565b602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614834565b905090565b600160086000828254611013919061442d565b9091555050600854600c546040516206259160e71b81526001600160a01b0390911690630312c88090611048906004016147ef565b602060405180830381865afa158015611065573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611089919061472c565b6110e55760405162461bcd60e51b815260206004820152602760248201527f6d757374206d696e742077697468206d696e7420696e7374656164206f6620626044820152661e5d19535a5b9d60ca1b6064820152608401610835565b815161112d5760405162461bcd60e51b81526020600482015260176024820152766c656e677468206f66206279746573206973207a65726f60481b6044820152606401610835565b61113682612c96565b6008548114610bd55760405162461bcd60e51b81526004016108359061476c565b611167338363ffffffff16611c94565b6111c65760405162461bcd60e51b815260206004820152602a60248201527f6973206e6f74204f776e65722c20617070726f766564206f7220617070726f76604482015269195908199bdc88185b1b60b21b6064820152608401610835565b63ffffffff82166000908152600160209081526040909120825161087692840190613baa565b6111f63382611c94565b61123a5760405162461bcd60e51b81526020600482015260156024820152743737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152606401610835565b6001600160a01b03831661128a5760405162461bcd60e51b815260206004820152601760248201527673656e64696e6720746f206e756c6c206164647265737360481b6044820152606401610835565b611295838383612dce565b600081815260026020908152604080832080546001600160a01b03191690556001600160a01b0386168352600490915281208054600192906112d890849061484d565b90915550506001600160a01b038216600090815260046020526040812080546001929061130690849061442d565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b031633148061138f57503360009081526009602052604090205460ff165b6113ab5760405162461bcd60e51b815260040161083590614864565b600a80546001600160a01b039586166001600160a01b031991821617909155600c805494861694821694909417909355600d8054918516918416919091179055600b8054919093169116179055565b611405600080613092565b611479576040805162461bcd60e51b81526020600482015260248101919091527f6661696c6564206d696e7420636865636b3a206d696e7473206172652064697360448201527f61626c65642c206d696e7473206172652061742061206d617820737570706c796064820152608401610835565b600c5460405163e7b6dac960e01b81526000916001600160a01b03169063e7b6dac9906114a89060040161488a565b602060405180830381865afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190614834565b1161152e5760405162461bcd60e51b81526020600482015260156024820152741c1c995d9a595ddcc8185c9948191a5cd8589b1959605a1b6044820152606401610835565b600a546001600160a01b031663e5725968336040518263ffffffff1660e01b815260040161155c9190613eaa565b602060405180830381865afa158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d9190614834565b421161160c5760405162461bcd60e51b815260206004820152603860248201527f706c65617365206d696e74207072657669657773206f72207761697420756e746044820152770696c207072657669657720636f756e7465722069732075760441b6064820152608401610835565b600b54600d5460408051631a5dad5160e01b8152600160a01b90920463ffffffff166004830152336024830152516000926001600160a01b031691631a5dad51916044808301926020929190829003018187875af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190614834565b600c5460405163e7b6dac960e01b815260206004820152601660248201527570726576696577436f6f6c646f776e5365636f6e647360501b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190614834565b90508061173a5750603c5b600a546001600160a01b031663a22d583a33611756844261442d565b6040518363ffffffff1660e01b81526004016117739291906148b0565b600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050506117ac3390565b6001600160a01b03167f5714c3f2df77e79db463ef18f304b9c2c6b2502ed4d63b7cfdd9950416c92699836040516117e691815260200190565b60405180910390a25050565b6007546001600160a01b0316331461181c5760405162461bcd60e51b8152600401610835906147c9565b805161182757600080fd5b60005b8151811015610bd55760006009600084848151811061184b5761184b614401565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161182a565b600160086000828254611898919061442d565b9091555050600854346118ce8160096000335b6001600160a01b0316815260208101919091526040016000205460ff1615613092565b6119155760405162461bcd60e51b81526020600482015260186024820152773330b4b632b21036b4b73a103b32b934b334b1b0ba34b7b760411b6044820152606401610835565b600b54600d546040805163137655b160e31b815263ffffffff8781166004830152600160a01b909304909216602483015233604483015251610bb3926001600160a01b031691639bb2ad88916064808301926000929190829003018183875af1158015611986573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119ae91908101906145e7565b336001846131d3565b6001600860008282546119ca919061442d565b9091555050600854600d546040516354fe9fd760e01b81526000916001600160a01b0316906354fe9fd790611a03903390600401613eaa565b602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190614834565b905060008111611a8f5760405162461bcd60e51b81526020600482015260166024820152756e6f2062616c616e636520746f20776974686472617760501b6044820152606401610835565b6000611a9b824761484d565b1015611ae55760405162461bcd60e51b815260206004820152601960248201527863616e6e6f74206166666f726420746f20776974686472617760381b6044820152606401610835565b600d546001600160a01b031663e8953af2336040518263ffffffff1660e01b8152600401611b139190613eaa565b6020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190614834565b905060008111611bbe5760405162461bcd60e51b815260206004820152602d60248201527f76616c75652072657475726e65642066726f6d20726f79616c747920636f6e7460448201526c1c9bdb1b195c881a5cc8189859609a1b6064820152608401610835565b604051600090339083908381818185875af1925050503d8060008114611c00576040519150601f19603f3d011682016040523d82523d6000602084013e611c05565b606091505b5050905080611c565760405162461bcd60e51b815260206004820152601d60248201527f646964206e6f74207472616e73666572207375636365737366756c6c790000006044820152606401610835565b50506008548114610f885760405162461bcd60e51b81526004016108359061476c565b61087683838360405180602001604052806000815250613643565b600080611ca083611d10565b9050806001600160a01b0316846001600160a01b03161480611cc75750611cc78185612ae7565b80611ceb5750836001600160a01b0316611ce084610c6b565b6001600160a01b0316145b949350505050565b6000908152602081905260409020546001600160a01b0316151590565b6000611d1b82611cf3565b611d595760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081d1bdad95b9259608a1b6044820152606401610835565b506000908152602081905260409020546001600160a01b031690565b600160086000828254611d88919061442d565b90915550506008546007546001600160a01b0316331480611db857503360009081526009602052604090205460ff165b611dd45760405162461bcd60e51b815260040161083590614864565b600d60009054906101000a90046001600160a01b03166001600160a01b0316635b6bf6416040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190614749565b60ff168263ffffffff161415611eaf5760405162461bcd60e51b8152602060048201526024808201527f63616e2774206465706f73697420737469636b657220726f79616c74696573206044820152636865726560e01b6064820152608401610835565b600d5460405163026579b560e11b815234600482015263ffffffff841660248201526001600160a01b03909116906304caf36a90604401600060405180830381600087803b158015611f0057600080fd5b505af1158015611f14573d6000803e3d6000fd5b505050506008548114610bd55760405162461bcd60e51b81526004016108359061476c565b600d5460408051633ffcdacb60e11b815290516000926001600160a01b031691637ff9b5969160048083019260209291908290030181865afa158015610fd7573d6000803e3d6000fd5b600a54604051636c51371d60e11b81526000916001600160a01b03169063d8a26e3a90611fb4908590600401613c43565b600060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff991908101906145e7565b5163ffffffff1692915050565b6007546001600160a01b031633148061202e57503360009081526009602052604090205460ff165b61204a5760405162461bcd60e51b815260040161083590614864565b600d8054911515600160c01b0260ff60c01b19909216919091179055565b606060068054610be89061478e565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a35050565b6120f084848484613643565b50505050565b600d54606090600160a01b900463ffffffff1682106121575760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e55524920666f72206e6f6e2d6578697374656e7420746f6b656e006044820152606401610835565b6040518060a00160405280606b8152602001614dd6606b9139600a546040805163712a908d60e01b81523060048201526024810191909152600f60448201526e64656661756c74546f6b656e55524960881b60648201529192506000916001600160a01b039091169063712a908d90608401600060405180830381865afa1580156121e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261220e91908101906148c9565b9050805160001461221d578091505b600061222884611d10565b6000858152600160205260408120805492935090916122469061478e565b80601f01602080910402602001604051908101604052809291908181526020018280546122729061478e565b80156122bf5780601f10612294576101008083540402835291602001916122bf565b820191906000526020600020905b8154815290600101906020018083116122a257829003601f168201915b5050600a5460408051636c17fd7960e01b815263ffffffff8c1660048201526024810191909152600d60448201526c666f726365546f6b656e55524960981b60648201529495506001600160a01b031693636c17fd79935060840191506123239050565b602060405180830381865afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612364919061472c565b80156123705750805115155b1561237d5780935061271b565b600a54604051633f08e8e360e11b81526001600160a01b0390911690637e11d1c6906123ad9085906004016148fd565b602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee919061472c565b806124655750600a54604051633f08e8e360e11b81526001600160a01b0390911690637e11d1c6906124249030906004016148fd565b602060405180830381865afa158015612441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612465919061472c565b1561271057600a54604051633f08e8e360e11b81526000916001600160a01b031690637e11d1c69061249b9086906004016148fd565b602060405180830381865afa1580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc919061472c565b6124e657306124e8565b825b600a5460405163712a908d60e01b81529192506000916001600160a01b039091169063712a908d906125499085906004016001600160a01b03919091168152604060208201819052600490820152631c9bdbdd60e21b606082015260800190565b600060405180830381865afa158015612566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261258e91908101906148c9565b600a80546040805163712a908d60e01b81526001600160a01b03878116600483015260248201929092526044810193909352690e4dedee8a6eaccccd2f60b31b6064840152929350600092169063712a908d90608401600060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261262991908101906148c9565b9050805160001480156126c85750600c546040516206259160e71b81526020600482015260136024820152720e4cadadeecca88caccc2ead8e8a6eaccccd2f606b1b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa1580156126a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c6919061472c565b155b156126eb5750604080518082019091526005815264173539b7b760d91b60208201525b81511561270857612705826126ff8a6136b3565b836137db565b96505b50505061271b565b80511561271b578093505b505050919050565b6007546001600160a01b031633148061274b57503360009081526009602052604090205460ff165b6127675760405162461bcd60e51b815260040161083590614864565b600c5460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061279590600401614811565b602060405180830381865afa1580156127b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d69190614834565b600d54600160a01b900463ffffffff1614156128505760405162461bcd60e51b815260206004820152603360248201527f6d617820737570706c7920686173206265656e2072656163686564207261697360448201527265206974206265666f7265206d696e74696e6760681b6064820152608401610835565b600c546040516206259160e71b815260206004820152600f60248201526e696e6372656d656e74616c4d6f646560881b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db919061472c565b806129685750600c546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015612944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612968919061472c565b15612a4c57600b60009054906101000a90046001600160a01b03166001600160a01b031663573f86006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e49190614932565b6001600160a01b0316638a25ad246129fd88600161494f565b6040518263ffffffff1660e01b8152600401612a199190613c43565b600060405180830381600087803b158015612a3357600080fd5b505af1158015612a47573d6000803e3d6000fd5b505050505b600d54612aa590612a9c90600160a01b900463ffffffff16888886868a8a8f6000604051908082528060200260200182016040528015612a96578160200160208202803683370190505b5061380a565b886000346131d3565b50505050505050565b6007546000906001600160a01b03838116911614806107d85750506001600160a01b031660009081526009602052604090205460ff1690565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6007546001600160a01b03163314612b3f5760405162461bcd60e51b8152600401610835906147c9565b600780546001600160a01b03908116600090815260096020526040808220805460ff1990811690915584546001600160a01b03191693861693841790945582825280822080549094166001179093559151909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6007546001600160a01b03163314612be55760405162461bcd60e51b8152600401610835906147c9565b6007546001600160a01b0383811691161415612c3c5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610835565b6001600160a01b038216600081815260096020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d34169591016120d8565b612ca43460096000336118ab565b612d395760405162461bcd60e51b815260206004820152605a60248201527f6661696c6564206d696e7420636865636b3a206d696e7473206172652064697360448201527f61626c65642c206d696e7473206172652061742061206d617820737570706c79606482015279040dee440f2deea40c8d2c840dcdee840e0c2f240cadcdeeaced60331b608482015260a401610835565b600b54600d54604051631bc8bf9360e01b8152610f88926001600160a01b031691631bc8bf9391612d7e91600160a01b900463ffffffff169033908790600401614977565b6000604051808303816000875af1158015612d9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dc591908101906145e7565b336000346131d3565b600a5460408051636c17fd7960e01b815263ffffffff84166004820152602481019190915260066044820152651b1bd8dad95960d21b60648201526001600160a01b0390911690636c17fd7990608401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f919061472c565b151560011415612ee95760405162461bcd60e51b815260206004820152604960248201527f5468697320746f6b656e206973206c6f636b656420616e64206e65656473207460448201527f6f20626520756e6c6f636b6564206265666f72652069742063616e20626520746064820152681c985b9cd9995c995960ba1b608482015260a401610835565b600a546040516320025d2160e21b81526001600160a01b0390911690638009748490612f1b90859085906004016149a7565b600060405180830381600087803b158015612f3557600080fd5b505af1158015612f49573d6000803e3d6000fd5b5050600c546040516206259160e71b81526001600160a01b039091169250630312c8809150612f7a906004016149c6565b602060405180830381865afa158015612f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbb919061472c565b61087657600a54604051634fe61faf60e11b81526001600160a01b0390911690639fcc3f5e90612ff190859085906004016149a7565b600060405180830381600087803b15801561300b57600080fd5b505af115801561301f573d6000803e3d6000fd5b505050506001600160a01b0383161561087657600a54604051634f2609c760e11b81526001600160a01b0390911690639e4c138e9061306490869085906004016149a7565b600060405180830381600087803b15801561307e57600080fd5b505af1158015612aa5573d6000803e3d6000fd5b600d54600090600160c01b900460ff166130ae575060006107d8565b600c5460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906130dc90600401614811565b602060405180830381865afa1580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d9190614834565b600d54600160a01b900463ffffffff161061313a575060006107d8565b8180156131bd5750600d60009054906101000a90046001600160a01b03166001600160a01b0316637ff9b5966040518163ffffffff1660e01b8152600401602060405180830381865afa158015613195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b99190614834565b8314155b156131ca575060006107d8565b50600192915050565b6131fa83600d60149054906101000a900463ffffffff1663ffffffff168660a001516138d0565b600a54600d5460405163c28cf06160e01b81526001600160a01b039092169163c28cf0619161323c91600160a01b90910463ffffffff16908890600401614ac6565b600060405180830381600087803b15801561325657600080fd5b505af115801561326a573d6000803e3d6000fd5b505050506132a2600d60149054906101000a900463ffffffff166040518060a00160405280606b8152602001614dd6606b9139611157565b600c546040516206259160e71b81526001600160a01b0390911690630312c880906132cf906004016149c6565b602060405180830381865afa1580156132ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613310919061472c565b61338857600a54600d54604051634fe61faf60e11b81526001600160a01b0390921691639fcc3f5e91613355918791600160a01b900463ffffffff16906004016149a7565b600060405180830381600087803b15801561336f57600080fd5b505af1158015613383573d6000803e3d6000fd5b505050505b600a54600c5460405163e7b6dac960e01b81526001600160a01b0392831692638ff58aa692879291169063e7b6dac9906133c49060040161488a565b602060405180830381865afa1580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134059190614834565b6040518363ffffffff1660e01b81526004016134229291906148b0565b600060405180830381600087803b15801561343c57600080fd5b505af1158015613450573d6000803e3d6000fd5b5050600d5460408051631d4e010f60e11b815290516001600160a01b0390921693506304caf36a925084918491633a9c021e9160048083019260209291908290030181865afa1580156134a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cb9190614749565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381600087803b15801561350c57600080fd5b505af1158015613520573d6000803e3d6000fd5b5050505081156135b657600d80546001600160a01b038516917f8f2c63d2fb7a6762d60b5c413fcf4212bc46912b94c8b65172d780f1a2515a4491600160a01b900463ffffffff1690601461357483614bc9565b91906101000a81548163ffffffff021916908363ffffffff16021790555061359b876139f1565b6040516135a9929190614bed565b60405180910390a26120f0565b600d80546001600160a01b038516917fef35cf177b2baefe03d86d3f735f32215ea0d2fb2f0548bc5f45ea6950e6889491600160a01b900463ffffffff1690601461360083614bc9565b91906101000a81548163ffffffff021916908363ffffffff160217905550613627876139f1565b604051613635929190614bed565b60405180910390a250505050565b61364e8484846111ec565b61365b3385858585613a68565b6120f05760405162461bcd60e51b815260206004820152602360248201527f45524337323120526563656976657220436f6e6669726d6174696f6e2049732060448201526210985960ea1b6064820152608401610835565b6060816136d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561370157806136eb81614c0c565b91506136fa9050600a83614c27565b91506136db565b6000816001600160401b0381111561371b5761371b613c8e565b6040519080825280601f01601f191660200182016040528015613745576020820181803683370190505b509050815b85156137d25761375b60018261484d565b9050600061376a600a88614c27565b61377590600a614c49565b61377f908861484d565b61378a906030614c68565b905060008160f81b9050808484815181106137a7576137a7614401565b60200101906001600160f81b031916908160001a9053506137c9600a89614c27565b9750505061374a565b50949350505050565b60608383836040516020016137f293929190614c8d565b60405160208183030381529060405290509392505050565b613874604051806101200160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160608152602001606081525090565b50604080516101208101825263ffffffff998a168152978916602089015298909716978601979097526001600160a01b039096166060850152608084015260a083019490945260c082015260e081019290925261010082015290565b6001600160a01b0383166139115760405162461bcd60e51b81526020600482015260086024820152670c1e0c081b5a5b9d60c21b6044820152606401610835565b61391a82611cf3565b156139585760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610835565b6001600160a01b038316600090815260046020526040812080546001929061398190849061442d565b909155505060008281526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46139e83330858585613a68565b61087657600080fd5b606081600001518260200151836040015184606001518560800151604051602001613a1c9190614cd0565b60408051601f198184030181529082905260a088015160c089015160e08a01516101008b0151613a529998979695602001614ce3565b6040516020818303038152906040529050919050565b6000833b613a7857506001613ba1565b604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613aaa908990899088908890600401614d85565b6020604051808303816000875af1925050508015613ae5575060408051601f3d908101601f19168201909252613ae291810190614db8565b60015b613b8b573d808015613b13576040519150601f19603f3d011682016040523d82523d6000602084013e613b18565b606091505b508051613b835760405162461bcd60e51b815260206004820152603360248201527f5468697320636f6e747261637420646f6573206e6f7420696d706c656d656e746044820152721030b71024a2a9219b9918a932b1b2b4bb32b960691b6064820152608401610835565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b95945050505050565b828054613bb69061478e565b90600052602060002090601f016020900481019282613bd85760008555613c1e565b82601f10613bf157805160ff1916838001178555613c1e565b82800160010185558215613c1e579182015b82811115613c1e578251825591602001919060010190613c03565b50613c2a929150613c2e565b5090565b5b80821115613c2a5760008155600101613c2f565b63ffffffff91909116815260200190565b6001600160e01b031981168114610f8857600080fd5b600060208284031215613c7c57600080fd5b8135613c8781613c54565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613cc757613cc7613c8e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613cf557613cf5613c8e565b604052919050565b60006001600160401b03821115613d1657613d16613c8e565b5060051b60200190565b6001600160a01b0381168114610f8857600080fd5b8035613d4081613d20565b919050565b60008060408385031215613d5857600080fd5b82356001600160401b03811115613d6e57600080fd5b8301601f81018513613d7f57600080fd5b80356020613d94613d8f83613cfd565b613ccd565b82815260059290921b83018101918181019088841115613db357600080fd5b938201935b83851015613dd157843582529382019390820190613db8565b9550613de09050868201613d35565b93505050509250929050565b63ffffffff81168114610f8857600080fd5b8035613d4081613dec565b600060208284031215613e1b57600080fd5b8135613c8781613dec565b60005b83811015613e41578181015183820152602001613e29565b838111156120f05750506000910152565b60008151808452613e6a816020860160208601613e26565b601f01601f19169290920160200192915050565b602081526000613c876020830184613e52565b600060208284031215613ea357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215613ed157600080fd5b8235613edc81613d20565b946020939093013593505050565b60006020808385031215613efd57600080fd5b82356001600160401b03811115613f1357600080fd5b8301601f81018513613f2457600080fd5b8035613f32613d8f82613cfd565b81815260059190911b82018301908381019087831115613f5157600080fd5b928401925b82841015613f78578335613f6981613d20565b82529284019290840190613f56565b979650505050505050565b60006001600160401b03821115613f9c57613f9c613c8e565b50601f01601f191660200190565b600082601f830112613fbb57600080fd5b8135613fc9613d8f82613f83565b818152846020838601011115613fde57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561400d57600080fd5b81356001600160401b0381111561402357600080fd5b611ceb84828501613faa565b6000806040838503121561404257600080fd5b823561404d81613dec565b915060208301356001600160401b0381111561406857600080fd5b61407485828601613faa565b9150509250929050565b60008060006060848603121561409357600080fd5b833561409e81613d20565b925060208401356140ae81613d20565b929592945050506040919091013590565b600080600080608085870312156140d557600080fd5b84356140e081613d20565b935060208501356140f081613d20565b9250604085013561410081613d20565b9150606085013561411081613d20565b939692955090935050565b60006020828403121561412d57600080fd5b8135613c8781613d20565b8015158114610f8857600080fd5b60006020828403121561415857600080fd5b8135613c8781614138565b6000806040838503121561417657600080fd5b823561418181613d20565b9150602083013561419181614138565b809150509250929050565b600080600080608085870312156141b257600080fd5b84356141bd81613d20565b935060208501356141cd81613d20565b92506040850135915060608501356001600160401b038111156141ef57600080fd5b6141fb87828801613faa565b91505092959194509250565b600082601f83011261421857600080fd5b81356020614228613d8f83613cfd565b82815260059290921b8401810191818101908684111561424757600080fd5b8286015b8481101561426b57803561425e81613dec565b835291830191830161424b565b509695505050505050565b600082601f83011261428757600080fd5b81356020614297613d8f83613cfd565b82815260059290921b840181019181810190868411156142b657600080fd5b8286015b8481101561426b5780356001600160401b038111156142d95760008081fd5b6142e78986838b0101613faa565b8452509183019183016142ba565b600080600080600080600060e0888a03121561431057600080fd5b61431988613d35565b965061432760208901613dfe565b955061433560408901613dfe565b945060608801356001600160401b038082111561435157600080fd5b61435d8b838c01614207565b955060808a013591508082111561437357600080fd5b61437f8b838c01613faa565b945060a08a013591508082111561439557600080fd5b6143a18b838c01614207565b935060c08a01359150808211156143b757600080fd5b506143c48a828b01614276565b91505092959891949750929550565b600080604083850312156143e657600080fd5b82356143f181613d20565b9150602083013561419181613d20565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561444057614440614417565b500190565b8051613d4081613dec565b8051613d4081613d20565b600082601f83011261446c57600080fd5b8151602061447c613d8f83613cfd565b82815260059290921b8401810191818101908684111561449b57600080fd5b8286015b8481101561426b5780516144b281613dec565b835291830191830161449f565b600082601f8301126144d057600080fd5b81516144de613d8f82613f83565b8181528460208386010111156144f357600080fd5b611ceb826020830160208701613e26565b600082601f83011261451557600080fd5b81516020614525613d8f83613cfd565b82815260059290921b8401810191818101908684111561454457600080fd5b8286015b8481101561426b5780516001600160401b038111156145675760008081fd5b6145758986838b01016144bf565b845250918301918301614548565b600082601f83011261459457600080fd5b815160206145a4613d8f83613cfd565b82815260059290921b840181019181810190868411156145c357600080fd5b8286015b8481101561426b5780516145da81613d20565b83529183019183016145c7565b6000602082840312156145f957600080fd5b81516001600160401b038082111561461057600080fd5b90830190610120828603121561462557600080fd5b61462d613ca4565b61463683614445565b815261464460208401614445565b602082015261465560408401614445565b604082015261466660608401614450565b606082015260808301518281111561467d57600080fd5b6146898782860161445b565b60808301525060a0830151828111156146a157600080fd5b6146ad878286016144bf565b60a08301525060c0830151828111156146c557600080fd5b6146d18782860161445b565b60c08301525060e0830151828111156146e957600080fd5b6146f587828601614504565b60e083015250610100808401518381111561470f57600080fd5b61471b88828701614583565b918301919091525095945050505050565b60006020828403121561473e57600080fd5b8151613c8781614138565b60006020828403121561475b57600080fd5b815160ff81168114613c8757600080fd5b60208082526008908201526772652d656e74727960c01b604082015260600190565b600181811c908216806147a257607f821691505b602082108114156147c357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b602080825260089082015267189e5d19535a5b9d60c21b604082015260600190565b6020808252600990820152686d6178537570706c7960b81b604082015260600190565b60006020828403121561484657600080fd5b5051919050565b60008282101561485f5761485f614417565b500390565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b6020808252600c908201526b1c1c995d9a595dd0dbdd5b9d60a21b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156148db57600080fd5b81516001600160401b038111156148f157600080fd5b611ceb848285016144bf565b6001600160a01b03919091168152604060208201819052600990820152681d5cda5b99d49bdbdd60ba1b606082015260800190565b60006020828403121561494457600080fd5b8151613c8781613d20565b600063ffffffff80831681851680830382111561496e5761496e614417565b01949350505050565b63ffffffff841681526001600160a01b0383166020820152606060408201819052600090613ba190830184613e52565b6001600160a01b0392909216825263ffffffff16602082015260400190565b60208082526017908201527664697361626c6552656769737465726564546f6b656e7360481b604082015260600190565b600081518084526020808501945080840160005b83811015614a2d57815163ffffffff1687529582019590820190600101614a0b565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614a80578284038952614a6e848351613e52565b98850198935090840190600101614a56565b5091979650505050505050565b600081518084526020808501945080840160005b83811015614a2d5781516001600160a01b031687529582019590820190600101614aa1565b63ffffffff8316815260406020820152614ae960408201835163ffffffff169052565b60006020830151614b02606084018263ffffffff169052565b50604083015163ffffffff811660808401525060608301516001600160a01b03811660a08401525060808301516101208060c0850152614b466101608501836149f7565b915060a0850151603f19808685030160e0870152614b648483613e52565b935060c08701519150610100818786030181880152614b8385846149f7565b945060e08801519250818786030184880152614b9f8584614a38565b94508088015193505080868503016101408701525050614bbf8282614a8d565b9695505050505050565b600063ffffffff80831681811415614be357614be3614417565b6001019392505050565b63ffffffff83168152604060208201526000611ceb6040830184613e52565b6000600019821415614c2057614c20614417565b5060010190565b600082614c4457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614c6357614c63614417565b500290565b600060ff821660ff84168060ff03821115614c8557614c85614417565b019392505050565b60008451614c9f818460208901613e26565b845190830190614cb3818360208901613e26565b8451910190614cc6818360208801613e26565b0195945050505050565b602081526000613c8760208301846149f7565b63ffffffff8a811682528981166020830152881660408201526001600160a01b038716606082015261012060808201819052600090614d2483820189613e52565b905082810360a0840152614d388188613e52565b905082810360c0840152614d4c81876149f7565b905082810360e0840152614d608186614a38565b9050828103610100840152614d758185614a8d565b9c9b505050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614bbf90830184613e52565b600060208284031215614dca57600080fd5b8151613c8781613c5456fe68747470733a2f2f697066732e696f2f697066732f6261667962656965633532626f3673637166776371627673347264767336706832786a6335766163746f63696d336362636d6c6d75706b64357a342f706172747974696d655f64656661756c745f7572692e6a736f6ea26469706673582212209f0601b3a7b1940275f4380e6e74305ee551f4b0e711fac50f3f60b0a96f411a64736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0x3411DEa54B2FB5aB203616bB614D61794432d7B1"
  },
  "devdoc": {
    "author": "0x0zAgency",
    "events": {
      "TokenMinted(uint32,bytes,address)": {
        "details": "will be changed to TokenMinted soon"
      },
      "TokenPreviewMinted(uint32,bytes,address)": {
        "details": "will be changed to TokenPreviewMinted soon"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "will Throw if tokenId does not exist"
      },
      "depositStickerRoyalty(uint32)": {
        "details": "the amount that is paid into this function is defined by the sticker price set by the token owner. The royalty controller cuts up the deposited tokens even more depending on if there are any splits."
      },
      "getPathId(uint32)": {
        "details": "must be split up into chunks of 32"
      },
      "getPreview()": {
        "details": "This method is the most gas intensive method in InfinityMint, how ever there is a trade off in the fact that that MintPreview is insanely cheap and does not need a lot of gas. I suggest using low previewCount values of about 2 or 3. Anything higher is dependant in your project configuartion and how much you care about gas prices."
      },
      "implicitMint(address,uint32,uint32,uint32[],bytes,uint32[],string[])": {
        "details": "This is the cheapest way to get InfinityMint to mint something as it literally decides no values on chain. This method can also be called by a rollup solution or something or be used as a way to literally mint anything.",
        "params": {
          "assets": "the assets for this token",
          "colours": "the colours of this token",
          "pathId": "the pathid you want to mint",
          "pathSize": "the size of this path (for colour generation)",
          "receiver": "the address to receive the mint"
        }
      },
      "isApprovedOrOwner(address,uint256)": {
        "details": "same as open zepps"
      },
      "mintArguments(bytes)": {
        "details": "must have byteMint enabled in valuesController"
      },
      "mintPreview(uint32)": {
        "details": "This will wipe other previews once called.",
        "params": {
          "index": "the index of the preview to mint"
        }
      },
      "ownerOf(uint256)": {
        "details": "will Throw if the token does not exist"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Emits a {Transfer} event."
      },
      "setTokenURI(uint32,string)": {
        "details": "you need to call this from an approved address for the token",
        "params": {
          "json": "an IFPS link or a",
          "tokenId": "the tokenId"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenPrice()": {
        "details": "the royalty controller actually controls the token price so in order to change it you must send tx to that contract."
      },
      "totalSupply()": {
        "details": "Returns the max supply of tokens, not the amount that have been minted. (so the tokenId)"
      },
      "transferBatch(uint256[],address)": {
        "details": "must be split up into chunks of 32"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Emits a {Transfer} event."
      },
      "withdraw()": {
        "details": "The totals that the sender can withdraw is managed by the royalty controller"
      }
    },
    "title": "ERC721 InfinityMint v0.1.1.4",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokenPreviewComplete(address,uint256)": {
        "notice": "Fired when ever a preview has been completed"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Sets an approved adress for this token"
      },
      "balanceOf(address)": {
        "notice": "blanceOf returns the number of tokens an address currently holds."
      },
      "constructor": {
        "notice": "InfinityMint Constructor takes tokenName and tokenSymbol and the various destinations of controller contracts"
      },
      "currentTokenId()": {
        "notice": "numerical increment of the current tokenId"
      },
      "depositStickerRoyalty(uint32)": {
        "notice": "this can only be called by sticker contracts and is used to pay back the contract owner their sticker cut TODO: Turn this into a non static function capable of accepting payments not just from the sticker"
      },
      "depositSystemRoyalty(uint32)": {
        "notice": "Allows approved contracts to deposit royalty types"
      },
      "exists(uint256)": {
        "notice": "Returns true if a token exists."
      },
      "getApproved(uint256)": {
        "notice": "Returns the approved adress for this token."
      },
      "getPathId(uint32)": {
        "notice": "Gets the pathId of a token."
      },
      "getPreview()": {
        "notice": "Returns a selection of preview mints, these are ghost NFTs which can be chosen from. Their generation values are based off of eachover due to the nature of the number system."
      },
      "implicitMint(address,uint32,uint32,uint32[],bytes,uint32[],string[])": {
        "notice": "Allows approved or the deployer to pick exactly what token they would like to mint. Does not check if assets/colours/mintData is valid. Implicitly assets what ever."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Will returns true if the operator is approved by the owner address"
      },
      "isApprovedOrOwner(address,uint256)": {
        "notice": "will returns true if the address is apprroved for all, approved operator or is the owner of a token"
      },
      "mint()": {
        "notice": "Public method to mint a token taking no bytes argument"
      },
      "mintArguments(bytes)": {
        "notice": "Public method to mint a token but taking input data in the form of packed bytes"
      },
      "mintPreview(uint32)": {
        "notice": "Mints a preview. Index is relative to the sender and is the index of the preview in the users preview list"
      },
      "minterController()": {
        "notice": "Interface set to the location of the minter controller which controls how InfinityMint mints, is set in constructor and can be modified through setDestinations"
      },
      "mintsEnabled()": {
        "notice": "will disallow mints if set to true"
      },
      "name()": {
        "notice": "Returns the name of the ERC721  for display on places like Etherscan"
      },
      "ownerOf(uint256)": {
        "notice": "Returns the owner of a current token"
      },
      "royaltyController()": {
        "notice": "Interface set to the location of the royalty controller which controls how  picks random numbers and primes, is set in constructor and can be modified through setDestinations"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Just like the method above except with no data field we pass to the implemeting contract."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Will approve an operator for the senders tokens"
      },
      "setMintsEnabled(bool)": {
        "notice": "Toggles mints allowing people to either mint or not mint tokens."
      },
      "setTokenURI(uint32,string)": {
        "notice": "sets the token URI"
      },
      "storageController()": {
        "notice": "Interface set to the location of the storage controller, is set in constructor and cannot be modified."
      },
      "supportsInterface(bytes4)": {
        "notice": "this is used by opensea/polyscan to detect our ERC721"
      },
      "symbol()": {
        "notice": "Returns the symbol of the ERC721 for display on places like Polyscan"
      },
      "tokenPrice()": {
        "notice": "Returns the current price of a mint."
      },
      "tokenURI(uint256)": {
        "notice": "returns the tokenURI for a token, will return the"
      },
      "totalSupply()": {
        "notice": "the total supply of tokens"
      },
      "transferBatch(uint256[],address)": {
        "notice": "Allows the ability for multiple tokens to be transfered at once."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it."
      },
      "valuesController()": {
        "notice": "Interface set to the location of the values controller responsible for managing global variables across the smart contract syste,, is set in constructor and cannot be modified."
      },
      "withdraw()": {
        "notice": "Allows you to withdraw your earnings from the contract."
      }
    },
    "notice": "This is the main contract for an InfinityMint. It is responsible for the suite working together to create a fully dynamic and modular NFT system.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 742,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 747,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "uri",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 752,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "approvedTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 759,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 764,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "balance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 767,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 458,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "deployer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "executionCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "approved",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1541,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "storageController",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(InfinityMintStorage)6696"
      },
      {
        "astId": 1545,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "minterController",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(Minter)7496"
      },
      {
        "astId": 1549,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "valuesController",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(InfinityMintValues)7070"
      },
      {
        "astId": 1553,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "royaltyController",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(Royalty)8132"
      },
      {
        "astId": 1581,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "currentTokenId",
        "offset": 20,
        "slot": "13",
        "type": "t_uint32"
      },
      {
        "astId": 1584,
        "contract": "contracts/InfinityMint.sol:InfinityMint",
        "label": "mintsEnabled",
        "offset": 24,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InfinityMintStorage)6696": {
        "encoding": "inplace",
        "label": "contract InfinityMintStorage",
        "numberOfBytes": "20"
      },
      "t_contract(InfinityMintValues)7070": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_contract(Minter)7496": {
        "encoding": "inplace",
        "label": "contract Minter",
        "numberOfBytes": "20"
      },
      "t_contract(Royalty)8132": {
        "encoding": "inplace",
        "label": "contract Royalty",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}