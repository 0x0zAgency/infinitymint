{
  "address": "0x70Ae06edfA1362E6486486127710F9f10F8654a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rarities",
          "type": "uint256[]"
        }
      ],
      "name": "addAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "combineNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        }
      ],
      "name": "flatPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getColours",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "result",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getMintData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nameCount",
          "type": "uint256"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "results",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPath",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNextPathId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pathId",
          "type": "uint256"
        }
      ],
      "name": "getPathSections",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "getPathSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getRandomAsset",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "assetsId",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sectionId",
          "type": "uint256"
        }
      ],
      "name": "getSectionAssets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "isValidPath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "names",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "pushSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetPaths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "assets",
          "type": "uint32[]"
        }
      ],
      "name": "setLastAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setLastPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "setNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setNextPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPathCount",
          "type": "uint256"
        }
      ],
      "name": "setPathCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPathDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_sections",
          "type": "uint256[][]"
        }
      ],
      "name": "setPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "pathSize",
          "type": "uint32"
        }
      ],
      "name": "setPathSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "newPathSizes",
          "type": "uint32[]"
        }
      ],
      "name": "setPathSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "sectionId",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "setSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x563d8c1755a3f64410c5ad9095415dd0fb80fb13d72cb5b4adf05bfc0bdcbfbf",
  "receipt": {
    "to": null,
    "from": "0xDFF917ab602e8508b6907dE1b038dd52B24A2379",
    "contractAddress": "0x70Ae06edfA1362E6486486127710F9f10F8654a7",
    "transactionIndex": 1,
    "gasUsed": "3433866",
    "logsBloom": "0x
    "blockHash": "0x2193290348d40c9355e81b6020d739bf26a8d06102ec887933767f32a0fb136c",
    "transactionHash": "0x563d8c1755a3f64410c5ad9095415dd0fb80fb13d72cb5b4adf05bfc0bdcbfbf",
    "logs": [],
    "blockNumber": 4056943,
    "cumulativeGasUsed": "3629475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "📦",
    "0x95e8b3c812d51B7DE04af75ACC4852b17EdEB382"
  ],
  "numDeployments": 1,
  "solcInputHash": "d376dbecb72767ee793a0467b60033fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rarities\",\"type\":\"uint256[]\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"combineNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"}],\"name\":\"flatPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getColours\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"result\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getMintData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nameCount\",\"type\":\"uint256\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"results\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPath\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNextPathId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getPathSections\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"getPathSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getRandomAsset\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assetsId\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sectionId\",\"type\":\"uint256\"}],\"name\":\"getSectionAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"isValidPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"pushSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"}],\"name\":\"setLastAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setLastPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"setNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setNextPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPathCount\",\"type\":\"uint256\"}],\"name\":\"setPathCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPathDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_sections\",\"type\":\"uint256[][]\"}],\"name\":\"setPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"}],\"name\":\"setPathSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"newPathSizes\",\"type\":\"uint32[]\"}],\"name\":\"setPathSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"setSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/SimpleImage.sol\":\"SimpleImage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport './RandomNumber.sol';\\n\\nabstract contract Asset {\\n    struct PartialStruct {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32[] assets;\\n        string[] names;\\n        uint32[] colours;\\n        bytes mintData;\\n    }\\n\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32[] memory result);\\n\\n    function getDefaultName() internal virtual returns (string memory);\\n\\n    function getNextPath() external view virtual returns (uint32);\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function isValidPath(uint32 pathId) external view virtual returns (bool);\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function setLastAssets(uint32[] memory assets) public virtual;\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (string[] memory results);\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        external\\n        virtual\\n        returns (uint32[] memory assetsId);\\n\\n    function getMintData(\\n        uint32 pathId,\\n        uint32 tokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (bytes memory);\\n\\n    function addAsset(uint256 rarity) public virtual;\\n\\n    function setNextPathId(uint32 pathId) public virtual;\\n\\n    function setLastPathId(uint32 pathId) public virtual;\\n\\n    function getPathSize(uint32 pathId) public view virtual returns (uint32);\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x08322311a4cc60bca6bda5a98d0307f409ac4c74d75a2a00a29048b170bfef2f\",\"license\":\"UNLICENSED\"},\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintObject.sol';\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount, 're-entry');\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, 'not deployer');\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], 'not approved');\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, 'cannot modify deployer');\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiRevoke(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x693bb4a4daeacc0fbb3c3102c647e82bf561e61762af18bbca7edd4f1915f222\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintAsset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport './Asset.sol';\\nimport './Authentication.sol';\\n\\nabstract contract InfinityMintAsset is Asset, Authentication {\\n    mapping(uint256 => bool) internal disabledPaths; //disabled paths which are not picked\\n    mapping(uint256 => uint256[]) internal pathSections; //what sections are to what path\\n\\n    //user values\\n    InfinityMintValues internal valuesController;\\n\\n    //the token name\\n    string internal tokenName = 'asset';\\n    string public assetsType = 'default'; //the type of assetId is default\\n\\n    //path stuff\\n    uint256 internal pathCount;\\n    uint32[] internal pathSizes; //the amount of points in a path (used in random colour generation with SVG things)\\n    uint256 internal safeDefaultReturnPath; //used in the case we cannot decide what path to randomly select we will return the value of this\\n\\n    uint256 internal assetId; //\\n    uint256[][] internal assetsSections; //the sections to an asset\\n    uint256[] internal assetRarity; //a list of asset rarity\\n    uint32[] internal lastAssets; //the last selection of assets\\n    uint32 internal nextPath = 0; //the next path to be minted\\n    uint32 internal lastPath = 0;\\n\\n    //the names to pick from when generating\\n    string[] public names;\\n\\n    //if all paths are for all sections\\n    bool private flatSections = false;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        assetRarity.push(0); //so assetId start at 1 not zero so zero can be treat as a\\n    }\\n\\n    function setNames(string[] memory newNames) public onlyApproved {\\n        names = newNames;\\n    }\\n\\n    function resetNames() public onlyApproved {\\n        delete names;\\n    }\\n\\n    function resetAssets() public onlyApproved {\\n        delete assetRarity;\\n        delete assetsSections;\\n        assetRarity.push(0);\\n        assetId = 0;\\n        flatSections = false;\\n    }\\n\\n    function resetPaths() public onlyApproved {\\n        delete pathSizes;\\n        pathCount = 0;\\n        safeDefaultReturnPath = 0;\\n    }\\n\\n    function combineNames(string[] memory newNames) public onlyApproved {\\n        require(newNames.length < 100);\\n\\n        for (uint256 i = 0; i < newNames.length; ) {\\n            names.push(newNames[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addName(string memory name) public onlyApproved {\\n        names.push(name);\\n    }\\n\\n    function setNextPathId(uint32 pathId) public virtual override onlyApproved {\\n        nextPath = pathId;\\n    }\\n\\n    function setLastPathId(uint32 pathId) public virtual override onlyApproved {\\n        lastPath = pathId;\\n    }\\n\\n    function getNextPath() external view virtual override returns (uint32) {\\n        return nextPath;\\n    }\\n\\n    function setLastAssets(\\n        uint32[] memory assets\\n    ) public virtual override onlyApproved {\\n        lastAssets = assets;\\n    }\\n\\n    function getPathSections(\\n        uint256 pathId\\n    ) external view virtual returns (uint256[] memory) {\\n        return pathSections[pathId];\\n    }\\n\\n    function getSectionAssets(\\n        uint256 sectionId\\n    ) external view returns (uint256[] memory) {\\n        return assetsSections[sectionId];\\n    }\\n\\n    function setPathSize(uint32 pathId, uint32 pathSize) public onlyApproved {\\n        pathSizes[pathId] = pathSize;\\n    }\\n\\n    function setPathSizes(uint32[] memory newPathSizes) public onlyApproved {\\n        pathSizes = newPathSizes;\\n    }\\n\\n    function getPathSize(uint32 pathId) public view override returns (uint32) {\\n        if (pathId >= pathSizes.length) return 1;\\n\\n        return pathSizes[pathId];\\n    }\\n\\n    function getNextPathId(\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (uint32) {\\n        uint256 result = randomNumberController.getMaxNumber(pathCount);\\n\\n        //path is greather than token Paths\\n        if (result >= pathCount) return uint32(safeDefaultReturnPath);\\n\\n        //count up until a non disabled path is found\\n        while (disabledPaths[result]) {\\n            if (result + 1 >= pathCount) result = 0;\\n            result++;\\n        }\\n\\n        return uint32(result);\\n    }\\n\\n    function getNames(\\n        uint256 nameCount,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (string[] memory results) {\\n        string memory defaultName = getDefaultName();\\n\\n        // matched and incremental use nextPath to get their name\\n        if (\\n            !valuesController.isTrue('matchedMode') &&\\n            !valuesController.isTrue('incrementalMode')\\n        ) {\\n            if (nameCount <= 0 && valuesController.isTrue('mustGenerateName'))\\n                nameCount = 1;\\n\\n            if (nameCount <= 0 || names.length == 0) {\\n                results = new string[](1);\\n                results[0] = defaultName;\\n                return results;\\n            }\\n\\n            results = new string[](nameCount + 1);\\n\\n            for (uint32 i = 0; i < nameCount; ) {\\n                uint256 result = randomNumberController.getMaxNumber(\\n                    names.length\\n                );\\n\\n                if (result >= names.length) result = 0;\\n                results[i] = names[result];\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            results[nameCount] = defaultName;\\n        } else {\\n            results = new string[](2);\\n\\n            if (names.length == 0) results[0] = '';\\n            else if (nextPath < names.length) results[0] = names[nextPath];\\n            else results[0] = names[0];\\n            results[1] = defaultName;\\n        }\\n    }\\n\\n    function getMintData(\\n        uint32,\\n        uint32,\\n        RandomNumber\\n    ) public virtual override returns (bytes memory) {\\n        return '{}'; //returns a blank json array\\n    }\\n\\n    function getDefaultName()\\n        internal\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return tokenName;\\n    }\\n\\n    function isValidPath(uint32 pathId) public view override returns (bool) {\\n        return (pathId >= 0 && pathId < pathCount && !disabledPaths[pathId]);\\n    }\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        setNextPathId(pathId);\\n        setLastAssets(getRandomAsset(pathId, randomNumberController));\\n\\n        return\\n            PartialStruct(\\n                pathId,\\n                getPathSize(pathId),\\n                lastAssets,\\n                getNames(\\n                    randomNumberController.getMaxNumber(\\n                        valuesController.tryGetValue('nameCount')\\n                    ),\\n                    randomNumberController\\n                ),\\n                getColours(pathId, randomNumberController),\\n                getMintData(pathId, currentTokenId, randomNumberController)\\n            );\\n    }\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        return\\n            pickPath(\\n                getNextPathId(randomNumberController),\\n                currentTokenId,\\n                randomNumberController\\n            );\\n    }\\n\\n    function getRandomAsset(\\n        uint32 pathId,\\n        RandomNumber randomNumberController\\n    ) public view virtual override returns (uint32[] memory assetsId) {\\n        if (assetId == 0) {\\n            return assetsId;\\n        }\\n\\n        uint256[] memory sections;\\n        if (flatSections) sections = pathSections[0];\\n        else sections = pathSections[pathId];\\n\\n        //index position of sections\\n        uint256 indexPosition = 0;\\n        //current random number salt\\n        uint256 salt = randomNumberController.salt();\\n\\n        if (sections.length == 0) {\\n            return assetsId;\\n        } else {\\n            assetsId = new uint32[](sections.length);\\n            uint32[] memory selectedPaths;\\n            uint256[] memory section;\\n            for (uint256 i = 0; i < sections.length; ) {\\n                section = assetsSections[sections[i]];\\n\\n                if (section.length == 0) {\\n                    assetsId[indexPosition++] = 0;\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                if (section.length == 1 && assetRarity[section[0]] == 100) {\\n                    assetsId[indexPosition++] = uint32(section[0]);\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                selectedPaths = new uint32[](section.length);\\n                //repeat filling array with found values\\n                uint256 count = 0;\\n\\n                for (uint256 index = 0; index < section.length; ) {\\n                    if (count == selectedPaths.length) break;\\n                    if (section[index] == 0) {\\n                        unchecked {\\n                            ++index;\\n                        }\\n                        continue;\\n                    }\\n\\n                    uint256 rarity = 0;\\n\\n                    if (assetRarity.length > section[index])\\n                        rarity = assetRarity[section[index]];\\n\\n                    if (\\n                        (rarity == 100 ||\\n                            rarity >\\n                            randomNumberController.returnNumber(\\n                                100,\\n                                i +\\n                                    index +\\n                                    rarity +\\n                                    count +\\n                                    salt +\\n                                    indexPosition\\n                            ))\\n                    ) selectedPaths[count++] = uint32(section[index]);\\n\\n                    unchecked {\\n                        ++index;\\n                    }\\n                }\\n\\n                //pick an asset\\n                uint256 result = 0;\\n\\n                if (count <= 1) assetsId[indexPosition++] = selectedPaths[0];\\n                else if (count >= 2) {\\n                    result = randomNumberController.returnNumber(\\n                        count,\\n                        selectedPaths.length + count + indexPosition + salt\\n                    );\\n                    if (result < selectedPaths.length)\\n                        assetsId[indexPosition++] = selectedPaths[result];\\n                    else assetsId[indexPosition++] = 0;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setSectionAssets(\\n        uint32 sectionId,\\n        uint256[] memory _assets\\n    ) public onlyDeployer {\\n        assetsSections[sectionId] = _assets;\\n    }\\n\\n    function pushSectionAssets(uint256[] memory _assets) public onlyDeployer {\\n        assetsSections.push(_assets);\\n    }\\n\\n    function flatPathSections(uint32[] memory pathIds) public onlyDeployer {\\n        pathSections[0] = pathIds;\\n        flatSections = true;\\n    }\\n\\n    function setPathSections(\\n        uint32[] memory pathIds,\\n        uint256[][] memory _sections\\n    ) public onlyDeployer {\\n        require(pathIds.length == _sections.length);\\n\\n        for (uint256 i = 0; i < pathIds.length; i++) {\\n            pathSections[pathIds[i]] = _sections[i];\\n        }\\n    }\\n\\n    function addAssets(uint256[] memory rarities) public onlyDeployer {\\n        for (uint256 i = 0; i < rarities.length; ) {\\n            if (rarities[i] > 100) revert('one of more rarities are above 100');\\n            assetRarity.push(rarities[i]);\\n            //increment asset counter\\n            assetId += 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addAsset(uint256 rarity) public virtual override onlyDeployer {\\n        if (rarity > 100) revert();\\n\\n        //increment asset counter\\n        assetRarity.push(rarity);\\n        assetId += 1;\\n    }\\n\\n    //returns randomised colours for SVG Paths\\n    function getColours(\\n        uint32 pathId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (uint32[] memory result) {\\n        uint32 pathSize = getPathSize(pathId);\\n        uint256 div = valuesController.tryGetValue('colourChunkSize');\\n\\n        if (div <= 0) div = 4;\\n\\n        if (pathSize <= div) {\\n            result = new uint32[](4);\\n            result[0] = uint32(randomNumberController.getMaxNumber(0xFFFFFF));\\n            result[1] = pathSize;\\n            result[2] = uint32(randomNumberController.getMaxNumber(0xFFFFFFFF));\\n            result[3] = uint32(valuesController.tryGetValue('extraColours'));\\n            return result;\\n        }\\n\\n        uint32 groups = uint32(1 + (pathSize / div));\\n        uint32 size = (groups * 2);\\n        uint32 tempPathSize = (pathSize);\\n        uint256 count = 0;\\n        result = new uint32[](size + 2);\\n        for (uint256 i = 0; i < size; ) {\\n            if (i == 0 || i % 2 == 0)\\n                result[i] = uint32(\\n                    randomNumberController.getMaxNumber(0xFFFFFF)\\n                );\\n            else {\\n                uint256 tempResult = tempPathSize - (div * count++);\\n                result[i] = uint32(tempResult > div ? div : tempResult);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        result[result.length - 2] = uint32(\\n            randomNumberController.getMaxNumber(0xFFFFFFFF)\\n        );\\n        result[result.length - 1] = uint32(\\n            valuesController.tryGetValue('extraColours')\\n        );\\n    }\\n\\n    function setPathDisabled(uint32 pathId, bool value) public onlyApproved {\\n        //if path zero is suddenly disabled, we need a new safe path to return\\n        if (pathId == safeDefaultReturnPath && value) {\\n            uint256 val = (safeDefaultReturnPath);\\n            while (disabledPaths[val]) {\\n                if (val >= pathCount) val = safeDefaultReturnPath;\\n                val++;\\n            }\\n            safeDefaultReturnPath = val;\\n        }\\n\\n        //if we enable zero again then its safe to return 0\\n        if (pathId <= safeDefaultReturnPath && value)\\n            safeDefaultReturnPath = pathId;\\n\\n        disabledPaths[pathId] = value;\\n    }\\n\\n    function setPathCount(uint256 newPathCount) public onlyApproved {\\n        pathCount = newPathCount;\\n    }\\n}\\n\",\"keccak256\":\"0x272b991f8a1a2b7c6f5cbe93490e4f3dc7fdbe31e4b6f3dda47355489cdc3745\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport './InfinityMintUtil.sol';\\nimport './InfinityMintValues.sol';\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xc08cdad17c0fdf1f32e2d8540fcbf3aaa442451d030a69a6beb2b82cb6a397cd\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(\\n        uint256 _i\\n    ) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return string.concat(directory, file, extension);\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(\\n        bytes memory s1,\\n        bytes memory s2\\n    ) internal pure returns (bool) {\\n        bytes memory b1 = bytes(s1);\\n        bytes memory b2 = bytes(s2);\\n        uint256 l1 = b1.length;\\n        if (l1 != b2.length) return false;\\n        for (uint256 i = 0; i < l1; i++) {\\n            //check each byte\\n            if (b1[i] != b2[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x94f4ad0b870309e3b0f9119e8e2ed54f2914082f66a130ccae0c9fb7ff06ffb6\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert('Invalid Value');\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0x6a33f7f6d25d1da9ae406e8b4de0f569df19c91367c55bc75905d256ed8e1b24\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintValues.sol';\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author Llydia Cross\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue('randomessFactor');\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue('maxRandomNumber'), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0xfd44d64d10b8fe07bf8865fa288804fdc3e2e26bc1b6e62f58c197ad8019138e\",\"license\":\"UNLICENSED\"},\"contracts/assets/SimpleImage.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport '../InfinityMintAsset.sol';\\n\\ncontract SimpleImage is InfinityMintAsset {\\n    /**\\n\\n\\t */\\n    constructor(string memory _tokenName, address valuesContract)\\n        InfinityMintAsset(valuesContract)\\n    {\\n        tokenName = _tokenName;\\n        assetsType = 'image';\\n    }\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (uint32)\\n    {\\n        if (pathCount == 1 && disabledPaths[safeDefaultReturnPath])\\n            revert('No valid paths');\\n\\n        if (valuesController.isTrue('incrementalMode')) {\\n            nextPath = lastPath++;\\n            if (nextPath >= pathCount) {\\n                lastPath = uint32(safeDefaultReturnPath);\\n                nextPath = uint32(safeDefaultReturnPath);\\n            }\\n            while (disabledPaths[nextPath]) {\\n                if (nextPath >= pathCount)\\n                    nextPath = uint32(safeDefaultReturnPath);\\n                nextPath++;\\n            }\\n            return nextPath;\\n        } else {\\n            uint32 pathId = uint32(\\n                randomNumberController.getMaxNumber(pathCount)\\n            );\\n\\n            if (disabledPaths[pathId] || pathId >= pathCount)\\n                pathId = uint32(safeDefaultReturnPath);\\n\\n            return pathId;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8abc24f3487362a06422028842cdf394afe67f2bc90a28cbf83b8b205097e31c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264185cdcd95d60da1b60a090815262000028916006919062000169565b5060408051808201909152600780825266191959985d5b1d60ca1b602090920191825262000057918162000169565b50600f80546001600160401b03191690556011805460ff191690553480156200007f57600080fd5b5060405162003db238038062003db2833981016040819052620000a29162000242565b60008054336001600160a01b03199182168117835582526002602090815260408320805460ff19166001908117909155838155600580549093166001600160a01b03861617909255600d8054928301815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910191909155825162000131916006919085019062000169565b5060408051808201909152600580825264696d61676560d81b6020909201918252620001609160079162000169565b50505062000370565b828054620001779062000333565b90600052602060002090601f0160209004810192826200019b5760008555620001e6565b82601f10620001b657805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e6578251825591602001919060010190620001c9565b50620001f4929150620001f8565b5090565b5b80821115620001f45760008155600101620001f9565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023d57600080fd5b919050565b600080604083850312156200025657600080fd5b82516001600160401b03808211156200026e57600080fd5b818501915085601f8301126200028357600080fd5b8151818111156200029857620002986200020f565b604051601f8201601f19908116603f01168101908382118183101715620002c357620002c36200020f565b81604052828152602093508884848701011115620002e057600080fd5b600091505b82821015620003045784820184015181830185015290830190620002e5565b82821115620003165760008484830101525b95506200032891505085820162000225565b925050509250929050565b600181811c908216806200034857607f821691505b602082108114156200036a57634e487b7160e01b600052602260045260246000fd5b50919050565b613a3280620003806000396000f3fe608060405234801561001057600080fd5b50600436106101e85760003560e01c80638c9fcab91161010b5780638c9fcab9146103b25780638e6e826d146103c5578063a57b3b45146103e5578063a85f3298146103f8578063b895bcb71461040b578063bfb05d031461041e578063c40f4a2514610431578063d15d415014610444578063d5f3948814610457578063d8b964e614610482578063d935232c146104a5578063dccd935c146104b8578063e6ef8955146104c0578063e7214f4f146104d3578063e96aeef3146104e6578063eb2c2da3146104f9578063f2fde38b1461050c578063f60a74361461051f578063fe684c0e14610532578063ff220d6d1461054557600080fd5b80630b71d256146101ed57806310a8c7a91461020257806311456b471461021557806331ed86d2146102285780633406bfac1461023b57806335697ba7146102435780633840c21a1461026c5780633982e0c41461027f578063433ee8cd1461029257806343bebe4e146102b2578063453dc933146102da5780634622ab03146102ed57806346e4e7c91461030d5780634c6fe6a21461031b578063593c7b271461033b5780637730f4fa1461034e5780637ba8dcd6146103715780637bd6ec4a146103795780637cf8031e1461038c5780638a25ad241461039f575b600080fd5b6102006101fb366004612f47565b61054d565b005b610200610210366004612fde565b6105e0565b6102006102233660046130eb565b610677565b610200610236366004612fde565b6106fe565b610200610791565b610256610251366004612f47565b610830565b6040516102639190613127565b60405180910390f35b61020061027a36600461316b565b610892565b61020061028d36600461323d565b6108e9565b6102a56102a0366004613274565b6109d2565b6040516102639190613383565b6102c56102c036600461341f565b6109f6565b60405163ffffffff9091168152602001610263565b6102006102e836600461316b565b610a56565b6103006102fb366004612f47565b610b03565b604051610263919061343a565b600f5463ffffffff166102c5565b61032e61032936600461344d565b610baf565b6040516102639190613472565b6102006103493660046134f2565b6111d2565b61036161035c36600461341f565b611229565b6040519015158152602001610263565b61030061125a565b6102a5610387366004613526565b611267565b61020061039a3660046135c8565b61145b565b6102006103ad36600461341f565b6114c8565b6102566103c0366004612f47565b611532565b6103d86103d3366004613274565b6115a5565b60405161026391906135fc565b6102006103f336600461360f565b611c27565b610200610406366004612f47565b611cbc565b6102c5610419366004613642565b611d05565b61020061042c366004613666565b611fb1565b61020061043f3660046134f2565b612017565b610361610452366004613642565b61208e565b60005461046a906001600160a01b031681565b6040516001600160a01b039091168152602001610263565b610361610490366004613642565b60026020526000908152604090205460ff1681565b6102006104b336600461341f565b6120c5565b610200612125565b6102006104ce3660046136b3565b612177565b6102006104e13660046134f2565b61222d565b6103006104f4366004613526565b612284565b6103d8610507366004613274565b6122a4565b61020061051a366004613642565b61288c565b61020061052d3660046135c8565b61292c565b610200610540366004613787565b612a2a565b610200612b0c565b6000546001600160a01b031633146105805760405162461bcd60e51b8152600401610577906137a5565b60405180910390fd5b606481111561058e57600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b8054919290916105d89084906137e1565b909155505050565b6000546001600160a01b0316331461060a5760405162461bcd60e51b8152600401610577906137a5565b805161061557600080fd5b60005b815181101561067357600160026000848481518110610639576106396137f9565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610618565b5050565b6000546001600160a01b031633148061069f57503360009081526002602052604090205460ff165b6106bb5760405162461bcd60e51b81526004016105779061380f565b601080546001810182556000919091528151610673917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190612bfa565b6000546001600160a01b031633146107285760405162461bcd60e51b8152600401610577906137a5565b805161073357600080fd5b60005b815181101561067357600060026000848481518110610757576107576137f9565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610736565b6000546001600160a01b03163314806107b957503360009081526002602052604090205460ff165b6107d55760405162461bcd60e51b81526004016105779061380f565b6107e1600d6000612c7e565b6107ed600c6000612c9f565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b60008181526004602090815260409182902080548351818402810184019094528084526060939283018282801561088657602002820191906000526020600020905b815481526020019060010190808311610872575b50505050509050919050565b6000546001600160a01b03163314806108ba57503360009081526002602052604090205460ff165b6108d65760405162461bcd60e51b81526004016105779061380f565b8051610673906010906020840190612cbd565b6000546001600160a01b031633148061091157503360009081526002602052604090205460ff165b61092d5760405162461bcd60e51b81526004016105779061380f565b600a548263ffffffff161480156109415750805b1561098557600a545b60008181526003602052604090205460ff161561098157600854811061096f5750600a545b8061097981613835565b91505061094a565b600a555b600a548263ffffffff161115801561099a5750805b156109aa5763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b6109da612d16565b6109ed6109e683611d05565b8484611267565b90505b92915050565b60095460009063ffffffff831610610a1057506001919050565b60098263ffffffff1681548110610a2957610a296137f9565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b0316331480610a7e57503360009081526002602052604090205460ff165b610a9a5760405162461bcd60e51b81526004016105779061380f565b6064815110610aa857600080fd5b60005b8151811015610673576010828281518110610ac857610ac86137f9565b60209081029190910181015182546001810184556000938452928290208151610afa9491909101929190910190612bfa565b50600101610aab565b60108181548110610b1357600080fd5b906000526020600020016000915090508054610b2e90613850565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5a90613850565b8015610ba75780601f10610b7c57610100808354040283529160200191610ba7565b820191906000526020600020905b815481529060010190602001808311610b8a57829003601f168201915b505050505081565b60606000610bbb612b68565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061388b565b158015610cbb57506005546040516206259160e71b81526001600160a01b0390911690630312c88090610c78906004016138a8565b602060405180830381865afa158015610c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb9919061388b565b155b15610fa85783158015610d5557506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061388b565b15610d5f57600193505b831580610d6c5750601054155b15610dc25760408051600180825281830190925290816020015b6060815260200190600190039081610d865790505091508082600081518110610db157610db16137f9565b6020026020010181905250506109f0565b610dcd8460016137e1565b6001600160401b03811115610de457610de4612f60565b604051908082528060200260200182016040528015610e1757816020015b6060815260200190600190039081610e025790505b50915060005b848163ffffffff161015610f845760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610e5f9160040190815260200190565b6020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea291906138d1565b6010549091508110610eb2575060005b60108181548110610ec557610ec56137f9565b906000526020600020018054610eda90613850565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0690613850565b8015610f535780601f10610f2857610100808354040283529160200191610f53565b820191906000526020600020905b815481529060010190602001808311610f3657829003601f168201915b5050505050848363ffffffff1681518110610f7057610f706137f9565b602090810291909101015250600101610e1d565b5080828581518110610f9857610f986137f9565b60200260200101819052506111cb565b6040805160028082526060820190925290816020015b6060815260200190600190039081610fbe57505060105490925061100f576040518060200160405280600081525082600081518110610fff57610fff6137f9565b60200260200101819052506111ab565b601054600f5463ffffffff1610156110e557600f5460108054909163ffffffff1690811061103f5761103f6137f9565b90600052602060002001805461105490613850565b80601f016020809104026020016040519081016040528092919081815260200182805461108090613850565b80156110cd5780601f106110a2576101008083540402835291602001916110cd565b820191906000526020600020905b8154815290600101906020018083116110b057829003601f168201915b505050505082600081518110610fff57610fff6137f9565b60106000815481106110f9576110f96137f9565b90600052602060002001805461110e90613850565b80601f016020809104026020016040519081016040528092919081815260200182805461113a90613850565b80156111875780601f1061115c57610100808354040283529160200191611187565b820191906000526020600020905b81548152906001019060200180831161116a57829003601f168201915b50505050508260008151811061119f5761119f6137f9565b60200260200101819052505b80826001815181106111bf576111bf6137f9565b60200260200101819052505b5092915050565b6000546001600160a01b03163314806111fa57503360009081526002602052604090205460ff165b6112165760405162461bcd60e51b81526004016105779061380f565b8051610673906009906020840190612d58565b60006008548263ffffffff161080156109f057505063ffffffff1660009081526003602052604090205460ff161590565b60078054610b2e90613850565b61126f612d16565b611278846120c5565b6112856104e185846115a5565b6040518060c001604052808563ffffffff1681526020016112a5866109f6565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561132857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116112eb5790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611432916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb91906138d1565b6040518263ffffffff1660e01b81526004016113e991815260200190565b6020604051808303816000875af1158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906138d1565b85610baf565b815260200161144186856122a4565b8152602001611451868686612284565b9052949350505050565b6000546001600160a01b031633146114855760405162461bcd60e51b8152600401610577906137a5565b600c80546001810182556000919091528151610673917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190612e02565b6000546001600160a01b03163314806114f057503360009081526002602052604090205460ff165b61150c5760405162461bcd60e51b81526004016105779061380f565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c8281548110611547576115476137f9565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561088657602002820191906000526020600020908154815260200190600101908083116108725750505050509050919050565b6060600b54600014156115b7576109f0565b60115460609060ff16156116405760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561163457602002820191906000526020600020905b815481526020019060010190808311611620575b505050505090506116a3565b63ffffffff84166000908152600460209081526040918290208054835181840281018401909452808452909183018282801561169b57602002820191906000526020600020905b815481526020019060010190808311611687575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170891906138d1565b905082516000141561171c575050506109f0565b82516001600160401b0381111561173557611735612f60565b60405190808252806020026020018201604052801561175e578160200160208202803683370190505b50935060608060005b8551811015611c1b57600c868281518110611784576117846137f9565b60200260200101518154811061179c5761179c6137f9565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156117f057602002820191906000526020600020905b8154815260200190600101908083116117dc575b5050505050915081516000141561183d576000878661180e81613835565b975081518110611820576118206137f9565b63ffffffff90921660209283029190910190910152600101611767565b815160011480156118855750600d8260008151811061185e5761185e6137f9565b602002602001015181548110611876576118766137f9565b90600052602060002001546064145b156118b1578160008151811061189d5761189d6137f9565b602002602001015187868061180e90613835565b81516001600160401b038111156118ca576118ca612f60565b6040519080825280602002602001820160405280156118f3578160200160208202803683370190505b5092506000805b8351811015611ab757845182141561191157611ab7565b838181518110611923576119236137f9565b60200260200101516000141561193b576001016118fa565b600084828151811061194f5761194f6137f9565b6020026020010151600d80549050111561199d57600d858381518110611977576119776137f9565b60200260200101518154811061198f5761198f6137f9565b906000526020600020015490505b8060641480611a5657506001600160a01b038b16634b0c7aad60648a8a87866119c6898c6137e1565b6119d091906137e1565b6119da91906137e1565b6119e491906137e1565b6119ee91906137e1565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5391906138d1565b81115b15611aae57848281518110611a6d57611a6d6137f9565b6020026020010151868480611a8190613835565b955081518110611a9357611a936137f9565b602002602001019063ffffffff16908163ffffffff16815250505b506001016118fa565b50600060018211611b1a5784600081518110611ad557611ad56137f9565b6020026020010151898880611ae990613835565b995081518110611afb57611afb6137f9565b602002602001019063ffffffff16908163ffffffff1681525050611c11565b60028210611c1157896001600160a01b0316634b0c7aad83888a868a51611b4191906137e1565b611b4b91906137e1565b611b5591906137e1565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba91906138d1565b90508451811015611bd757848181518110611ad557611ad56137f9565b60008988611be481613835565b995081518110611bf657611bf66137f9565b602002602001019063ffffffff16908163ffffffff16815250505b5050600101611767565b50505050505092915050565b6000546001600160a01b0316331480611c4f57503360009081526002602052604090205460ff165b611c6b5760405162461bcd60e51b81526004016105779061380f565b8060098363ffffffff1681548110611c8557611c856137f9565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611ce457503360009081526002602052604090205460ff165b611d005760405162461bcd60e51b81526004016105779061380f565b600855565b60006008546001148015611d2a5750600a5460009081526003602052604090205460ff165b15611d685760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b6044820152606401610577565b6005546040516206259160e71b81526001600160a01b0390911690630312c88090611d95906004016138a8565b602060405180830381865afa158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd6919061388b565b15611ef757600f8054600160201b900463ffffffff16906004611df8836138ea565b82546101009290920a63ffffffff818102199093169183160217909155600f805463ffffffff191692909116918217905560085411611e6157600a54600f805467ffffffffffffffff1916600160201b63ffffffff90931692830263ffffffff19161790911790555b600f5463ffffffff1660009081526003602052604090205460ff1615611ee957600854600f5463ffffffff1610611eaf57600a54600f805463ffffffff191663ffffffff9092169190911790555b600f805463ffffffff16906000611ec5836138ea565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611e61565b5050600f5463ffffffff1690565b60085460405163a0d0ca0f60e01b81526000916001600160a01b0385169163a0d0ca0f91611f2b9160040190815260200190565b6020604051808303816000875af1158015611f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6e91906138d1565b63ffffffff811660009081526003602052604090205490915060ff1680611f9d57506008548163ffffffff1610155b156109f05750600a5492915050565b919050565b6000546001600160a01b03163314611fdb5760405162461bcd60e51b8152600401610577906137a5565b80600c8363ffffffff1681548110611ff557611ff56137f9565b906000526020600020019080519060200190612012929190612e02565b505050565b6000546001600160a01b031633146120415760405162461bcd60e51b8152600401610577906137a5565b6000805260046020908152815161207d917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec9190840190612e3c565b50506011805460ff19166001179055565b600080546001600160a01b03838116911614806109f05750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b03163314806120ed57503360009081526002602052604090205460ff165b6121095760405162461bcd60e51b81526004016105779061380f565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b031633148061214d57503360009081526002602052604090205460ff165b6121695760405162461bcd60e51b81526004016105779061380f565b61217560106000612e7f565b565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610577906137a5565b80518251146121af57600080fd5b60005b8251811015612012578181815181106121cd576121cd6137f9565b6020026020010151600460008584815181106121eb576121eb6137f9565b602002602001015163ffffffff168152602001908152602001600020908051906020019061221a929190612e02565b508061222581613835565b9150506121b2565b6000546001600160a01b031633148061225557503360009081526002602052604090205460ff165b6122715760405162461bcd60e51b81526004016105779061380f565b805161067390600e906020840190612d58565b6040805180820190915260028152617b7d60f01b60208201529392505050565b606060006122b1846109f6565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa15801561231f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234391906138d1565b905060008111612351575060045b808263ffffffff16116125785760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af11580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed91906138d1565b83600081518110612400576124006137f9565b602002602001019063ffffffff16908163ffffffff1681525050818360018151811061242e5761242e6137f9565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad91906138d1565b836002815181106124c0576124c06137f9565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906125039060040161390e565b602060405180830381865afa158015612520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254491906138d1565b83600381518110612557576125576137f9565b602002602001019063ffffffff16908163ffffffff168152505050506109f0565b600061258a8263ffffffff851661394a565b6125959060016137e1565b905060006125a482600261395e565b90508360006125b483600261398a565b63ffffffff166001600160401b038111156125d1576125d1612f60565b6040519080825280602002602001820160405280156125fa578160200160208202803683370190505b50965060005b8363ffffffff168110156127355780158061262357506126216002826139b2565b155b156126c65760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612671573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269591906138d1565b8882815181106126a7576126a76137f9565b602002602001019063ffffffff16908163ffffffff168152505061272d565b6000826126d281613835565b93506126de90886139c6565b6126ee9063ffffffff86166139e5565b90508681116126fd57806126ff565b865b898381518110612711576127116137f9565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612600565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a491906138d1565b87600289516127b391906139e5565b815181106127c3576127c36137f9565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906128069060040161390e565b602060405180830381865afa158015612823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284791906138d1565b876001895161285691906139e5565b81518110612866576128666137f9565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b031633146128b65760405162461bcd60e51b8152600401610577906137a5565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b031633146129565760405162461bcd60e51b8152600401610577906137a5565b60005b8151811015610673576064828281518110612976576129766137f9565b602002602001015111156129d75760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b6064820152608401610577565b600d8282815181106129eb576129eb6137f9565b60209081029190910181015182546001818101855560009485529284200155600b805491929091612a1d9084906137e1565b9091555050600101612959565b6000546001600160a01b03163314612a545760405162461bcd60e51b8152600401610577906137a5565b6000546001600160a01b0383811691161415612aab5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610577565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b0316331480612b3457503360009081526002602052604090205460ff165b612b505760405162461bcd60e51b81526004016105779061380f565b612b5c60096000612e9d565b60006008819055600a55565b606060068054612b7790613850565b80601f0160208091040260200160405190810160405280929190818152602001828054612ba390613850565b8015612bf05780601f10612bc557610100808354040283529160200191612bf0565b820191906000526020600020905b815481529060010190602001808311612bd357829003601f168201915b5050505050905090565b828054612c0690613850565b90600052602060002090601f016020900481019282612c285760008555612c6e565b82601f10612c4157805160ff1916838001178555612c6e565b82800160010185558215612c6e579182015b82811115612c6e578251825591602001919060010190612c53565b50612c7a929150612ebe565b5090565b5080546000825590600052602060002090810190612c9c9190612ebe565b50565b5080546000825590600052602060002090810190612c9c9190612ed3565b828054828255906000526020600020908101928215612d0a579160200282015b82811115612d0a5782518051612cfa918491602090910190612bfa565b5091602001919060010190612cdd565b50612c7a929150612ef0565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090600701600890048101928215612c6e5791602002820160005b83821115612dc557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612d81565b8015612df55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612dc5565b5050612c7a929150612ebe565b828054828255906000526020600020908101928215612c6e5791602002820182811115612c6e578251825591602001919060010190612c53565b828054828255906000526020600020908101928215612c6e579160200282015b82811115612c6e578251829063ffffffff16905591602001919060010190612e5c565b5080546000825590600052602060002090810190612c9c9190612ef0565b508054600082556007016008900490600052602060002090810190612c9c91905b5b80821115612c7a5760008155600101612ebf565b80821115612c7a576000612ee78282612c7e565b50600101612ed3565b80821115612c7a576000612f048282612f0d565b50600101612ef0565b508054612f1990613850565b6000825580601f10612f29575050565b601f016020900490600052602060002090810190612c9c9190612ebe565b600060208284031215612f5957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612f9e57612f9e612f60565b604052919050565b60006001600160401b03821115612fbf57612fbf612f60565b5060051b60200190565b6001600160a01b0381168114612c9c57600080fd5b60006020808385031215612ff157600080fd5b82356001600160401b0381111561300757600080fd5b8301601f8101851361301857600080fd5b803561302b61302682612fa6565b612f76565b81815260059190911b8201830190838101908783111561304a57600080fd5b928401925b8284101561307157833561306281612fc9565b8252928401929084019061304f565b979650505050505050565b600082601f83011261308d57600080fd5b81356001600160401b038111156130a6576130a6612f60565b6130b9601f8201601f1916602001612f76565b8181528460208386010111156130ce57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156130fd57600080fd5b81356001600160401b0381111561311357600080fd5b61311f8482850161307c565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561315f57835183529284019291840191600101613143565b50909695505050505050565b6000602080838503121561317e57600080fd5b82356001600160401b038082111561319557600080fd5b818501915085601f8301126131a957600080fd5b81356131b761302682612fa6565b81815260059190911b830184019084810190888311156131d657600080fd5b8585015b8381101561320e578035858111156131f25760008081fd5b6132008b89838a010161307c565b8452509186019186016131da565b5098975050505050505050565b803563ffffffff81168114611fac57600080fd5b8015158114612c9c57600080fd5b6000806040838503121561325057600080fd5b6132598361321b565b915060208301356132698161322f565b809150509250929050565b6000806040838503121561328757600080fd5b6132908361321b565b9150602083013561326981612fc9565b600081518084526020808501945080840160005b838110156132d657815163ffffffff16875295820195908201906001016132b4565b509495945050505050565b6000815180845260005b81811015613307576020818501810151868301820152016132eb565b81811115613319576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156133765782840389526133648483516132e1565b9885019893509084019060010161334c565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c060608401526133bd60e08401826132a0565b90506060840151601f19808584030160808601526133db838361332e565b925060808601519150808584030160a08601526133f883836132a0565b925060a08601519150808584030160c08601525061341682826132e1565b95945050505050565b60006020828403121561343157600080fd5b6109ed8261321b565b6020815260006109ed60208301846132e1565b6000806040838503121561346057600080fd5b82359150602083013561326981612fc9565b6020815260006109ed602083018461332e565b600082601f83011261349657600080fd5b813560206134a661302683612fa6565b82815260059290921b840181019181810190868411156134c557600080fd5b8286015b848110156134e7576134da8161321b565b83529183019183016134c9565b509695505050505050565b60006020828403121561350457600080fd5b81356001600160401b0381111561351a57600080fd5b61311f84828501613485565b60008060006060848603121561353b57600080fd5b6135448461321b565b92506135526020850161321b565b9150604084013561356281612fc9565b809150509250925092565b600082601f83011261357e57600080fd5b8135602061358e61302683612fa6565b82815260059290921b840181019181810190868411156135ad57600080fd5b8286015b848110156134e757803583529183019183016135b1565b6000602082840312156135da57600080fd5b81356001600160401b038111156135f057600080fd5b61311f8482850161356d565b6020815260006109ed60208301846132a0565b6000806040838503121561362257600080fd5b61362b8361321b565b91506136396020840161321b565b90509250929050565b60006020828403121561365457600080fd5b813561365f81612fc9565b9392505050565b6000806040838503121561367957600080fd5b6136828361321b565b915060208301356001600160401b0381111561369d57600080fd5b6136a98582860161356d565b9150509250929050565b600080604083850312156136c657600080fd5b82356001600160401b03808211156136dd57600080fd5b6136e986838701613485565b935060209150818501358181111561370057600080fd5b8501601f8101871361371157600080fd5b803561371f61302682612fa6565b81815260059190911b8201840190848101908983111561373e57600080fd5b8584015b838110156137765780358681111561375a5760008081fd5b6137688c898389010161356d565b845250918601918601613742565b508096505050505050509250929050565b6000806040838503121561379a57600080fd5b823561325981612fc9565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156137f4576137f46137cb565b500190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b6000600019821415613849576138496137cb565b5060010190565b600181811c9082168061386457607f821691505b6020821081141561388557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561389d57600080fd5b815161365f8161322f565b6020808252600f908201526e696e6372656d656e74616c4d6f646560881b604082015260600190565b6000602082840312156138e357600080fd5b5051919050565b600063ffffffff80831681811415613904576139046137cb565b6001019392505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261395957613959613934565b500490565b600063ffffffff80831681851681830481118215151615613981576139816137cb565b02949350505050565b600063ffffffff8083168185168083038211156139a9576139a96137cb565b01949350505050565b6000826139c1576139c1613934565b500690565b60008160001904831182151516156139e0576139e06137cb565b500290565b6000828210156139f7576139f76137cb565b50039056fea26469706673582212201b60af1f14cc911069fe20307515e2b5c65f449dc0db0c90d811ca722bb24ec464736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e85760003560e01c80638c9fcab91161010b5780638c9fcab9146103b25780638e6e826d146103c5578063a57b3b45146103e5578063a85f3298146103f8578063b895bcb71461040b578063bfb05d031461041e578063c40f4a2514610431578063d15d415014610444578063d5f3948814610457578063d8b964e614610482578063d935232c146104a5578063dccd935c146104b8578063e6ef8955146104c0578063e7214f4f146104d3578063e96aeef3146104e6578063eb2c2da3146104f9578063f2fde38b1461050c578063f60a74361461051f578063fe684c0e14610532578063ff220d6d1461054557600080fd5b80630b71d256146101ed57806310a8c7a91461020257806311456b471461021557806331ed86d2146102285780633406bfac1461023b57806335697ba7146102435780633840c21a1461026c5780633982e0c41461027f578063433ee8cd1461029257806343bebe4e146102b2578063453dc933146102da5780634622ab03146102ed57806346e4e7c91461030d5780634c6fe6a21461031b578063593c7b271461033b5780637730f4fa1461034e5780637ba8dcd6146103715780637bd6ec4a146103795780637cf8031e1461038c5780638a25ad241461039f575b600080fd5b6102006101fb366004612f47565b61054d565b005b610200610210366004612fde565b6105e0565b6102006102233660046130eb565b610677565b610200610236366004612fde565b6106fe565b610200610791565b610256610251366004612f47565b610830565b6040516102639190613127565b60405180910390f35b61020061027a36600461316b565b610892565b61020061028d36600461323d565b6108e9565b6102a56102a0366004613274565b6109d2565b6040516102639190613383565b6102c56102c036600461341f565b6109f6565b60405163ffffffff9091168152602001610263565b6102006102e836600461316b565b610a56565b6103006102fb366004612f47565b610b03565b604051610263919061343a565b600f5463ffffffff166102c5565b61032e61032936600461344d565b610baf565b6040516102639190613472565b6102006103493660046134f2565b6111d2565b61036161035c36600461341f565b611229565b6040519015158152602001610263565b61030061125a565b6102a5610387366004613526565b611267565b61020061039a3660046135c8565b61145b565b6102006103ad36600461341f565b6114c8565b6102566103c0366004612f47565b611532565b6103d86103d3366004613274565b6115a5565b60405161026391906135fc565b6102006103f336600461360f565b611c27565b610200610406366004612f47565b611cbc565b6102c5610419366004613642565b611d05565b61020061042c366004613666565b611fb1565b61020061043f3660046134f2565b612017565b610361610452366004613642565b61208e565b60005461046a906001600160a01b031681565b6040516001600160a01b039091168152602001610263565b610361610490366004613642565b60026020526000908152604090205460ff1681565b6102006104b336600461341f565b6120c5565b610200612125565b6102006104ce3660046136b3565b612177565b6102006104e13660046134f2565b61222d565b6103006104f4366004613526565b612284565b6103d8610507366004613274565b6122a4565b61020061051a366004613642565b61288c565b61020061052d3660046135c8565b61292c565b610200610540366004613787565b612a2a565b610200612b0c565b6000546001600160a01b031633146105805760405162461bcd60e51b8152600401610577906137a5565b60405180910390fd5b606481111561058e57600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b8054919290916105d89084906137e1565b909155505050565b6000546001600160a01b0316331461060a5760405162461bcd60e51b8152600401610577906137a5565b805161061557600080fd5b60005b815181101561067357600160026000848481518110610639576106396137f9565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610618565b5050565b6000546001600160a01b031633148061069f57503360009081526002602052604090205460ff165b6106bb5760405162461bcd60e51b81526004016105779061380f565b601080546001810182556000919091528151610673917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190612bfa565b6000546001600160a01b031633146107285760405162461bcd60e51b8152600401610577906137a5565b805161073357600080fd5b60005b815181101561067357600060026000848481518110610757576107576137f9565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610736565b6000546001600160a01b03163314806107b957503360009081526002602052604090205460ff165b6107d55760405162461bcd60e51b81526004016105779061380f565b6107e1600d6000612c7e565b6107ed600c6000612c9f565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b60008181526004602090815260409182902080548351818402810184019094528084526060939283018282801561088657602002820191906000526020600020905b815481526020019060010190808311610872575b50505050509050919050565b6000546001600160a01b03163314806108ba57503360009081526002602052604090205460ff165b6108d65760405162461bcd60e51b81526004016105779061380f565b8051610673906010906020840190612cbd565b6000546001600160a01b031633148061091157503360009081526002602052604090205460ff165b61092d5760405162461bcd60e51b81526004016105779061380f565b600a548263ffffffff161480156109415750805b1561098557600a545b60008181526003602052604090205460ff161561098157600854811061096f5750600a545b8061097981613835565b91505061094a565b600a555b600a548263ffffffff161115801561099a5750805b156109aa5763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b6109da612d16565b6109ed6109e683611d05565b8484611267565b90505b92915050565b60095460009063ffffffff831610610a1057506001919050565b60098263ffffffff1681548110610a2957610a296137f9565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b0316331480610a7e57503360009081526002602052604090205460ff165b610a9a5760405162461bcd60e51b81526004016105779061380f565b6064815110610aa857600080fd5b60005b8151811015610673576010828281518110610ac857610ac86137f9565b60209081029190910181015182546001810184556000938452928290208151610afa9491909101929190910190612bfa565b50600101610aab565b60108181548110610b1357600080fd5b906000526020600020016000915090508054610b2e90613850565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5a90613850565b8015610ba75780601f10610b7c57610100808354040283529160200191610ba7565b820191906000526020600020905b815481529060010190602001808311610b8a57829003601f168201915b505050505081565b60606000610bbb612b68565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061388b565b158015610cbb57506005546040516206259160e71b81526001600160a01b0390911690630312c88090610c78906004016138a8565b602060405180830381865afa158015610c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb9919061388b565b155b15610fa85783158015610d5557506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061388b565b15610d5f57600193505b831580610d6c5750601054155b15610dc25760408051600180825281830190925290816020015b6060815260200190600190039081610d865790505091508082600081518110610db157610db16137f9565b6020026020010181905250506109f0565b610dcd8460016137e1565b6001600160401b03811115610de457610de4612f60565b604051908082528060200260200182016040528015610e1757816020015b6060815260200190600190039081610e025790505b50915060005b848163ffffffff161015610f845760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610e5f9160040190815260200190565b6020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea291906138d1565b6010549091508110610eb2575060005b60108181548110610ec557610ec56137f9565b906000526020600020018054610eda90613850565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0690613850565b8015610f535780601f10610f2857610100808354040283529160200191610f53565b820191906000526020600020905b815481529060010190602001808311610f3657829003601f168201915b5050505050848363ffffffff1681518110610f7057610f706137f9565b602090810291909101015250600101610e1d565b5080828581518110610f9857610f986137f9565b60200260200101819052506111cb565b6040805160028082526060820190925290816020015b6060815260200190600190039081610fbe57505060105490925061100f576040518060200160405280600081525082600081518110610fff57610fff6137f9565b60200260200101819052506111ab565b601054600f5463ffffffff1610156110e557600f5460108054909163ffffffff1690811061103f5761103f6137f9565b90600052602060002001805461105490613850565b80601f016020809104026020016040519081016040528092919081815260200182805461108090613850565b80156110cd5780601f106110a2576101008083540402835291602001916110cd565b820191906000526020600020905b8154815290600101906020018083116110b057829003601f168201915b505050505082600081518110610fff57610fff6137f9565b60106000815481106110f9576110f96137f9565b90600052602060002001805461110e90613850565b80601f016020809104026020016040519081016040528092919081815260200182805461113a90613850565b80156111875780601f1061115c57610100808354040283529160200191611187565b820191906000526020600020905b81548152906001019060200180831161116a57829003601f168201915b50505050508260008151811061119f5761119f6137f9565b60200260200101819052505b80826001815181106111bf576111bf6137f9565b60200260200101819052505b5092915050565b6000546001600160a01b03163314806111fa57503360009081526002602052604090205460ff165b6112165760405162461bcd60e51b81526004016105779061380f565b8051610673906009906020840190612d58565b60006008548263ffffffff161080156109f057505063ffffffff1660009081526003602052604090205460ff161590565b60078054610b2e90613850565b61126f612d16565b611278846120c5565b6112856104e185846115a5565b6040518060c001604052808563ffffffff1681526020016112a5866109f6565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561132857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116112eb5790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611432916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb91906138d1565b6040518263ffffffff1660e01b81526004016113e991815260200190565b6020604051808303816000875af1158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906138d1565b85610baf565b815260200161144186856122a4565b8152602001611451868686612284565b9052949350505050565b6000546001600160a01b031633146114855760405162461bcd60e51b8152600401610577906137a5565b600c80546001810182556000919091528151610673917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190612e02565b6000546001600160a01b03163314806114f057503360009081526002602052604090205460ff165b61150c5760405162461bcd60e51b81526004016105779061380f565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c8281548110611547576115476137f9565b9060005260206000200180548060200260200160405190810160405280929190818152602001828054801561088657602002820191906000526020600020908154815260200190600101908083116108725750505050509050919050565b6060600b54600014156115b7576109f0565b60115460609060ff16156116405760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561163457602002820191906000526020600020905b815481526020019060010190808311611620575b505050505090506116a3565b63ffffffff84166000908152600460209081526040918290208054835181840281018401909452808452909183018282801561169b57602002820191906000526020600020905b815481526020019060010190808311611687575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170891906138d1565b905082516000141561171c575050506109f0565b82516001600160401b0381111561173557611735612f60565b60405190808252806020026020018201604052801561175e578160200160208202803683370190505b50935060608060005b8551811015611c1b57600c868281518110611784576117846137f9565b60200260200101518154811061179c5761179c6137f9565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156117f057602002820191906000526020600020905b8154815260200190600101908083116117dc575b5050505050915081516000141561183d576000878661180e81613835565b975081518110611820576118206137f9565b63ffffffff90921660209283029190910190910152600101611767565b815160011480156118855750600d8260008151811061185e5761185e6137f9565b602002602001015181548110611876576118766137f9565b90600052602060002001546064145b156118b1578160008151811061189d5761189d6137f9565b602002602001015187868061180e90613835565b81516001600160401b038111156118ca576118ca612f60565b6040519080825280602002602001820160405280156118f3578160200160208202803683370190505b5092506000805b8351811015611ab757845182141561191157611ab7565b838181518110611923576119236137f9565b60200260200101516000141561193b576001016118fa565b600084828151811061194f5761194f6137f9565b6020026020010151600d80549050111561199d57600d858381518110611977576119776137f9565b60200260200101518154811061198f5761198f6137f9565b906000526020600020015490505b8060641480611a5657506001600160a01b038b16634b0c7aad60648a8a87866119c6898c6137e1565b6119d091906137e1565b6119da91906137e1565b6119e491906137e1565b6119ee91906137e1565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5391906138d1565b81115b15611aae57848281518110611a6d57611a6d6137f9565b6020026020010151868480611a8190613835565b955081518110611a9357611a936137f9565b602002602001019063ffffffff16908163ffffffff16815250505b506001016118fa565b50600060018211611b1a5784600081518110611ad557611ad56137f9565b6020026020010151898880611ae990613835565b995081518110611afb57611afb6137f9565b602002602001019063ffffffff16908163ffffffff1681525050611c11565b60028210611c1157896001600160a01b0316634b0c7aad83888a868a51611b4191906137e1565b611b4b91906137e1565b611b5591906137e1565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba91906138d1565b90508451811015611bd757848181518110611ad557611ad56137f9565b60008988611be481613835565b995081518110611bf657611bf66137f9565b602002602001019063ffffffff16908163ffffffff16815250505b5050600101611767565b50505050505092915050565b6000546001600160a01b0316331480611c4f57503360009081526002602052604090205460ff165b611c6b5760405162461bcd60e51b81526004016105779061380f565b8060098363ffffffff1681548110611c8557611c856137f9565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611ce457503360009081526002602052604090205460ff165b611d005760405162461bcd60e51b81526004016105779061380f565b600855565b60006008546001148015611d2a5750600a5460009081526003602052604090205460ff165b15611d685760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b6044820152606401610577565b6005546040516206259160e71b81526001600160a01b0390911690630312c88090611d95906004016138a8565b602060405180830381865afa158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd6919061388b565b15611ef757600f8054600160201b900463ffffffff16906004611df8836138ea565b82546101009290920a63ffffffff818102199093169183160217909155600f805463ffffffff191692909116918217905560085411611e6157600a54600f805467ffffffffffffffff1916600160201b63ffffffff90931692830263ffffffff19161790911790555b600f5463ffffffff1660009081526003602052604090205460ff1615611ee957600854600f5463ffffffff1610611eaf57600a54600f805463ffffffff191663ffffffff9092169190911790555b600f805463ffffffff16906000611ec5836138ea565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611e61565b5050600f5463ffffffff1690565b60085460405163a0d0ca0f60e01b81526000916001600160a01b0385169163a0d0ca0f91611f2b9160040190815260200190565b6020604051808303816000875af1158015611f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6e91906138d1565b63ffffffff811660009081526003602052604090205490915060ff1680611f9d57506008548163ffffffff1610155b156109f05750600a5492915050565b919050565b6000546001600160a01b03163314611fdb5760405162461bcd60e51b8152600401610577906137a5565b80600c8363ffffffff1681548110611ff557611ff56137f9565b906000526020600020019080519060200190612012929190612e02565b505050565b6000546001600160a01b031633146120415760405162461bcd60e51b8152600401610577906137a5565b6000805260046020908152815161207d917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec9190840190612e3c565b50506011805460ff19166001179055565b600080546001600160a01b03838116911614806109f05750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b03163314806120ed57503360009081526002602052604090205460ff165b6121095760405162461bcd60e51b81526004016105779061380f565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b031633148061214d57503360009081526002602052604090205460ff165b6121695760405162461bcd60e51b81526004016105779061380f565b61217560106000612e7f565b565b6000546001600160a01b031633146121a15760405162461bcd60e51b8152600401610577906137a5565b80518251146121af57600080fd5b60005b8251811015612012578181815181106121cd576121cd6137f9565b6020026020010151600460008584815181106121eb576121eb6137f9565b602002602001015163ffffffff168152602001908152602001600020908051906020019061221a929190612e02565b508061222581613835565b9150506121b2565b6000546001600160a01b031633148061225557503360009081526002602052604090205460ff165b6122715760405162461bcd60e51b81526004016105779061380f565b805161067390600e906020840190612d58565b6040805180820190915260028152617b7d60f01b60208201529392505050565b606060006122b1846109f6565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa15801561231f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234391906138d1565b905060008111612351575060045b808263ffffffff16116125785760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af11580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed91906138d1565b83600081518110612400576124006137f9565b602002602001019063ffffffff16908163ffffffff1681525050818360018151811061242e5761242e6137f9565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af1158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad91906138d1565b836002815181106124c0576124c06137f9565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906125039060040161390e565b602060405180830381865afa158015612520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254491906138d1565b83600381518110612557576125576137f9565b602002602001019063ffffffff16908163ffffffff168152505050506109f0565b600061258a8263ffffffff851661394a565b6125959060016137e1565b905060006125a482600261395e565b90508360006125b483600261398a565b63ffffffff166001600160401b038111156125d1576125d1612f60565b6040519080825280602002602001820160405280156125fa578160200160208202803683370190505b50965060005b8363ffffffff168110156127355780158061262357506126216002826139b2565b155b156126c65760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612671573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269591906138d1565b8882815181106126a7576126a76137f9565b602002602001019063ffffffff16908163ffffffff168152505061272d565b6000826126d281613835565b93506126de90886139c6565b6126ee9063ffffffff86166139e5565b90508681116126fd57806126ff565b865b898381518110612711576127116137f9565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612600565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a491906138d1565b87600289516127b391906139e5565b815181106127c3576127c36137f9565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac9906128069060040161390e565b602060405180830381865afa158015612823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284791906138d1565b876001895161285691906139e5565b81518110612866576128666137f9565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b031633146128b65760405162461bcd60e51b8152600401610577906137a5565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b031633146129565760405162461bcd60e51b8152600401610577906137a5565b60005b8151811015610673576064828281518110612976576129766137f9565b602002602001015111156129d75760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b6064820152608401610577565b600d8282815181106129eb576129eb6137f9565b60209081029190910181015182546001818101855560009485529284200155600b805491929091612a1d9084906137e1565b9091555050600101612959565b6000546001600160a01b03163314612a545760405162461bcd60e51b8152600401610577906137a5565b6000546001600160a01b0383811691161415612aab5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610577565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b0316331480612b3457503360009081526002602052604090205460ff165b612b505760405162461bcd60e51b81526004016105779061380f565b612b5c60096000612e9d565b60006008819055600a55565b606060068054612b7790613850565b80601f0160208091040260200160405190810160405280929190818152602001828054612ba390613850565b8015612bf05780601f10612bc557610100808354040283529160200191612bf0565b820191906000526020600020905b815481529060010190602001808311612bd357829003601f168201915b5050505050905090565b828054612c0690613850565b90600052602060002090601f016020900481019282612c285760008555612c6e565b82601f10612c4157805160ff1916838001178555612c6e565b82800160010185558215612c6e579182015b82811115612c6e578251825591602001919060010190612c53565b50612c7a929150612ebe565b5090565b5080546000825590600052602060002090810190612c9c9190612ebe565b50565b5080546000825590600052602060002090810190612c9c9190612ed3565b828054828255906000526020600020908101928215612d0a579160200282015b82811115612d0a5782518051612cfa918491602090910190612bfa565b5091602001919060010190612cdd565b50612c7a929150612ef0565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090600701600890048101928215612c6e5791602002820160005b83821115612dc557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612d81565b8015612df55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612dc5565b5050612c7a929150612ebe565b828054828255906000526020600020908101928215612c6e5791602002820182811115612c6e578251825591602001919060010190612c53565b828054828255906000526020600020908101928215612c6e579160200282015b82811115612c6e578251829063ffffffff16905591602001919060010190612e5c565b5080546000825590600052602060002090810190612c9c9190612ef0565b508054600082556007016008900490600052602060002090810190612c9c91905b5b80821115612c7a5760008155600101612ebf565b80821115612c7a576000612ee78282612c7e565b50600101612ed3565b80821115612c7a576000612f048282612f0d565b50600101612ef0565b508054612f1990613850565b6000825580601f10612f29575050565b601f016020900490600052602060002090810190612c9c9190612ebe565b600060208284031215612f5957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612f9e57612f9e612f60565b604052919050565b60006001600160401b03821115612fbf57612fbf612f60565b5060051b60200190565b6001600160a01b0381168114612c9c57600080fd5b60006020808385031215612ff157600080fd5b82356001600160401b0381111561300757600080fd5b8301601f8101851361301857600080fd5b803561302b61302682612fa6565b612f76565b81815260059190911b8201830190838101908783111561304a57600080fd5b928401925b8284101561307157833561306281612fc9565b8252928401929084019061304f565b979650505050505050565b600082601f83011261308d57600080fd5b81356001600160401b038111156130a6576130a6612f60565b6130b9601f8201601f1916602001612f76565b8181528460208386010111156130ce57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156130fd57600080fd5b81356001600160401b0381111561311357600080fd5b61311f8482850161307c565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561315f57835183529284019291840191600101613143565b50909695505050505050565b6000602080838503121561317e57600080fd5b82356001600160401b038082111561319557600080fd5b818501915085601f8301126131a957600080fd5b81356131b761302682612fa6565b81815260059190911b830184019084810190888311156131d657600080fd5b8585015b8381101561320e578035858111156131f25760008081fd5b6132008b89838a010161307c565b8452509186019186016131da565b5098975050505050505050565b803563ffffffff81168114611fac57600080fd5b8015158114612c9c57600080fd5b6000806040838503121561325057600080fd5b6132598361321b565b915060208301356132698161322f565b809150509250929050565b6000806040838503121561328757600080fd5b6132908361321b565b9150602083013561326981612fc9565b600081518084526020808501945080840160005b838110156132d657815163ffffffff16875295820195908201906001016132b4565b509495945050505050565b6000815180845260005b81811015613307576020818501810151868301820152016132eb565b81811115613319576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156133765782840389526133648483516132e1565b9885019893509084019060010161334c565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c060608401526133bd60e08401826132a0565b90506060840151601f19808584030160808601526133db838361332e565b925060808601519150808584030160a08601526133f883836132a0565b925060a08601519150808584030160c08601525061341682826132e1565b95945050505050565b60006020828403121561343157600080fd5b6109ed8261321b565b6020815260006109ed60208301846132e1565b6000806040838503121561346057600080fd5b82359150602083013561326981612fc9565b6020815260006109ed602083018461332e565b600082601f83011261349657600080fd5b813560206134a661302683612fa6565b82815260059290921b840181019181810190868411156134c557600080fd5b8286015b848110156134e7576134da8161321b565b83529183019183016134c9565b509695505050505050565b60006020828403121561350457600080fd5b81356001600160401b0381111561351a57600080fd5b61311f84828501613485565b60008060006060848603121561353b57600080fd5b6135448461321b565b92506135526020850161321b565b9150604084013561356281612fc9565b809150509250925092565b600082601f83011261357e57600080fd5b8135602061358e61302683612fa6565b82815260059290921b840181019181810190868411156135ad57600080fd5b8286015b848110156134e757803583529183019183016135b1565b6000602082840312156135da57600080fd5b81356001600160401b038111156135f057600080fd5b61311f8482850161356d565b6020815260006109ed60208301846132a0565b6000806040838503121561362257600080fd5b61362b8361321b565b91506136396020840161321b565b90509250929050565b60006020828403121561365457600080fd5b813561365f81612fc9565b9392505050565b6000806040838503121561367957600080fd5b6136828361321b565b915060208301356001600160401b0381111561369d57600080fd5b6136a98582860161356d565b9150509250929050565b600080604083850312156136c657600080fd5b82356001600160401b03808211156136dd57600080fd5b6136e986838701613485565b935060209150818501358181111561370057600080fd5b8501601f8101871361371157600080fd5b803561371f61302682612fa6565b81815260059190911b8201840190848101908983111561373e57600080fd5b8584015b838110156137765780358681111561375a5760008081fd5b6137688c898389010161356d565b845250918601918601613742565b508096505050505050509250929050565b6000806040838503121561379a57600080fd5b823561325981612fc9565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156137f4576137f46137cb565b500190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b6000600019821415613849576138496137cb565b5060010190565b600181811c9082168061386457607f821691505b6020821081141561388557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561389d57600080fd5b815161365f8161322f565b6020808252600f908201526e696e6372656d656e74616c4d6f646560881b604082015260600190565b6000602082840312156138e357600080fd5b5051919050565b600063ffffffff80831681811415613904576139046137cb565b6001019392505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261395957613959613934565b500490565b600063ffffffff80831681851681830481118215151615613981576139816137cb565b02949350505050565b600063ffffffff8083168185168083038211156139a9576139a96137cb565b01949350505050565b6000826139c1576139c1613934565b500690565b60008160001904831182151516156139e0576139e06137cb565b500290565b6000828210156139f7576139f76137cb565b50039056fea26469706673582212201b60af1f14cc911069fe20307515e2b5c65f449dc0db0c90d811ca722bb24ec464736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0xe2A4755A9b489Fe957FCa6d8DD3Edb170a31921d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3136,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "disabledPaths",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3141,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathSections",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3144,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "valuesController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(InfinityMintValues)7075"
      },
      {
        "astId": 3147,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "tokenName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3150,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetsType",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3152,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3155,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathSizes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3157,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "safeDefaultReturnPath",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3159,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3163,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetsSections",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 3166,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetRarity",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3169,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "lastAssets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3172,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "nextPath",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3175,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "lastPath",
        "offset": 4,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3178,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "names",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3181,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "flatSections",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InfinityMintValues)7075": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}