{
  "address": "0x4fBA1571e9388fc77f99Eb42CE2aC059AfCC87C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "erc721Destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "EASWalletAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "EASRequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "EASRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "EASRequestDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "EASRequestWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "EASStickerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EASWallet",
      "outputs": [
        {
          "internalType": "contract InfinityMintWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "addRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStickerId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTokenId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "denyRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721TokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyRequests",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "result",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequests",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "result",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        }
      ],
      "name": "getSticker",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStickerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStickers",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "result",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        }
      ],
      "name": "isStickerFlagged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "setEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isFlagged",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "setFlaggedSticker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setStickerPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "EASWalletAddress",
          "type": "address"
        }
      ],
      "name": "setWalletAddresss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stickerPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stickerId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnershipToTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stickerId",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "packed",
          "type": "bytes"
        }
      ],
      "name": "updateSticker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valuesController",
      "outputs": [
        {
          "internalType": "contract InfinityMintValues",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyAuthenticity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "withdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55c028c6c58e9c327690d8b1c267f3ed0c7d5aaaf4c3c78b50e63c96297e41d1",
  "receipt": {
    "to": null,
    "from": "0x53395146bd3876AfdE239F7b29148bF60d80Aa68",
    "contractAddress": "0x4fBA1571e9388fc77f99Eb42CE2aC059AfCC87C3",
    "transactionIndex": 0,
    "gasUsed": "4140519",
    "logsBloom": "0x
    "blockHash": "0xd1105fd491108fe3cb9ede80cfde433b4cd2b32fa777d38075dc57ffae7711f2",
    "transactionHash": "0x55c028c6c58e9c327690d8b1c267f3ed0c7d5aaaf4c3c78b50e63c96297e41d1",
    "logs": [],
    "blockNumber": 170,
    "cumulativeGasUsed": "4140519",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0xBC8462CACd98d63252eC82ff666800DceB8C9815",
    "0xBC8462CACd98d63252eC82ff666800DceB8C9815",
    "0x10D725504b4cbA7bAdB9c7C549956763DB7c3900"
  ],
  "numDeployments": 1,
  "solcInputHash": "c554005d846e5256cfd947c8d0a331d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc721Destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"EASWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"EASRequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"EASRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"EASRequestDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"EASRequestWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"EASStickerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EASWallet\",\"outputs\":[{\"internalType\":\"contract InfinityMintWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"addRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStickerId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"denyRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRequests\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequests\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"}],\"name\":\"getSticker\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStickerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStickers\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"result\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"}],\"name\":\"isStickerFlagged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isFlagged\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setFlaggedSticker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setStickerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EASWalletAddress\",\"type\":\"address\"}],\"name\":\"setWalletAddresss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stickerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stickerId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnershipToTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stickerId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"packed\",\"type\":\"bytes\"}],\"name\":\"updateSticker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuesController\",\"outputs\":[{\"internalType\":\"contract InfinityMintValues\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyAuthenticity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xTinman.eth\",\"kind\":\"dev\",\"methods\":{\"acceptRequest(address,uint32)\":{\"details\":\"The index is relative to the amount of stickers the address has sent.\"},\"addRequest(bytes)\":{\"details\":\"Its up to the end user to validate the sticker and make sure it is safe. We do various validation and check summing to make sure things are okay.\"},\"approve(address,uint256)\":{\"details\":\"will Throw if tokenId does not exist\"},\"burn(uint32)\":{\"details\":\"will delete a sticker forever\"},\"constructor\":{\"details\":\"owner is made owner of this contract\"},\"denyRequest(address,uint32)\":{\"details\":\"The index is relative to the amount of stickers the address has sent.\"},\"isApprovedOrOwner(address,uint256)\":{\"details\":\"same as open zepps\"},\"ownerOf(uint256)\":{\"details\":\"will Throw if the token does not exist\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Emits a {Transfer} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenURI(uint256)\":{\"details\":\"Will use the sticker object as a tokenURI if none is set.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Emits a {Transfer} event.\"},\"updateSticker(uint32,bytes)\":{\"details\":\"NOTE: Right now the deployer does not have to approve changes.\"},\"withdrawRequest(uint32)\":{\"details\":\"The index is relative to the amount of stickers the address has sent.\"}},\"title\":\"InfinityMint Ethereum Ad Service Sticker ERC721\",\"version\":1},\"userdoc\":{\"events\":{\"EASRequestAccepted(uint32,address,uint256,bytes)\":{\"notice\":\"Emitted when a request is accepted\"},\"EASRequestAdded(uint32,address,uint256,bytes)\":{\"notice\":\"Emitted when a request is added\"},\"EASRequestDenied(uint32,address,uint256,bytes)\":{\"notice\":\"Emitted when a request is denied\"},\"EASRequestWithdrew(uint32,address,uint256,bytes)\":{\"notice\":\"Emitted when a request is withdrew\"},\"EASStickerUpdated(uint32,address,uint256,bytes)\":{\"notice\":\"Emitted when a request is added\"}},\"kind\":\"user\",\"methods\":{\"acceptRequest(address,uint32)\":{\"notice\":\"Accepts a sticker request, minting it as an ERC721\"},\"addRequest(bytes)\":{\"notice\":\"Adds a sticker request for the owner to accept.\"},\"approve(address,uint256)\":{\"notice\":\"Sets an approved adress for this token\"},\"balanceOf(address)\":{\"notice\":\"blanceOf returns the number of tokens an address currently holds.\"},\"burn(uint32)\":{\"notice\":\"Burns a sticker\"},\"denyRequest(address,uint32)\":{\"notice\":\"Denys a sticker request sending the requestee their money back.\"},\"erc721TokenId()\":{\"notice\":\"the erc721 token id must reference this contracts address\"},\"exists(uint256)\":{\"notice\":\"Returns true if a token exists.\"},\"getApproved(uint256)\":{\"notice\":\"Returns the approved adress for this token.\"},\"getIntegrity()\":{\"notice\":\"Verifys that a deployed contract matches the one we want.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Will returns true if the operator is approved by the owner address\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"will returns true if the address is apprroved for all, approved operator or is the owner of a token\"},\"name()\":{\"notice\":\"Returns the name of the ERC721  for display on places like Etherscan\"},\"ownerOf(uint256)\":{\"notice\":\"Returns the owner of a current token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Just like the method above except with no data field we pass to the implemeting contract.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Will approve an operator for the senders tokens\"},\"setWalletAddresss(address)\":{\"notice\":\"Sets the ethereum ad service wallet location\"},\"supportsInterface(bytes4)\":{\"notice\":\"this is used by opensea/polyscan to detect our ERC721\"},\"symbol()\":{\"notice\":\"Returns the symbol of the ERC721 for display on places like Polyscan\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the tokenURI for the sticker objects\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it.\"},\"transferOwnershipToTokenOwner()\":{\"notice\":\"This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId, in all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of the contract to the new owner\"},\"updateSticker(uint32,bytes)\":{\"notice\":\"Updates a sticker with new data.\"},\"verifyAuthenticity()\":{\"notice\":\"verifies that the current owner of this contract\"},\"versionType()\":{\"notice\":\"Should be the name of the contract or the name of this contract\"},\"withdrawRequest(uint32)\":{\"notice\":\"Withdraws a sticker request giving you back your money\"}},\"notice\":\"This is an ERC721 contract powering eads stickers, these are attached to every token minted by InfinityMint.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/legacy/EADStickers.sol\":\"EADStickers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './InfinityMintObject.sol';\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount, 're-entry');\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, 'not deployer');\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], 'not approved');\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, 'cannot modify deployer');\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiRevoke(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0xd37a41033d6a0329dcdc6da0eccbb7f743c5ab2206cd46d634969987ad0f557a\",\"license\":\"UNLICENSED\"},\"contracts/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC165.sol';\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd349bdc57616e68f5cff952df682414c781d9fd88d214091c8c270386bc5b675\",\"license\":\"MIT\"},\"contracts/ERC721.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './IERC721.sol';\\nimport './ERC165.sol';\\nimport './IERC165.sol';\\n\\n/// @title ERC-721 Infinity Mint Implementation\\n/// @author 0xTinman.eth\\n/// @notice This is a basic ERC721 Implementation that is designed to be as simple and gas efficient as possible.\\n/// @dev This contract supports tokenURI (the Metadata extension) but does not include the Enumerable extension.\\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    ///@notice Storage for the tokens\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => address) internal tokens; //(slot 0)\\n    ///@notice Storage the token metadata\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => string) internal uri; //(slot 1)\\n    ///@notice Storage the token metadata\\n    ///@dev indexed by tokenId\\n    mapping(uint256 => address) internal approvedTokens; //(slot 2)\\n    ///@notice Stores approved operators for the addresses tokens.\\n    mapping(address => mapping(address => bool)) internal operators; //(slot 3)\\n    ///@notice Stores the balance of tokens\\n    mapping(address => uint256) internal balance; //(slot 4)\\n\\n    ///@notice The name of the ERC721\\n    string internal _name; //(slot 5)\\n    ///@notice The Symbol of the ERC721\\n    string internal _symbol; //(slot 6)\\n\\n    /**\\n        @notice ERC721 Constructor takes tokenName and tokenSymbol\\n     */\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     * @notice this is used by opensea/polyscan to detect our ERC721\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n        @notice blanceOf returns the number of tokens an address currently holds.\\n     */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balance[_owner];\\n    }\\n\\n    /**\\n        @notice Returns the owner of a current token\\n        @dev will Throw if the token does not exist\\n     */\\n    function ownerOf(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(exists(_tokenId), 'invalid tokenId');\\n        return tokens[_tokenId];\\n    }\\n\\n    /**\\n        @notice Will approve an operator for the senders tokens\\n    */\\n    function setApprovalForAll(address _operator, bool _approved)\\n        public\\n        override\\n    {\\n        operators[_sender()][_operator] = _approved;\\n        emit ApprovalForAll(_sender(), _operator, _approved);\\n    }\\n\\n    /**\\n        @notice Will returns true if the operator is approved by the owner address\\n    */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return operators[_owner][_operator];\\n    }\\n\\n    /**\\n        @notice Returns the tokens URI Metadata object\\n    */\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return uri[_tokenId];\\n    }\\n\\n    /**\\n        @notice Returns the name of the ERC721  for display on places like Etherscan\\n    */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n        @notice Returns the symbol of the ERC721 for display on places like Polyscan\\n    */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n        @notice Returns the approved adress for this token.\\n    */\\n    function getApproved(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return approvedTokens[_tokenId];\\n    }\\n\\n    /**\\n        @notice Sets an approved adress for this token\\n        @dev will Throw if tokenId does not exist\\n    */\\n    function approve(address _to, uint256 _tokenId) public override {\\n        address owner = ERC721.ownerOf(_tokenId);\\n\\n        require(_to != owner, 'cannot approve owner');\\n        require(\\n            _sender() == owner || isApprovedForAll(owner, _sender()),\\n            'ERC721: approve caller is not token owner or approved for all'\\n        );\\n        approvedTokens[_tokenId] = _to;\\n        emit Approval(owner, _to, _tokenId);\\n    }\\n\\n    /**\\n        @notice Mints a token.\\n        @dev If you are transfering a token to a contract the contract will make sure that it can recieved the ERC721 (implements a IERC721Receiver) if it does not it will revert the transcation. Emits a {Transfer} event.\\n    */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) internal {\\n        require(_to != address(0x0), '0x0 mint');\\n        require(!exists(_tokenId), 'already minted');\\n\\n        balance[_to] += 1;\\n        tokens[_tokenId] = _to;\\n\\n        emit Transfer(address(0x0), _to, _tokenId);\\n\\n        //check that the ERC721 has been received\\n        require(\\n            checkERC721Received(_sender(), address(this), _to, _tokenId, _data)\\n        );\\n    }\\n\\n    /**\\n        @notice Returns true if a token exists.\\n     */\\n    function exists(uint256 _tokenId) public view returns (bool) {\\n        return tokens[_tokenId] != address(0x0);\\n    }\\n\\n    /// @notice Is ran before every transfer, overwrite this function with your own logic\\n    /// @dev Must return true else will revert\\n    function beforeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n\\n    /**\\n        @notice Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it.\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        require(\\n            isApprovedOrOwner(_sender(), _tokenId),\\n            'not approved or owner'\\n        );\\n        require(_from != address(0x0), 'sending to null address');\\n\\n        //before the transfer\\n        beforeTransfer(_from, _to, _tokenId);\\n\\n        delete approvedTokens[_tokenId];\\n        balance[_from] -= 1;\\n        balance[_to] += 1;\\n        tokens[_tokenId] = _to;\\n\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @notice will returns true if the address is apprroved for all, approved operator or is the owner of a token\\n    /// @dev same as open zepps\\n    function isApprovedOrOwner(address addr, uint256 tokenId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (addr == owner ||\\n            isApprovedForAll(owner, addr) ||\\n            getApproved(tokenId) == addr);\\n    }\\n\\n    /**\\n        @notice Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\n    }\\n\\n    /**\\n        @notice Just like the method above except with no data field we pass to the implemeting contract.\\n\\t\\t@dev Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        _safeTransferFrom(_from, _to, _tokenId, '');\\n    }\\n\\n    /**\\n        @notice Internal method to transfer the token and require that checkERC721Recieved is equal to true.\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private {\\n        transferFrom(_from, _to, _tokenId);\\n        //check that it implements an IERC721 receiver if it is a contract\\n        require(\\n            checkERC721Received(_sender(), _from, _to, _tokenId, _data),\\n            'ERC721 Receiver Confirmation Is Bad'\\n        );\\n    }\\n\\n    /**\\n        @notice Checks first if the to address is a contract, if it is it will confirm that the contract is an ERC721 implentor by confirming the selector returned as documented in the ERC721 standard. If the to address isnt a contract it will just return true. Based on the code inside of OpenZeppelins ERC721\\n     */\\n    function checkERC721Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!isContract(_to)) return true;\\n\\n        try\\n            IERC721Receiver(_to).onERC721Received(\\n                _operator,\\n                _from,\\n                _tokenId,\\n                _data\\n            )\\n        returns (bytes4 confirmation) {\\n            return (confirmation == IERC721Receiver.onERC721Received.selector);\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert('This contract does not implement an IERC721Receiver');\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    ///@notice secures msg.sender so it cannot be changed\\n    function _sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    ///@notice Returns true if the address is a contract\\n    ///@dev Sometimes doesnt work and contracts might be disgused as addresses\\n    function isContract(address _address) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd201520f9d43dd2cbcdb4fef31d1d6d32f72ebc25fc9e5d3b85b7d0f29107260\",\"license\":\"UNLICENSED\"},\"contracts/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol) (Thanks <3)\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC165.sol';\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, ERC721 Receiver\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd8b8d9bdde5c2b3b66dba994c1701cb11e1940a9164d059b6189ae6dcab83fbc\",\"license\":\"MIT\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport './InfinityMintUtil.sol';\\nimport './InfinityMintValues.sol';\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x0a87425c22c2712174729d193a7148fce4bd85244e381094211bf2b556894e07\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(\\n        uint256 _i\\n    ) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return string.concat(directory, file, extension);\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2) external pure returns (bool) {\\n    if (s1.length != s2.length) return false;\\n    for (uint256 i = 0; i < s1.length; i++) {\\n        if (s1[i] != s2[i]) return false;\\n    }\\n    return true;\\n}\\n\\n}\\n\",\"keccak256\":\"0xd256bbb4e2a9534e9a21ba4ae8bbf755c254c7d2ba5bd65e099e27f27277e3bc\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert('Invalid Value');\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xfc6def9724b4ef9aa3ace6bafaa9fc232c65788adb1349c9ce5f1f9681c3b078\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintWallet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './Authentication.sol';\\nimport './IERC721.sol';\\nimport './IntegrityInterface.sol';\\n\\ncontract InfinityMintWallet is\\n    Authentication,\\n    IERC721Receiver,\\n    IntegrityInterface\\n{\\n    /// @notice the version type of wallet this is\\n    bytes public walletType = 'Wallet';\\n    /// @notice the location of the main ERC721 contract this wallet was spawned from;\\n    address public erc721;\\n    /// @notice the main ERC721 contract this wallet is attached too\\n    uint32 public currentTokenId;\\n    /// @notice the value/balance of the current wallet\\n    uint256 private walletValue;\\n\\n    /// @notice Fired when a deposit is made\\n    event Deposit(address indexed sender, uint256 amount, uint256 newTotal);\\n    /// @notice Fired with a withdraw is made\\n    event Withdraw(address indexed sender, uint256 amount, uint256 newTotal);\\n\\n    /// @notice Creates new wallet contract, tokenId refers to the ERC721 contract this wallet was spawned from.\\n    /// @dev makes the owner field the owner of the contract not the deployer.\\n    /// @param tokenId the tokenId from the main ERC721 contract\\n    /// @param erc721Destination the main ERC721 contract\\n    constructor(uint32 tokenId, address erc721Destination) Authentication() {\\n        //this only refers to being allowed to deposit into the wallet\\n        currentTokenId = tokenId;\\n        erc721 = erc721Destination;\\n        walletValue = 0;\\n    }\\n\\n    /// @notice used by InfinityMintLinker to verify this contract is the one it says\\n    function getIntegrity()\\n        public\\n        view\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            bytes memory,\\n            bytes4\\n        )\\n    {\\n        return (\\n            address(this),\\n            deployer,\\n            currentTokenId,\\n            'wallet', //no version type with wallet\\n            type(IntegrityInterface).interfaceId\\n        );\\n    }\\n\\n    /// @notice Opts in this contract to receipt ERC721\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n\\t\\t@notice This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId,\\n\\t\\tin all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of\\n\\t\\tthe contract to the new owner\\n\\t */\\n    function transferOwnershipToTokenOwner() public onlyOnce {\\n        address owner = IERC721(erc721).ownerOf(currentTokenId);\\n        require(deployer != owner, 'owner of the token is the deployer');\\n        require(msg.sender == owner, 'sender must be the new owner');\\n\\n        transferOwnership(owner);\\n    }\\n\\n    function transfer(\\n        address erc721Destination,\\n        address to,\\n        uint256 tokenId\\n    ) public onlyApproved {\\n        (bool success, bytes memory returnData) = erc721Destination.call{\\n            value: 0\\n        }(\\n            abi.encodeWithSignature(\\n                'transfer(address,address,uint256)',\\n                address(this),\\n                address(to),\\n                tokenId\\n            )\\n        );\\n\\n        if (!success) {\\n            if (returnData.length == 0) revert('call reverted');\\n            else\\n                assembly {\\n                    let returndata_size := mload(returnData)\\n                    revert(add(32, returnData), returndata_size)\\n                }\\n        }\\n    }\\n\\n    /// @notice Returns the balance of the wallet\\n    function getBalance() public view returns (uint256) {\\n        return walletValue;\\n    }\\n\\n    /// @notice Allows anyone to deposit ERC20 into this wallet.\\n    function deposit() public payable onlyOnce {\\n        uint256 value = (msg.value);\\n        require(value >= 0);\\n\\n        walletValue = walletValue + value;\\n        emit Deposit(msg.sender, value, walletValue);\\n    }\\n\\n    /// @notice Allows you to withdraw\\n    function withdraw() public onlyOnce onlyApproved {\\n        //to stop re-entry attack\\n        uint256 balance = (walletValue);\\n        walletValue = 0;\\n        payable(deployer).transfer(balance);\\n        emit Withdraw(msg.sender, address(this).balance, walletValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd2ba582649b8f2b00974f154fec69235bde1c3de787c9083f2c6f5664eb30bc8\",\"license\":\"UNLICENSED\"},\"contracts/IntegrityInterface.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\ninterface IntegrityInterface {\\n    /**\\n\\t\\t@notice Verifys that a deployed contract matches the one we want.\\n\\t */\\n    function getIntegrity()\\n        external\\n        returns (\\n            address from,\\n            address owner,\\n            uint256 tokenId,\\n            bytes memory versionType,\\n            bytes4 intefaceId\\n        );\\n}\\n\",\"keccak256\":\"0xec18dfa0eab4cc87b02c518c4571825688c253a1e3587759a6b0dfe0a09a28f8\",\"license\":\"UNLICENSED\"},\"contracts/legacy/EADStickers.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport './Stickers.sol';\\nimport '../ERC721.sol';\\nimport '../IntegrityInterface.sol';\\n\\n/// @title InfinityMint Ethereum Ad Service Sticker ERC721\\n/// @author 0xTinman.eth\\n/// @notice This is an ERC721 contract powering eads stickers, these are attached to every token minted by InfinityMint.\\n/// @dev\\ncontract EADStickers is Stickers, ERC721 {\\n    /// @notice the erc721 token id must reference this contracts address\\n    uint256 public erc721TokenId;\\n\\n    /// @notice Emitted when a request is accepted\\n    event EASRequestAccepted(\\n        uint32 stickerId,\\n        address indexed sender,\\n        uint256 price,\\n        bytes packed\\n    );\\n    /// @notice Emitted when a request is denied\\n    event EASRequestDenied(\\n        uint32 requestId,\\n        address indexed sender,\\n        uint256 price,\\n        bytes packed\\n    );\\n    /// @notice Emitted when a request is withdrew\\n    event EASRequestWithdrew(\\n        uint32 requestId,\\n        address indexed sender,\\n        uint256 price,\\n        bytes packed\\n    );\\n    /// @notice Emitted when a request is added\\n    event EASRequestAdded(\\n        uint32 requestId,\\n        address indexed sender,\\n        uint256 price,\\n        bytes packed\\n    );\\n    /// @notice Emitted when a request is added\\n    event EASStickerUpdated(\\n        uint32 requestId,\\n        address indexed sender,\\n        uint256 price,\\n        bytes packed\\n    );\\n\\n    /// @dev owner is made owner of this contract\\n    constructor(\\n        uint32 tokenId,\\n        address erc721Destination,\\n        address EASWalletAddress,\\n        address valuesContract\\n    ) ERC721('EADS Sticker', 'EADS') Stickers(valuesContract) {\\n        erc721TokenId = tokenId;\\n        erc721 = erc721Destination;\\n        EASWallet = InfinityMintWallet(EASWalletAddress);\\n        versionType = 'EADStickers'; // Should be the contract name\\n    }\\n\\n    /**\\n\\t\\t@notice This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId,\\n\\t\\tin all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of\\n\\t\\tthe contract to the new owner\\n\\t */\\n    function transferOwnershipToTokenOwner() public onlyOnce {\\n        address owner = IERC721(erc721).ownerOf(erc721TokenId);\\n        require(deployer != owner, 'owner of the token is the deployer');\\n        require(msg.sender == owner, 'sender must be the new owner');\\n        transferOwnership(owner);\\n    }\\n\\n    function getIntegrity()\\n        public\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            bytes memory,\\n            bytes4\\n        )\\n    {\\n        return (\\n            address(this),\\n            deployer,\\n            erc721TokenId,\\n            versionType,\\n            type(IntegrityInterface).interfaceId\\n        );\\n    }\\n\\n    /// @notice  Sets the ethereum ad service wallet location\\n    function setWalletAddresss(address EASWalletAddress) public onlyDeployer {\\n        require(isContract(EASWalletAddress), 'is not a contract');\\n        require(\\n            InfinityMintWallet(EASWalletAddress).deployer() == deployer,\\n            'the deployer for this contract and the wallet contract must be the same'\\n        );\\n\\n        EASWallet = InfinityMintWallet(EASWalletAddress);\\n    }\\n\\n    /// @notice verifies that the current owner of this contract\\n    function verifyAuthenticity() external view override returns (bool) {\\n        //first we check if the current deployer of this contract is approved or the owner of the tokenID it is attached too\\n        (bool success, bytes memory returnData) = erc721.staticcall(\\n            abi.encodeWithSignature(\\n                'isApprovedOrOwner(uint256,address)',\\n                erc721TokenId,\\n                deployer\\n            )\\n        );\\n\\n        //invalid token id\\n        if (!success) return false;\\n        //if we aren't, then the deployer isn't approved to the tokenId is linked too\\n        if (!abi.decode(returnData, (bool))) return false;\\n\\n        return true;\\n    }\\n\\n    /// @notice  Updates a sticker with new data.\\n    /// @dev NOTE: Right now the deployer does not have to approve changes.\\n    function updateSticker(uint32 stickerId, bytes memory packed) public {\\n        address sender = (msg.sender);\\n\\n        require(isApprovedOrOwner(sender, uint256(stickerId))); // ERC721 permissions can update the sticker\\n        require(isSafe(packed, erc721TokenId), 'your packed sticker is unsafe');\\n        require(\\n            enabled,\\n            'stickers are not enabled right now and need to be enabled in order to update'\\n        );\\n\\n        (, , , address theirOwner) = unpackSticker(packed);\\n        (, , , address actualOwner) = unpackSticker(stickers[stickerId]);\\n\\n        require(theirOwner == actualOwner, 'trying to change the owner');\\n\\n        stickers[stickerId] = packed;\\n    }\\n\\n    /// @notice See {ERC721}\\n    function beforeTransfer(\\n        address,\\n        address to,\\n        uint256 _tokenId\\n    ) internal override {\\n        uint32 tokenId = uint32(_tokenId);\\n\\n        (, string memory checkSum, string memory object, ) = unpackSticker(\\n            stickers[tokenId]\\n        );\\n\\n        //save the sticker to point to the new owner\\n        stickers[tokenId] = abi.encode(tokenId, checkSum, object, to);\\n    }\\n\\n    /// @notice Burns a sticker\\n    /// @dev will delete a sticker forever\\n    function burn(uint32 stickerId) public {\\n        require(isApprovedOrOwner(_sender(), stickerId));\\n\\n        delete stickers[stickerId]; //delete the data for the sticker\\n        delete approvedTokens[stickerId]; //delete approved\\n\\n        tokens[stickerId] = address(0x0);\\n        balance[_sender()] -= 1;\\n    }\\n\\n    /// @notice  Accepts a sticker request, minting it as an ERC721\\n    /// @dev The index is relative to the amount of stickers the address has sent.\\n    function acceptRequest(address sender, uint32 index)\\n        public\\n        override\\n        onlyApproved\\n        onlyOnce\\n    {\\n        require(requests[sender][index].length != 0);\\n\\n        (uint256 price, address savedSender, bytes memory packed) = abi.decode(\\n            requests[sender][index],\\n            (uint256, address, bytes)\\n        );\\n        require(sender == savedSender, 'sender and saved sender are different');\\n\\n        //mint the sticker\\n        ERC721.mint(savedSender, currentStickerId, packed);\\n        //save the sticker\\n        stickers[currentStickerId] = abi.encode(price, savedSender, packed);\\n\\n        //send the royalty\\n        //if the price is greater than 100 wei or zero, we hit back the parent ERC721 with the royalty cut\\n        if (\\n            (price > 100 || price == 0) &&\\n            valuesController.tryGetValue('stickerSplit') >= 2\\n        ) {\\n            //this is what we went back to parent ERC721\\n            uint256 cut = 0;\\n\\n            //if the price is not equal to zero, do the math.\\n            if (price != 0) {\\n                cut =\\n                    (price / 100) *\\n                    valuesController.tryGetValue('stickerSplit');\\n\\n                //deduct the cut from the value that the deployer holds onto\\n                if (price - cut > 0) price = price - cut;\\n                //else set the cut to zero\\n            }\\n\\n            (bool success, bytes memory returnData) = address(erc721).call{\\n                value: cut\\n            }(\\n                abi.encodeWithSignature(\\n                    'depositStickerRoyalty(uint32)',\\n                    erc721TokenId\\n                )\\n            );\\n\\n            if (!success) {\\n                if (returnData.length == 0)\\n                    revert('cannot deposit royalty to main ERC721');\\n                else\\n                    assembly {\\n                        let returndata_size := mload(returnData)\\n                        revert(add(32, returnData), returndata_size)\\n                    }\\n            }\\n\\n            //send it to the wallet currently associated with this sticker contract\\n            EASWallet.deposit{ value: price }();\\n        }\\n\\n        //delete the old now acccepted request\\n        deleteRequest(sender, index);\\n        //emit\\n        emit EASRequestAccepted(currentStickerId++, sender, price, packed);\\n    }\\n\\n    /// @notice  Returns the tokenURI for the sticker objects\\n    /// @dev Will use the sticker object as a tokenURI if none is set.\\n    function tokenURI(uint256 stickerId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        if (\\n            bytes(uri[stickerId]).length == 0 &&\\n            stickers[uint32(stickerId)].length == 0\\n        ) revert('Token URI for non existent token');\\n\\n        if (bytes(uri[stickerId]).length != 0) return uri[stickerId];\\n\\n        require(\\n            isSafe(stickers[uint32(stickerId)], erc721TokenId),\\n            'request is not safely packed'\\n        );\\n\\n        (, , string memory object, ) = unpackSticker(\\n            stickers[uint32(stickerId)]\\n        );\\n\\n        return object;\\n    }\\n\\n    /// @notice  Adds a sticker request for the owner to accept.\\n    /// @dev Its up to the end user to validate the sticker and make sure it is safe. We do various validation and check summing to make sure things are okay.\\n    function addRequest(bytes memory packed) public payable override onlyOnce {\\n        require(msg.value == stickerPrice, 'not the sticker price');\\n        require(isSafe(packed, erc721TokenId), 'your packed sticker is unsafe');\\n        require(enabled, 'no new stickers can be added right now');\\n        address sender = (msg.sender);\\n        require(\\n            balanceOf(msg.sender) < 100,\\n            'you have minted the maximum amount of stickers to this wallet, use another wallet to mint more.'\\n        );\\n\\n        //add it!\\n        requests[sender].push(abi.encode(msg.value, sender, packed));\\n        if (!hasOpenRequests(sender)) openRequests.push(sender);\\n\\n        emit EASRequestAdded(\\n            uint32(requests[sender].length - 1),\\n            sender,\\n            msg.value,\\n            packed\\n        ); //emit\\n    }\\n\\n    /// @notice  Withdraws a sticker request giving you back your money\\n    /// @dev The index is relative to the amount of stickers the address has sent.\\n    function withdrawRequest(uint32 index) public override onlyOnce {\\n        address sender = (msg.sender);\\n\\n        require(requests[sender][index].length != 0);\\n\\n        (uint256 price, address savedSender, bytes memory packed) = abi.decode(\\n            requests[sender][index],\\n            (uint256, address, bytes)\\n        );\\n\\n        //require the current sender and the saved sender to be the same\\n        require(savedSender == sender);\\n        //transfer\\n        payable(savedSender).transfer(price); //transfer back the price to the sender\\n        //delete the rquest\\n        deleteRequest(sender, index);\\n        //emit\\n        emit EASRequestWithdrew(index, savedSender, price, packed);\\n    }\\n\\n    /// @notice  Denys a sticker request sending the requestee their money back.\\n    /// @dev The index is relative to the amount of stickers the address has sent.\\n    function denyRequest(address sender, uint32 index)\\n        public\\n        override\\n        onlyApproved\\n        onlyOnce\\n    {\\n        require(requests[sender][index].length != 0);\\n\\n        (uint256 price, address savedSender, bytes memory packed) = abi.decode(\\n            requests[sender][index],\\n            (uint256, address, bytes)\\n        );\\n\\n        //delete the request\\n        deleteRequest(sender, index);\\n        //send the money back to the sender of the sticker offer\\n        payable(savedSender).transfer(price);\\n        emit EASRequestDenied(index, sender, price, packed);\\n    }\\n}\\n\",\"keccak256\":\"0xc80ac8885a3dceda357c9e0c951ad892537e85076a6b7d66885e4ac47b13e304\",\"license\":\"UNLICENSED\"},\"contracts/legacy/StickerInterface.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\ninterface StickerInterface {\\n    function acceptRequest(address sender, uint32 index) external;\\n\\n    function addRequest(bytes memory packed) external payable;\\n\\n    function withdrawRequest(uint32 index) external;\\n\\n    function denyRequest(address sender, uint32 index) external;\\n\\n    function getStickers() external view returns (uint32[] memory result);\\n\\n    function verifyAuthenticity() external view returns (bool);\\n\\n    function getSticker(uint32 stickerId)\\n        external\\n        view\\n        returns (bytes memory result);\\n\\n    function getRequests() external view returns (bytes[] memory result);\\n\\n    function getRequestCount() external view returns (uint256);\\n\\n    function getStickerCount() external view returns (uint256);\\n\\n    function getMyRequests() external view returns (bytes[] memory result);\\n}\\n\",\"keccak256\":\"0xd2a6a96a7059775719bc5b2073ac5610b855dd07f5875d3aec4becf875fa14ce\",\"license\":\"UNLICENSED\"},\"contracts/legacy/Stickers.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//0xTinman.eth 2021\\npragma solidity ^0.8.0;\\n\\nimport '../InfinityMintWallet.sol';\\nimport './StickerInterface.sol';\\nimport '../IntegrityInterface.sol';\\nimport '../Authentication.sol';\\n\\nabstract contract Stickers is\\n    StickerInterface,\\n    IntegrityInterface,\\n    Authentication\\n{\\n    /// @notice Should be the name of the contract or the name of this contract\\n    bytes public versionType = 'Stickers';\\n    address public erc721;\\n    uint32 public currentTokenId;\\n    uint256 public stickerPrice;\\n    uint32 public currentStickerId;\\n    address[] public openRequests;\\n\\n    bool internal enabled;\\n\\n    InfinityMintWallet public EASWallet;\\n    InfinityMintValues public valuesController;\\n\\n    mapping(uint32 => bytes) internal flags;\\n    mapping(uint32 => bytes) internal stickers;\\n    mapping(address => bytes[]) internal requests;\\n\\n    constructor(address valuesContract) {\\n        enabled = true;\\n        valuesController = InfinityMintValues(valuesContract);\\n        stickerPrice = 1 * valuesController.tryGetValue('baseTokenValue');\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return currentStickerId;\\n    }\\n\\n    function verifyAuthenticity()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    function setStickerPrice(uint256 price) public onlyApproved {\\n        stickerPrice = price;\\n    }\\n\\n    function setEnabled(bool isEnabled) public onlyDeployer {\\n        enabled = isEnabled;\\n    }\\n\\n    function isStickerFlagged(\\n        uint32 stickerId\\n    ) external view returns (bool, string memory) {\\n        if (flags[stickerId].length == 0) return (false, '');\\n        return abi.decode(flags[stickerId], (bool, string));\\n    }\\n\\n    function setFlaggedSticker(\\n        uint32 stickerId,\\n        bool isFlagged,\\n        string memory reason\\n    ) public onlyDeployer {\\n        require(stickerId < currentStickerId);\\n\\n        if (!isFlagged && flags[stickerId].length != 0) delete flags[stickerId];\\n        else flags[stickerId] = abi.encode(isFlagged, reason);\\n    }\\n\\n    function getMyRequests() public view returns (bytes[] memory result) {\\n        require(requests[msg.sender].length != 0, 'no requests'); //check if user has any requests (if not, return empty array\\n        bytes[] memory temp = requests[msg.sender];\\n        return temp;\\n    }\\n\\n    function getSticker(\\n        uint32 stickerId\\n    ) external view override returns (bytes memory result) {\\n        require(stickers[stickerId].length != 0);\\n        return stickers[stickerId];\\n    }\\n\\n    function getStickerCount() external view override returns (uint256) {\\n        return uint256(currentStickerId);\\n    }\\n\\n    function getStickers()\\n        external\\n        view\\n        override\\n        returns (uint32[] memory result)\\n    {\\n        uint32 count = 0;\\n        for (uint32 i = 0; i < currentStickerId; ) {\\n            if (stickers[i].length != 0) count++;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (count != 0) {\\n            //ceate new array with the size of count\\n            result = new uint32[](count);\\n            count = 0; //reset count\\n            for (uint32 i = 0; i < currentStickerId; ) {\\n                if (stickers[i].length != 0) result[count++] = i;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getRequests()\\n        public\\n        view\\n        onlyApproved\\n        returns (bytes[] memory result)\\n    {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < openRequests.length; ) {\\n            count += requests[openRequests[i]].length;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        result = new bytes[](count);\\n        count = 0;\\n        for (uint256 i = 0; i < openRequests.length; ) {\\n            for (uint256 x = 0; x < requests[openRequests[i]].length; ) {\\n                result[count++] = requests[openRequests[i]][x];\\n\\n                unchecked {\\n                    ++x;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function getRequestCount() external view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < openRequests.length; ) {\\n            count += requests[openRequests[i]].length;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function removeFromOpenRequests(address addr) internal {\\n        if (openRequests.length - 1 == 0) {\\n            openRequests = new address[](0);\\n            return;\\n        }\\n\\n        address[] memory temp = new address[](openRequests.length - 1);\\n        address[] memory copy = (openRequests);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < copy.length; ) {\\n            if (copy[i] == addr) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            temp[index++] = copy[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        openRequests = temp;\\n    }\\n\\n    function hasOpenRequests(address addr) internal view returns (bool) {\\n        for (uint256 i = 0; i < openRequests.length; ) {\\n            if (openRequests[i] == addr) return true;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isSafe(\\n        bytes memory _p,\\n        uint256 erc721TokenId\\n    ) internal pure returns (bool) {\\n        //will call exception if it is bad\\n        (uint32 tokenId, , , ) = unpackSticker(_p);\\n        return tokenId == erc721TokenId;\\n    }\\n\\n    function unpackSticker(\\n        bytes memory sticker\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint32 tokenId,\\n            string memory checkSum,\\n            string memory object,\\n            address owner\\n        )\\n    {\\n        return abi.decode(sticker, (uint32, string, string, address));\\n    }\\n\\n    function deleteRequest(address sender, uint256 index) internal {\\n        //if this is the last request\\n        if (requests[sender].length - 1 <= 0) {\\n            requests[sender] = new bytes[](0);\\n            removeFromOpenRequests(sender);\\n            return;\\n        }\\n\\n        //create new temp\\n        bytes[] memory temp = new bytes[](requests[sender].length - 1);\\n        //copy to memory so not accessing storage\\n        bytes[] memory copy = (requests[sender]);\\n        uint256 count = 0; //temps index\\n        //for length of copy\\n        for (uint256 i = 0; i < copy.length; ) {\\n            //if i !== the deleted index add it to the new temp array\\n            if (i != index) temp[count++] = copy[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        //overwrite\\n        requests[sender] = temp;\\n\\n        //remove this request\\n        if (requests[sender].length == 0) removeFromOpenRequests(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x96d3b61a1eec4b882456c690b3355345bf871c8f81bbc62b431ae0de380f466f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "0xTinman.eth",
    "kind": "dev",
    "methods": {
      "acceptRequest(address,uint32)": {
        "details": "The index is relative to the amount of stickers the address has sent."
      },
      "addRequest(bytes)": {
        "details": "Its up to the end user to validate the sticker and make sure it is safe. We do various validation and check summing to make sure things are okay."
      },
      "approve(address,uint256)": {
        "details": "will Throw if tokenId does not exist"
      },
      "burn(uint32)": {
        "details": "will delete a sticker forever"
      },
      "constructor": {
        "details": "owner is made owner of this contract"
      },
      "denyRequest(address,uint32)": {
        "details": "The index is relative to the amount of stickers the address has sent."
      },
      "isApprovedOrOwner(address,uint256)": {
        "details": "same as open zepps"
      },
      "ownerOf(uint256)": {
        "details": "will Throw if the token does not exist"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Emits a {Transfer} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenURI(uint256)": {
        "details": "Will use the sticker object as a tokenURI if none is set."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Emits a {Transfer} event."
      },
      "updateSticker(uint32,bytes)": {
        "details": "NOTE: Right now the deployer does not have to approve changes."
      },
      "withdrawRequest(uint32)": {
        "details": "The index is relative to the amount of stickers the address has sent."
      }
    },
    "title": "InfinityMint Ethereum Ad Service Sticker ERC721",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EASRequestAccepted(uint32,address,uint256,bytes)": {
        "notice": "Emitted when a request is accepted"
      },
      "EASRequestAdded(uint32,address,uint256,bytes)": {
        "notice": "Emitted when a request is added"
      },
      "EASRequestDenied(uint32,address,uint256,bytes)": {
        "notice": "Emitted when a request is denied"
      },
      "EASRequestWithdrew(uint32,address,uint256,bytes)": {
        "notice": "Emitted when a request is withdrew"
      },
      "EASStickerUpdated(uint32,address,uint256,bytes)": {
        "notice": "Emitted when a request is added"
      }
    },
    "kind": "user",
    "methods": {
      "acceptRequest(address,uint32)": {
        "notice": "Accepts a sticker request, minting it as an ERC721"
      },
      "addRequest(bytes)": {
        "notice": "Adds a sticker request for the owner to accept."
      },
      "approve(address,uint256)": {
        "notice": "Sets an approved adress for this token"
      },
      "balanceOf(address)": {
        "notice": "blanceOf returns the number of tokens an address currently holds."
      },
      "burn(uint32)": {
        "notice": "Burns a sticker"
      },
      "denyRequest(address,uint32)": {
        "notice": "Denys a sticker request sending the requestee their money back."
      },
      "erc721TokenId()": {
        "notice": "the erc721 token id must reference this contracts address"
      },
      "exists(uint256)": {
        "notice": "Returns true if a token exists."
      },
      "getApproved(uint256)": {
        "notice": "Returns the approved adress for this token."
      },
      "getIntegrity()": {
        "notice": "Verifys that a deployed contract matches the one we want."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Will returns true if the operator is approved by the owner address"
      },
      "isApprovedOrOwner(address,uint256)": {
        "notice": "will returns true if the address is apprroved for all, approved operator or is the owner of a token"
      },
      "name()": {
        "notice": "Returns the name of the ERC721  for display on places like Etherscan"
      },
      "ownerOf(uint256)": {
        "notice": "Returns the owner of a current token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Just like the method above except with no data field we pass to the implemeting contract."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Just like transferFrom except we will check if the to address is a contract and is an IERC721Receiver implementer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Will approve an operator for the senders tokens"
      },
      "setWalletAddresss(address)": {
        "notice": "Sets the ethereum ad service wallet location"
      },
      "supportsInterface(bytes4)": {
        "notice": "this is used by opensea/polyscan to detect our ERC721"
      },
      "symbol()": {
        "notice": "Returns the symbol of the ERC721 for display on places like Polyscan"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the tokenURI for the sticker objects"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers a token fsrom one address to another. Use safeTransferFrom as that will double check that the address you send this token too is a contract that can actually receive it."
      },
      "transferOwnershipToTokenOwner()": {
        "notice": "This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId, in all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of the contract to the new owner"
      },
      "updateSticker(uint32,bytes)": {
        "notice": "Updates a sticker with new data."
      },
      "verifyAuthenticity()": {
        "notice": "verifies that the current owner of this contract"
      },
      "versionType()": {
        "notice": "Should be the name of the contract or the name of this contract"
      },
      "withdrawRequest(uint32)": {
        "notice": "Withdraws a sticker request giving you back your money"
      }
    },
    "notice": "This is an ERC721 contract powering eads stickers, these are attached to every token minted by InfinityMint.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14934,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "versionType",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14936,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "erc721",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 14938,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "currentTokenId",
        "offset": 20,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 14940,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "stickerPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14942,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "currentStickerId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 14945,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "openRequests",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14947,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "enabled",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 14950,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "EASWallet",
        "offset": 1,
        "slot": "8",
        "type": "t_contract(InfinityMintWallet)7345"
      },
      {
        "astId": 14953,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "valuesController",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(InfinityMintValues)7070"
      },
      {
        "astId": 14957,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "flags",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint32,t_bytes_storage)"
      },
      {
        "astId": 14961,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "stickers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_bytes_storage)"
      },
      {
        "astId": 14966,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "requests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_bytes_storage)dyn_storage)"
      },
      {
        "astId": 742,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "tokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 747,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "uri",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 752,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "approvedTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 759,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "operators",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 764,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "balance",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 767,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "_name",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "_symbol",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 13996,
        "contract": "contracts/legacy/EADStickers.sol:EADStickers",
        "label": "erc721TokenId",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(InfinityMintValues)7070": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_contract(InfinityMintWallet)7345": {
        "encoding": "inplace",
        "label": "contract InfinityMintWallet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}