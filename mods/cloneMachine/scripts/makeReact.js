const { run, ethers, deployments, getChainId } = require('hardhat');
const Controller = require('../../../src/Controller');

const NginxStub = `
# Generated by InfinityMint
# clone #%cloneId%
server {

    root /var/www/%stem%%cloneId%_%folder%/html;
    index index.html index.htm;

    server_name %stemDot%%cloneId%.%domain%;

    location / {
            try_files $uri $uri/ /index.html$is_args$args;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/infinitymint.app-0001/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/infinitymint.app-0001/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = %stemDot%%cloneId%.%domain%) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;

    server_name %stemDot%%cloneId%.%domain%;
    return 404; # managed by Certbot
}`;

const renderStub = (values) => {
    let stub = NginxStub;
    Object.keys(values).forEach((key) => {
        let newKey = '%' + key + '%';
        if (key == 'stem') {
            stub = stub.replaceAll(
                '%' + key + 'Dot' + '%',
                values[key].trim().length !== 0 ? values[key] + '.' : ''
            );
            stub = stub.replaceAll(
                newKey,
                values[key].trim().length !== 0 ? values[key] + '_' : ''
            );
        } else stub = stub.replaceAll(newKey, values[key]);
    });
    return stub;
};

const Script = async ({
    args,
    deployedProject,
    undeployedProject,
    get,
    deploy,
    deployer,
}) => {
    let clones = deployedProject.clones;

    if (clones === undefined || clones.length === 0)
        throw new Error(
            'no clones in project file, please deploy some clones first...'
        );

    if (Controller.settings.cloneRootFolder === undefined) {
        console.log(
            '\n> Please select a root location for all the react builds to go'
                .cyan
        );
        Controller.settings.cloneRootFolder = await Controller.getDriveLocation(
            false,
            'a root location for all the react builds to go, make sure there is lots of space in that'
        );
    } else {
        console.log('\nNote:'.cyan);
        console.log(
            'using saved react root location to put builds in: ' +
                Controller.settings.cloneRootFolder
        );
        let result = await Controller.newQuestion('is this okay? y/n: ');

        if (result.toLowerCase()[0] !== 'y')
            Controller.settings.cloneRootFolder =
                await Controller.getDriveLocation(
                    false,
                    'a root location for all the react builds to go, make sure there is lots of space in that'
                );
    }

    Controller.saveSettings();

    let stem;
    let domain;
    let getQuestions = async () => {
        stem = await Controller.newQuestion(
            'file stem (https://<stem>.<tokenid>.<domain>) [you can enter nothing to have no stem]: '
        );
        domain = await Controller.newQuestion(
            'domain name (with out https://): '
        );

        console.log('\n> Folder Preview (not real)'.magenta);
        for (let i = 0; i < 10; i++)
            console.log(
                `${
                    stem.trim().length !== 0 ? stem + '_' : ''
                }${i}_${domain.replace(/\./g, '_')}`
            );

        console.log('\n> Domain Preview (not real)'.magenta);
        for (let i = 0; i < 10; i++)
            console.log(
                `https://${
                    stem.trim().length !== 0 ? stem + '.' : ''
                }${i}.${domain}`
            );

        console.log('\n> Nginx Config Preview (not real)'.magenta);
        console.log(
            renderStub({
                stem: stem,
                domain: domain,
                folder: domain.replace(/\./g, '_'),
                cloneId: 0,
            })
        );

        console.log('\n');
        console.log(
            (
                'folder: ' +
                `${
                    stem.trim().length !== 0 ? stem + '_' : ''
                }0_${domain.replace(/\./g, '_')}`
            ).cyan
        );
        console.log(
            (
                'server name: ' +
                `${stem.trim().length !== 0 ? stem + '.' : ''}0.${domain}`
            ).cyan
        );

        console.log('\n');
        let q = await Controller.newQuestion('is this okay? y/n: ');
        if (q.toLowerCase()[0] !== 'y') {
            await getQuestions();
            return;
        }
    };
    await getQuestions();

    console.log('\n> Creating Nginx config files');
    for (let i = 0; i < clones.length; i++) {
        let clone = clones[i];
        let path = Controller.settings.cloneRootFolder + 'nginx/';

        if (!Controller.getFileSystem().existsSync(path))
            Controller.getFileSystem().mkdirSync(path);

        let folder =
            (stem.trim().length !== 0 ? stem + '_' : '') +
            clone.cloneId +
            '_' +
            domain.replace(/\./g, '_');
        let nginxConfig = renderStub({
            stem: stem,
            domain: domain,
            folder: domain.replace(/\./g, '_'),
            cloneId: clone.cloneId,
        });
        console.log('- writing ' + folder);
        Controller.getFileSystem().writeFileSync(path + folder, nginxConfig);
    }

    console.log('\n> Copying template'.cyan);

    if (
        Controller.getFileSystem().existsSync(
            Controller.settings.cloneRootFolder + 'template/'
        )
    )
        Controller.getFileSystem().rmdirSync(
            Controller.settings.cloneRootFolder + 'template/',
            {
                recursive: true,
                force: true,
            }
        );

    console.log(
        '- making folder ' + Controller.settings.cloneRootFolder + 'template/'
    );
    Controller.getFileSystem().mkdirSync(
        Controller.settings.cloneRootFolder + 'template/'
    );

    let copyRecursive = (root, a = undefined, b = undefined) => {
        a = a || Controller.settings.cloneRootFolder + 'template/';
        b = b || Controller.settings.reactLocation;
        if (!Controller.getFileSystem().existsSync(a + root))
            Controller.getFileSystem().mkdirSync(a + root);
        Controller.getFileSystem()
            .readdirSync(b + root, {
                withFileTypes: true,
            })
            .forEach((file) => {
                if (file.isFile()) {
                    console.log(
                        '- copying file ' +
                            (b + root + file.name) +
                            ' to ' +
                            (a + root + file.name)
                    );
                    Controller.getFileSystem().copyFileSync(
                        b + root + file.name,
                        a + root + file.name
                    );
                } else if (file.isDirectory()) {
                    copyRecursive(root + file.name + '/', a, b);
                }
            });
    };

    Controller.getFileSystem()
        .readdirSync(Controller.settings.reactLocation, {
            withFileTypes: true,
        })
        .filter(
            (file) =>
                file.name !== 'node_modules' &&
                file.name !== 'build' &&
                file.name !== '.git' &&
                file.name !== 'scripts'
        )
        .forEach((file) => {
            if (file.isFile()) {
                console.log(
                    '- copying file ' + file.name + ' to template folder'
                );
                Controller.getFileSystem().copyFileSync(
                    Controller.settings.reactLocation + file.name,
                    Controller.settings.cloneRootFolder +
                        'template/' +
                        file.name
                );
            } else if (file.isDirectory()) {
                copyRecursive(file.name + '/');
            }
        });

    for (let i = 0; i < clones.length; i++) {
        let clone = clones[i];
        let folder =
            (stem.trim().length !== 0 ? stem + '_' : '') +
            clone.cloneId +
            '_' +
            domain.replace(/\./g, '_');
        let path = Controller.settings.cloneRootFolder + folder + '/';

        if (!Controller.getFileSystem().existsSync(path))
            Controller.getFileSystem().mkdirSync(path);

        //for the html output
        if (!Controller.getFileSystem().existsSync(path + 'html/'))
            Controller.getFileSystem().mkdirSync(path + 'html/');

        //the react build
        path = path + 'dist/';

        if (!Controller.getFileSystem().existsSync(path))
            Controller.getFileSystem().mkdirSync(path);

        Controller.getFileSystem()
            .readdirSync(Controller.settings.cloneRootFolder + 'template/', {
                withFileTypes: true,
            })
            .forEach((file) => {
                if (file.isFile()) {
                    console.log('- copying file ' + file.name + ' to ' + path);
                    Controller.getFileSystem().copyFileSync(
                        Controller.settings.cloneRootFolder +
                            'template/' +
                            file.name,
                        path + file.name
                    );
                } else if (file.isDirectory()) {
                    copyRecursive(
                        file.name + '/',
                        path,
                        Controller.settings.cloneRootFolder + 'template/'
                    );
                }
            });

        console.log('> Copying deployments');

        let clonePath =
            './temp/cloneMachine/' +
            Controller.deployConfig.project +
            '/' +
            clone.cloneId +
            '/';
        Controller.getFileSystem()
            .readdirSync(clonePath, {
                withFileTypes: true,
            })
            .forEach((file) => {
                if (!file.isFile()) return;
                console.log(
                    '- copying ' +
                        (clonePath + file.name) +
                        ' to ' +
                        (path + 'src/Deployments/' + file.name)
                );
                Controller.getFileSystem().copyFileSync(
                    clonePath + file.name,
                    path + 'src/Deployments/' + file.name
                );
                console.log(
                    '- copying ' +
                        (clonePath + file.name) +
                        ' to ' +
                        (path + 'src/Deployments/production/' + file.name)
                );
                Controller.getFileSystem().copyFileSync(
                    clonePath + file.name,
                    path + 'src/Deployments/production/' + file.name
                );
            });
    }

    console.log(
        '\n> Success! Please build react applications and then upload them to /var/www/ directly.'
            .cyan
    );
    console.log(
        'Please place all the confs inside the ngix folder in the sites-enabled dir in /etc/nginx/'
            .yellow
    );
};

Script.name = 'Make React Websites';
Script.description =
    'Makes the required react folders for the clones based on the parents react folder.';
Script.requireDeployment = true;
Script.verifyContext = true;
Script.parameters = {
    cloneIndex: 0, //if unspecified will make react websites for all minters
    combined: false,
};
module.exports = Script;
